
STM32RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800bf80  0800bf80  0000cf80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c470  0800c470  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c470  0800c470  0000d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c478  0800c478  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c47c  0800c47c  0000d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c480  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d8c  200001dc  0800c65c  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f68  0800c65c  0000ef68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdda  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d07  00000000  00000000  0002afe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000144d  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053f0  00000000  00000000  00031b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e654  00000000  00000000  00036f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec614  00000000  00000000  00055569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fbc  00000000  00000000  00141bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00149b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf64 	.word	0x0800bf64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800bf64 	.word	0x0800bf64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <lcd_send_cmd>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void lcd_send_cmd (char cmd)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f023 030f 	bic.w	r3, r3, #15
 8000ee8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f043 030c 	orr.w	r3, r3, #12
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	f043 030c 	orr.w	r3, r3, #12
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2304      	movs	r3, #4
 8000f22:	214e      	movs	r1, #78	@ 0x4e
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <lcd_send_cmd+0x5c>)
 8000f26:	f002 fa31 	bl	800338c <HAL_I2C_Master_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000240 	.word	0x20000240

08000f38 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 030d 	orr.w	r3, r3, #13
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0309 	orr.w	r3, r3, #9
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 030d 	orr.w	r3, r3, #13
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	f043 0309 	orr.w	r3, r3, #9
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2304      	movs	r3, #4
 8000f82:	214e      	movs	r1, #78	@ 0x4e
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <lcd_send_data+0x5c>)
 8000f86:	f002 fa01 	bl	800338c <HAL_I2C_Master_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000240 	.word	0x20000240

08000f98 <lcd_clear>:

void lcd_clear(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ff9b 	bl	8000ed8 <lcd_send_cmd>
	osDelay(10);
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f005 fcf2 	bl	800698c <osDelay>
	lcd_send_cmd (0x06);
 8000fa8:	2006      	movs	r0, #6
 8000faa:	f7ff ff95 	bl	8000ed8 <lcd_send_cmd>
	osDelay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f005 fcec 	bl	800698c <osDelay>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <lcd_put_cur>:
void lcd_put_cur(int row, int col)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <lcd_put_cur+0x18>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <lcd_put_cur+0x22>
 8000fce:	e009      	b.n	8000fe4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd6:	603b      	str	r3, [r7, #0]
            break;
 8000fd8:	e004      	b.n	8000fe4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fe0:	603b      	str	r3, [r7, #0]
            break;
 8000fe2:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff75 	bl	8000ed8 <lcd_send_cmd>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <lcd_init>:

void lcd_init (void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	osDelay(50);  // wait for >40ms
 8000ffa:	2032      	movs	r0, #50	@ 0x32
 8000ffc:	f005 fcc6 	bl	800698c <osDelay>
	lcd_send_cmd (0x30);
 8001000:	2030      	movs	r0, #48	@ 0x30
 8001002:	f7ff ff69 	bl	8000ed8 <lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 8001006:	2005      	movs	r0, #5
 8001008:	f005 fcc0 	bl	800698c <osDelay>
	lcd_send_cmd (0x30);
 800100c:	2030      	movs	r0, #48	@ 0x30
 800100e:	f7ff ff63 	bl	8000ed8 <lcd_send_cmd>
	osDelay(1);  // wait for >100us
 8001012:	2001      	movs	r0, #1
 8001014:	f005 fcba 	bl	800698c <osDelay>
	lcd_send_cmd (0x30);
 8001018:	2030      	movs	r0, #48	@ 0x30
 800101a:	f7ff ff5d 	bl	8000ed8 <lcd_send_cmd>
	osDelay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f005 fcb4 	bl	800698c <osDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001024:	2020      	movs	r0, #32
 8001026:	f7ff ff57 	bl	8000ed8 <lcd_send_cmd>
	osDelay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f005 fcae 	bl	800698c <osDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001030:	2028      	movs	r0, #40	@ 0x28
 8001032:	f7ff ff51 	bl	8000ed8 <lcd_send_cmd>
	osDelay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f005 fca8 	bl	800698c <osDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800103c:	2008      	movs	r0, #8
 800103e:	f7ff ff4b 	bl	8000ed8 <lcd_send_cmd>
	osDelay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f005 fca2 	bl	800698c <osDelay>
	lcd_send_cmd (0x01);  // clear display
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ff45 	bl	8000ed8 <lcd_send_cmd>
	osDelay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f005 fc9c 	bl	800698c <osDelay>
	osDelay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f005 fc99 	bl	800698c <osDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800105a:	2006      	movs	r0, #6
 800105c:	f7ff ff3c 	bl	8000ed8 <lcd_send_cmd>
	osDelay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f005 fc93 	bl	800698c <osDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001066:	200c      	movs	r0, #12
 8001068:	f7ff ff36 	bl	8000ed8 <lcd_send_cmd>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001078:	e006      	b.n	8001088 <lcd_send_string+0x18>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff58 	bl	8000f38 <lcd_send_data>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f4      	bne.n	800107a <lcd_send_string+0xa>
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f001 f8b8 	bl	8002214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f884 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 fac6 	bl	8001638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ac:	f000 fa9a 	bl	80015e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b0:	f000 f93e 	bl	8001330 <MX_I2C1_Init>
  MX_ADC1_Init();
 80010b4:	f000 f8ea 	bl	800128c <MX_ADC1_Init>
  MX_TIM3_Init();
 80010b8:	f000 f968 	bl	800138c <MX_TIM3_Init>
  MX_TIM6_Init();
 80010bc:	f000 f9d6 	bl	800146c <MX_TIM6_Init>
  MX_TIM12_Init();
 80010c0:	f000 fa08 	bl	80014d4 <MX_TIM12_Init>
  MX_TIM14_Init();
 80010c4:	f000 fa40 	bl	8001548 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	sprintf(serial,"MAIN ENTRY \r\n",DISTANCE);
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <main+0xbc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa5b 	bl	8000588 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4921      	ldr	r1, [pc, #132]	@ (800115c <main+0xc0>)
 80010d8:	4821      	ldr	r0, [pc, #132]	@ (8001160 <main+0xc4>)
 80010da:	f008 fe17 	bl	8009d0c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)serial, sizeof(serial), 100);
 80010de:	2364      	movs	r3, #100	@ 0x64
 80010e0:	2232      	movs	r2, #50	@ 0x32
 80010e2:	491f      	ldr	r1, [pc, #124]	@ (8001160 <main+0xc4>)
 80010e4:	481f      	ldr	r0, [pc, #124]	@ (8001164 <main+0xc8>)
 80010e6:	f004 ff75 	bl	8005fd4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ea:	f005 fb73 	bl	80067d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BLINK0 */
  BLINK0Handle = osThreadNew(STARTBLINK0, NULL, &BLINK0_attributes);
 80010ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <main+0xcc>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	481e      	ldr	r0, [pc, #120]	@ (800116c <main+0xd0>)
 80010f4:	f005 fbb8 	bl	8006868 <osThreadNew>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <main+0xd4>)
 80010fc:	6013      	str	r3, [r2, #0]

  /* creation of BLINK1 */
  BLINK1Handle = osThreadNew(STARTBLINK1, NULL, &BLINK1_attributes);
 80010fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <main+0xd8>)
 8001100:	2100      	movs	r1, #0
 8001102:	481d      	ldr	r0, [pc, #116]	@ (8001178 <main+0xdc>)
 8001104:	f005 fbb0 	bl	8006868 <osThreadNew>
 8001108:	4603      	mov	r3, r0
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <main+0xe0>)
 800110c:	6013      	str	r3, [r2, #0]

  /* creation of HANDLELCD */
  HANDLELCDHandle = osThreadNew(UPDATELCD, NULL, &HANDLELCD_attributes);
 800110e:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <main+0xe4>)
 8001110:	2100      	movs	r1, #0
 8001112:	481c      	ldr	r0, [pc, #112]	@ (8001184 <main+0xe8>)
 8001114:	f005 fba8 	bl	8006868 <osThreadNew>
 8001118:	4603      	mov	r3, r0
 800111a:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <main+0xec>)
 800111c:	6013      	str	r3, [r2, #0]

  /* creation of HANDLEMOTION */
  HANDLEMOTIONHandle = osThreadNew(UPDATEMOTION, NULL, &HANDLEMOTION_attributes);
 800111e:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <main+0xf0>)
 8001120:	2100      	movs	r1, #0
 8001122:	481b      	ldr	r0, [pc, #108]	@ (8001190 <main+0xf4>)
 8001124:	f005 fba0 	bl	8006868 <osThreadNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <main+0xf8>)
 800112c:	6013      	str	r3, [r2, #0]

  /* creation of HANDLEDISTANCE */
  HANDLEDISTANCEHandle = osThreadNew(UPDATEDISTANCE, NULL, &HANDLEDISTANCE_attributes);
 800112e:	4a1a      	ldr	r2, [pc, #104]	@ (8001198 <main+0xfc>)
 8001130:	2100      	movs	r1, #0
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <main+0x100>)
 8001134:	f005 fb98 	bl	8006868 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <main+0x104>)
 800113c:	6013      	str	r3, [r2, #0]

  /* creation of HANDLESERVO */
  HANDLESERVOHandle = osThreadNew(UPDATESERVO, NULL, &HANDLESERVO_attributes);
 800113e:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <main+0x108>)
 8001140:	2100      	movs	r1, #0
 8001142:	4819      	ldr	r0, [pc, #100]	@ (80011a8 <main+0x10c>)
 8001144:	f005 fb90 	bl	8006868 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <main+0x110>)
 800114c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800114e:	f005 fb65 	bl	800681c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001152:	bf00      	nop
 8001154:	e7fd      	b.n	8001152 <main+0xb6>
 8001156:	bf00      	nop
 8001158:	20000468 	.word	0x20000468
 800115c:	0800bfc8 	.word	0x0800bfc8
 8001160:	20000434 	.word	0x20000434
 8001164:	200003b4 	.word	0x200003b4
 8001168:	0800c00c 	.word	0x0800c00c
 800116c:	0800189d 	.word	0x0800189d
 8001170:	200003fc 	.word	0x200003fc
 8001174:	0800c030 	.word	0x0800c030
 8001178:	080018bd 	.word	0x080018bd
 800117c:	20000400 	.word	0x20000400
 8001180:	0800c054 	.word	0x0800c054
 8001184:	080018dd 	.word	0x080018dd
 8001188:	20000404 	.word	0x20000404
 800118c:	0800c078 	.word	0x0800c078
 8001190:	08001949 	.word	0x08001949
 8001194:	20000408 	.word	0x20000408
 8001198:	0800c09c 	.word	0x0800c09c
 800119c:	08001981 	.word	0x08001981
 80011a0:	2000040c 	.word	0x2000040c
 80011a4:	0800c0c0 	.word	0x0800c0c0
 80011a8:	08001a49 	.word	0x08001a49
 80011ac:	20000410 	.word	0x20000410

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	@ 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2234      	movs	r2, #52	@ 0x34
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f008 fe07 	bl	8009dd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <SystemClock_Config+0xd4>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <SystemClock_Config+0xd4>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <SystemClock_Config+0xd4>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <SystemClock_Config+0xd8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011fc:	4a22      	ldr	r2, [pc, #136]	@ (8001288 <SystemClock_Config+0xd8>)
 80011fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <SystemClock_Config+0xd8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001224:	2310      	movs	r3, #16
 8001226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001228:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800122c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800122e:	2304      	movs	r3, #4
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001232:	2302      	movs	r3, #2
 8001234:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4618      	mov	r0, r3
 8001240:	f002 ff7a 	bl	8004138 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800124a:	f000 fc3f 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	2302      	movs	r3, #2
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2102      	movs	r1, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fbe8 	bl	8003a40 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001276:	f000 fc29 	bl	8001acc <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	@ 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012a0:	4a21      	ldr	r2, [pc, #132]	@ (8001328 <MX_ADC1_Init+0x9c>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012ce:	4a17      	ldr	r2, [pc, #92]	@ (800132c <MX_ADC1_Init+0xa0>)
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012da:	2201      	movs	r2, #1
 80012dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ec:	480d      	ldr	r0, [pc, #52]	@ (8001324 <MX_ADC1_Init+0x98>)
 80012ee:	f000 ffd3 	bl	8002298 <HAL_ADC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012f8:	f000 fbe8 	bl	8001acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_ADC1_Init+0x98>)
 800130e:	f001 fa17 	bl	8002740 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001318:	f000 fbd8 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001f8 	.word	0x200001f8
 8001328:	40012000 	.word	0x40012000
 800132c:	0f000001 	.word	0x0f000001

08001330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <MX_I2C1_Init+0x54>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_I2C1_Init+0x50>)
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <MX_I2C1_Init+0x58>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_I2C1_Init+0x50>)
 800134e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_I2C1_Init+0x50>)
 800136e:	f001 fec9 	bl	8003104 <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001378:	f000 fba8 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000240 	.word	0x20000240
 8001384:	40005400 	.word	0x40005400
 8001388:	000186a0 	.word	0x000186a0

0800138c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001468 <MX_TIM3_Init+0xdc>)
 80013ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80013bc:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013be:	2253      	movs	r2, #83	@ 0x53
 80013c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013dc:	4821      	ldr	r0, [pc, #132]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013de:	f003 f949 	bl	8004674 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80013e8:	f000 fb70 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4619      	mov	r1, r3
 80013f8:	481a      	ldr	r0, [pc, #104]	@ (8001464 <MX_TIM3_Init+0xd8>)
 80013fa:	f003 ff9b 	bl	8005334 <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001404:	f000 fb62 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001408:	4816      	ldr	r0, [pc, #88]	@ (8001464 <MX_TIM3_Init+0xd8>)
 800140a:	f003 fb15 	bl	8004a38 <HAL_TIM_IC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001414:	f000 fb5a 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	480f      	ldr	r0, [pc, #60]	@ (8001464 <MX_TIM3_Init+0xd8>)
 8001428:	f004 fcf4 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001432:	f000 fb4b 	bl	8001acc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001436:	230a      	movs	r3, #10
 8001438:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800143a:	2301      	movs	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8001442:	2304      	movs	r3, #4
 8001444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_TIM3_Init+0xd8>)
 800144e:	f003 fe13 	bl	8005078 <HAL_TIM_IC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001458:	f000 fb38 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000294 	.word	0x20000294
 8001468:	40000400 	.word	0x40000400

0800146c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_TIM6_Init+0x60>)
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <MX_TIM6_Init+0x64>)
 800147e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_TIM6_Init+0x60>)
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_TIM6_Init+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_TIM6_Init+0x60>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_TIM6_Init+0x60>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM6_Init+0x60>)
 800149a:	f003 f8eb 	bl	8004674 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80014a4:	f000 fb12 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM6_Init+0x60>)
 80014b6:	f004 fcad 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 fb04 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002dc 	.word	0x200002dc
 80014d0:	40001000 	.word	0x40001000

080014d4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_TIM12_Init+0x6c>)
 80014e8:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <MX_TIM12_Init+0x70>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_TIM12_Init+0x6c>)
 80014ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_TIM12_Init+0x6c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1282;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_TIM12_Init+0x6c>)
 80014fc:	f240 5202 	movw	r2, #1282	@ 0x502
 8001500:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_TIM12_Init+0x6c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <MX_TIM12_Init+0x6c>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800150e:	480c      	ldr	r0, [pc, #48]	@ (8001540 <MX_TIM12_Init+0x6c>)
 8001510:	f003 f8b0 	bl	8004674 <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800151a:	f000 fad7 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_TIM12_Init+0x6c>)
 800152a:	f003 ff03 	bl	8005334 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001534:	f000 faca 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000324 	.word	0x20000324
 8001544:	40001800 	.word	0x40001800

08001548 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_TIM14_Init+0x94>)
 8001562:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <MX_TIM14_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM14_Init+0x94>)
 8001568:	2253      	movs	r2, #83	@ 0x53
 800156a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_TIM14_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_TIM14_Init+0x94>)
 8001574:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001578:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM14_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_TIM14_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001586:	4815      	ldr	r0, [pc, #84]	@ (80015dc <MX_TIM14_Init+0x94>)
 8001588:	f003 f874 	bl	8004674 <HAL_TIM_Base_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001592:	f000 fa9b 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_TIM14_Init+0x94>)
 8001598:	f003 f92c 	bl	80047f4 <HAL_TIM_PWM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80015a2:	f000 fa93 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	@ 0x60
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80015aa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_TIM14_Init+0x94>)
 80015c0:	f003 fdf6 	bl	80051b0 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80015ca:	f000 fa7f 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <MX_TIM14_Init+0x94>)
 80015d0:	f000 fbdc 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000036c 	.word	0x2000036c
 80015e0:	40002000 	.word	0x40002000

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_USART2_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_USART2_UART_Init+0x4c>)
 800161c:	f004 fc8a 	bl	8005f34 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 fa51 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003b4 	.word	0x200003b4
 8001634:	40004400 	.word	0x40004400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a36      	ldr	r2, [pc, #216]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a2f      	ldr	r2, [pc, #188]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <MX_GPIO_Init+0xf8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <MX_GPIO_Init+0xf8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a28      	ldr	r2, [pc, #160]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <MX_GPIO_Init+0xf8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MX_GPIO_Init+0xf8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <MX_GPIO_Init+0xf8>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_GPIO_Init+0xf8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2120      	movs	r1, #32
 80016c2:	481c      	ldr	r0, [pc, #112]	@ (8001734 <MX_GPIO_Init+0xfc>)
 80016c4:	f001 fcea 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2110      	movs	r1, #16
 80016cc:	481a      	ldr	r0, [pc, #104]	@ (8001738 <MX_GPIO_Init+0x100>)
 80016ce:	f001 fce5 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4814      	ldr	r0, [pc, #80]	@ (800173c <MX_GPIO_Init+0x104>)
 80016ea:	f001 fb43 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ee:	2320      	movs	r3, #32
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_GPIO_Init+0xfc>)
 8001706:	f001 fb35 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800170a:	2310      	movs	r3, #16
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_GPIO_Init+0x100>)
 8001722:	f001 fb27 	bl	8002d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800

08001740 <usDelay>:

/* USER CODE BEGIN 4 */

void usDelay(uint32_t uSec){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d801      	bhi.n	8001752 <usDelay+0x12>
 800174e:	2302      	movs	r3, #2
 8001750:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1;
 8001752:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <usDelay+0x60>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	62d3      	str	r3, [r2, #44]	@ 0x2c
	usTIM->EGR = 1;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <usDelay+0x60>)
 800175c:	2201      	movs	r2, #1
 800175e:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1;
 8001760:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <usDelay+0x60>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a0e      	ldr	r2, [pc, #56]	@ (80017a0 <usDelay+0x60>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <usDelay+0x60>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <usDelay+0x60>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001778:	bf00      	nop
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <usDelay+0x60>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d1f9      	bne.n	800177a <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <usDelay+0x60>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <usDelay+0x60>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6113      	str	r3, [r2, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40001000 	.word	0x40001000

080017a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* h){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	if(h == &hadc1){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_ADC_ConvCpltCallback+0x28>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_ConvCpltCallback+0x1e>
		ADC_MOTION = HAL_ADC_GetValue(&hadc1);
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <HAL_ADC_ConvCpltCallback+0x28>)
 80017b6:	f000 ffa1 	bl	80026fc <HAL_ADC_GetValue>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017c0:	801a      	strh	r2, [r3, #0]
	}
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001f8 	.word	0x200001f8
 80017d0:	20000466 	.word	0x20000466

080017d4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

	if(capturedIdx == 0){
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10a      	bne.n	80017fa <HAL_TIM_IC_CaptureCallback+0x26>
		edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f003 fe6c 	bl	80054c4 <HAL_TIM_ReadCapturedValue>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a24      	ldr	r2, [pc, #144]	@ (8001880 <HAL_TIM_IC_CaptureCallback+0xac>)
 80017f0:	6013      	str	r3, [r2, #0]
		capturedIdx = 1;
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e010      	b.n	800181c <HAL_TIM_IC_CaptureCallback+0x48>
	}
	else if(capturedIdx == 1){
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10c      	bne.n	800181c <HAL_TIM_IC_CaptureCallback+0x48>
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001802:	2100      	movs	r1, #0
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f003 fe5d 	bl	80054c4 <HAL_TIM_ReadCapturedValue>
 800180a:	4603      	mov	r3, r0
 800180c:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800180e:	6013      	str	r3, [r2, #0]
		capturedIdx = 0;
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
		icFlag = 1;
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
	}
    // Calculate Distance
    if(edge2Time > edge1Time) {
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d91c      	bls.n	8001862 <HAL_TIM_IC_CaptureCallback+0x8e>
      DISTANCE = ((edge2Time - edge1Time) + 0.0f) * speedofSound;
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_TIM_IC_CaptureCallback+0xac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001846:	edc3 7a00 	vstr	s15, [r3]
      sprintf(LCD_BUF_1,"DIS: %06.2f cm",DISTANCE);
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe9a 	bl	8000588 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	490e      	ldr	r1, [pc, #56]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800185a:	480f      	ldr	r0, [pc, #60]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800185c:	f008 fa56 	bl	8009d0c <siprintf>
    }
    else{
    	sprintf(LCD_BUF_1,"DIS: %06.2f cm",0.0f);
    }
}
 8001860:	e007      	b.n	8001872 <HAL_TIM_IC_CaptureCallback+0x9e>
    	sprintf(LCD_BUF_1,"DIS: %06.2f cm",0.0f);
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	490a      	ldr	r1, [pc, #40]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800186c:	480a      	ldr	r0, [pc, #40]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800186e:	f008 fa4d 	bl	8009d0c <siprintf>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000046d 	.word	0x2000046d
 8001880:	20000470 	.word	0x20000470
 8001884:	20000474 	.word	0x20000474
 8001888:	2000046c 	.word	0x2000046c
 800188c:	20000000 	.word	0x20000000
 8001890:	20000468 	.word	0x20000468
 8001894:	0800bfd8 	.word	0x0800bfd8
 8001898:	20000424 	.word	0x20000424

0800189c <STARTBLINK0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_STARTBLINK0 */
void STARTBLINK0(void *argument)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80018a4:	2120      	movs	r1, #32
 80018a6:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <STARTBLINK0+0x1c>)
 80018a8:	f001 fc11 	bl	80030ce <HAL_GPIO_TogglePin>
    osDelay(500);
 80018ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018b0:	f005 f86c 	bl	800698c <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80018b4:	bf00      	nop
 80018b6:	e7f5      	b.n	80018a4 <STARTBLINK0+0x8>
 80018b8:	40020000 	.word	0x40020000

080018bc <STARTBLINK1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STARTBLINK1 */
void STARTBLINK1(void *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STARTBLINK1 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80018c4:	2120      	movs	r1, #32
 80018c6:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <STARTBLINK1+0x1c>)
 80018c8:	f001 fc01 	bl	80030ce <HAL_GPIO_TogglePin>
    osDelay(600);
 80018cc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80018d0:	f005 f85c 	bl	800698c <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80018d4:	bf00      	nop
 80018d6:	e7f5      	b.n	80018c4 <STARTBLINK1+0x8>
 80018d8:	40020000 	.word	0x40020000

080018dc <UPDATELCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UPDATELCD */
void UPDATELCD(void *argument)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UPDATELCD */
	lcd_init();
 80018e4:	f7ff fb87 	bl	8000ff6 <lcd_init>
	sprintf(LCD_BUF_0,"ADC RAW: %u",ADC_MOTION);
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <UPDATELCD+0x54>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4911      	ldr	r1, [pc, #68]	@ (8001934 <UPDATELCD+0x58>)
 80018f0:	4811      	ldr	r0, [pc, #68]	@ (8001938 <UPDATELCD+0x5c>)
 80018f2:	f008 fa0b 	bl	8009d0c <siprintf>
	sprintf(LCD_BUF_1,"DIS: %06.2f cm",DISTANCE);
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <UPDATELCD+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe44 	bl	8000588 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	490e      	ldr	r1, [pc, #56]	@ (8001940 <UPDATELCD+0x64>)
 8001906:	480f      	ldr	r0, [pc, #60]	@ (8001944 <UPDATELCD+0x68>)
 8001908:	f008 fa00 	bl	8009d0c <siprintf>
  /* Infinite loop */
  for(;;)
  {
	lcd_clear();
 800190c:	f7ff fb44 	bl	8000f98 <lcd_clear>
	lcd_send_string(LCD_BUF_0);
 8001910:	4809      	ldr	r0, [pc, #36]	@ (8001938 <UPDATELCD+0x5c>)
 8001912:	f7ff fbad 	bl	8001070 <lcd_send_string>
	lcd_put_cur(1, 0);
 8001916:	2100      	movs	r1, #0
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fb4d 	bl	8000fb8 <lcd_put_cur>
	lcd_send_string(LCD_BUF_1);
 800191e:	4809      	ldr	r0, [pc, #36]	@ (8001944 <UPDATELCD+0x68>)
 8001920:	f7ff fba6 	bl	8001070 <lcd_send_string>
    osDelay(1000);
 8001924:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001928:	f005 f830 	bl	800698c <osDelay>
	lcd_clear();
 800192c:	bf00      	nop
 800192e:	e7ed      	b.n	800190c <UPDATELCD+0x30>
 8001930:	20000466 	.word	0x20000466
 8001934:	0800bfe8 	.word	0x0800bfe8
 8001938:	20000414 	.word	0x20000414
 800193c:	20000468 	.word	0x20000468
 8001940:	0800bfd8 	.word	0x0800bfd8
 8001944:	20000424 	.word	0x20000424

08001948 <UPDATEMOTION>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UPDATEMOTION */
void UPDATEMOTION(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UPDATEMOTION */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_IT(&hadc1);
 8001950:	4807      	ldr	r0, [pc, #28]	@ (8001970 <UPDATEMOTION+0x28>)
 8001952:	f000 fce5 	bl	8002320 <HAL_ADC_Start_IT>
	sprintf(LCD_BUF_0,"ADC RAW: %u",ADC_MOTION);
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <UPDATEMOTION+0x2c>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	4906      	ldr	r1, [pc, #24]	@ (8001978 <UPDATEMOTION+0x30>)
 800195e:	4807      	ldr	r0, [pc, #28]	@ (800197c <UPDATEMOTION+0x34>)
 8001960:	f008 f9d4 	bl	8009d0c <siprintf>
    osDelay(500);
 8001964:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001968:	f005 f810 	bl	800698c <osDelay>
	HAL_ADC_Start_IT(&hadc1);
 800196c:	bf00      	nop
 800196e:	e7ef      	b.n	8001950 <UPDATEMOTION+0x8>
 8001970:	200001f8 	.word	0x200001f8
 8001974:	20000466 	.word	0x20000466
 8001978:	0800bfe8 	.word	0x0800bfe8
 800197c:	20000414 	.word	0x20000414

08001980 <UPDATEDISTANCE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UPDATEDISTANCE */
void UPDATEDISTANCE(void *argument)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UPDATEDISTANCE */
	  /* Infinite loop */
	  for(;;)
	  {
	    // Set TRIG LOW for 3 us
	    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2110      	movs	r1, #16
 800198c:	4827      	ldr	r0, [pc, #156]	@ (8001a2c <UPDATEDISTANCE+0xac>)
 800198e:	f001 fb85 	bl	800309c <HAL_GPIO_WritePin>
	    usDelay(3);
 8001992:	2003      	movs	r0, #3
 8001994:	f7ff fed4 	bl	8001740 <usDelay>

	    // Output 10us TRIG
	    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2110      	movs	r1, #16
 800199c:	4823      	ldr	r0, [pc, #140]	@ (8001a2c <UPDATEDISTANCE+0xac>)
 800199e:	f001 fb7d 	bl	800309c <HAL_GPIO_WritePin>
	    usDelay(10);
 80019a2:	200a      	movs	r0, #10
 80019a4:	f7ff fecc 	bl	8001740 <usDelay>
	    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2110      	movs	r1, #16
 80019ac:	481f      	ldr	r0, [pc, #124]	@ (8001a2c <UPDATEDISTANCE+0xac>)
 80019ae:	f001 fb75 	bl	800309c <HAL_GPIO_WritePin>

	    // Start IC timer
	    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80019b2:	2100      	movs	r1, #0
 80019b4:	481e      	ldr	r0, [pc, #120]	@ (8001a30 <UPDATEDISTANCE+0xb0>)
 80019b6:	f003 f899 	bl	8004aec <HAL_TIM_IC_Start_IT>

	    // Wait for IC flag with a timeout (optional)
	    uint32_t startTick = HAL_GetTick();
 80019ba:	f000 fc61 	bl	8002280 <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]
	    do {
	      if(icFlag) break;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <UPDATEDISTANCE+0xb4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d108      	bne.n	80019da <UPDATEDISTANCE+0x5a>
	    } while((HAL_GetTick() - startTick) < 500);
 80019c8:	f000 fc5a 	bl	8002280 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019d6:	d3f3      	bcc.n	80019c0 <UPDATEDISTANCE+0x40>
 80019d8:	e000      	b.n	80019dc <UPDATEDISTANCE+0x5c>
	      if(icFlag) break;
 80019da:	bf00      	nop

	    icFlag = 0;
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <UPDATEDISTANCE+0xb4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	    HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80019e2:	2100      	movs	r1, #0
 80019e4:	4812      	ldr	r0, [pc, #72]	@ (8001a30 <UPDATEDISTANCE+0xb0>)
 80019e6:	f003 f9a9 	bl	8004d3c <HAL_TIM_IC_Stop_IT>

	    // Calculate Distance
	    if(edge2Time > edge1Time) {
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <UPDATEDISTANCE+0xb8>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <UPDATEDISTANCE+0xbc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d911      	bls.n	8001a1a <UPDATEDISTANCE+0x9a>
	      DISTANCE = ((edge2Time - edge1Time) + 0.0f) * speedofSound;
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <UPDATEDISTANCE+0xb8>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <UPDATEDISTANCE+0xbc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <UPDATEDISTANCE+0xc0>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <UPDATEDISTANCE+0xc4>)
 8001a14:	edc3 7a00 	vstr	s15, [r3]
 8001a18:	e003      	b.n	8001a22 <UPDATEDISTANCE+0xa2>
	    } else {
	      DISTANCE = 0.0f;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <UPDATEDISTANCE+0xc4>)
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
	    }

	    // RTOS delay instead of HAL_Delay
	    osDelay(2000); // Delay 1 second (adjust as needed)
 8001a22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a26:	f004 ffb1 	bl	800698c <osDelay>
	  {
 8001a2a:	e7ad      	b.n	8001988 <UPDATEDISTANCE+0x8>
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	20000294 	.word	0x20000294
 8001a34:	2000046c 	.word	0x2000046c
 8001a38:	20000474 	.word	0x20000474
 8001a3c:	20000470 	.word	0x20000470
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000468 	.word	0x20000468

08001a48 <UPDATESERVO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UPDATESERVO */
void UPDATESERVO(void *argument)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UPDATESERVO */
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001a50:	2100      	movs	r1, #0
 8001a52:	4813      	ldr	r0, [pc, #76]	@ (8001aa0 <UPDATESERVO+0x58>)
 8001a54:	f002 ff28 	bl	80048a8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  for(;;)
  {
	  uint32_t startTick = HAL_GetTick();
 8001a58:	f000 fc12 	bl	8002280 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

	  while((HAL_GetTick() - startTick) < 5000);
 8001a5e:	bf00      	nop
 8001a60:	f000 fc0e 	bl	8002280 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d9f6      	bls.n	8001a60 <UPDATESERVO+0x18>

	  if(servo_flag == 0){
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <UPDATESERVO+0x5c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <UPDATESERVO+0x44>
		  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 900);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <UPDATESERVO+0x58>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34
		  servo_flag = 1;
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <UPDATESERVO+0x5c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	e7e5      	b.n	8001a58 <UPDATESERVO+0x10>
		}
	  else{
		  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 2100);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <UPDATESERVO+0x58>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f640 0234 	movw	r2, #2100	@ 0x834
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34
		  servo_flag = 0;
 8001a96:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <UPDATESERVO+0x5c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
  {
 8001a9c:	e7dc      	b.n	8001a58 <UPDATESERVO+0x10>
 8001a9e:	bf00      	nop
 8001aa0:	2000036c 	.word	0x2000036c
 8001aa4:	20000478 	.word	0x20000478

08001aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aba:	f000 fbcd 	bl	8002258 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40001400 	.word	0x40001400

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <Error_Handler+0x8>

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_MspInit+0x54>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <HAL_MspInit+0x54>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_MspInit+0x54>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_MspInit+0x54>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <HAL_MspInit+0x54>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <HAL_MspInit+0x54>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210f      	movs	r1, #15
 8001b1a:	f06f 0001 	mvn.w	r0, #1
 8001b1e:	f001 f8ff 	bl	8002d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <HAL_ADC_MspInit+0x8c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12f      	bne.n	8001bb2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_ADC_MspInit+0x90>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a19      	ldr	r2, [pc, #100]	@ (8001bc0 <HAL_ADC_MspInit+0x90>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_ADC_MspInit+0x90>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_ADC_MspInit+0x90>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <HAL_ADC_MspInit+0x90>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_ADC_MspInit+0x90>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <HAL_ADC_MspInit+0x94>)
 8001b9e:	f001 f8e9 	bl	8002d74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	2012      	movs	r0, #18
 8001ba8:	f001 f8ba 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bac:	2012      	movs	r0, #18
 8001bae:	f001 f8d3 	bl	8002d58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_I2C_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12c      	bne.n	8001c44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <HAL_I2C_MspInit+0x8c>)
 8001c24:	f001 f8a6 	bl	8002d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	@ 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a3f      	ldr	r2, [pc, #252]	@ (8001d74 <HAL_TIM_Base_MspInit+0x11c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d134      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a3d      	ldr	r2, [pc, #244]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a36      	ldr	r2, [pc, #216]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	482b      	ldr	r0, [pc, #172]	@ (8001d7c <HAL_TIM_Base_MspInit+0x124>)
 8001cce:	f001 f851 	bl	8002d74 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	201d      	movs	r0, #29
 8001cd8:	f001 f822 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cdc:	201d      	movs	r0, #29
 8001cde:	f001 f83b 	bl	8002d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001ce2:	e042      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM6)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a25      	ldr	r2, [pc, #148]	@ (8001d80 <HAL_TIM_Base_MspInit+0x128>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a20      	ldr	r2, [pc, #128]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	e02e      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM12)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <HAL_TIM_Base_MspInit+0x12c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d116      	bne.n	8001d44 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	202b      	movs	r0, #43	@ 0x2b
 8001d38:	f000 fff2 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001d3c:	202b      	movs	r0, #43	@ 0x2b
 8001d3e:	f001 f80b 	bl	8002d58 <HAL_NVIC_EnableIRQ>
}
 8001d42:	e012      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM14)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_TIM_Base_MspInit+0x130>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10d      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_TIM_Base_MspInit+0x120>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40001000 	.word	0x40001000
 8001d84:	40001800 	.word	0x40001800
 8001d88:	40002000 	.word	0x40002000

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11d      	bne.n	8001dea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001dda:	2309      	movs	r3, #9
 8001ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_TIM_MspPostInit+0x70>)
 8001de6:	f000 ffc5 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40002000 	.word	0x40002000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_UART_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12b      	bne.n	8001e7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e76:	f000 ff7d 	bl	8002d74 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	@ 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40004400 	.word	0x40004400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	@ 0x38
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4b33      	ldr	r3, [pc, #204]	@ (8001f74 <HAL_InitTick+0xe4>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	4a32      	ldr	r2, [pc, #200]	@ (8001f74 <HAL_InitTick+0xe4>)
 8001eaa:	f043 0320 	orr.w	r3, r3, #32
 8001eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb0:	4b30      	ldr	r3, [pc, #192]	@ (8001f74 <HAL_InitTick+0xe4>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ebc:	f107 0210 	add.w	r2, r7, #16
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 fed4 	bl	8003c74 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ed6:	f001 fea5 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8001eda:	6378      	str	r0, [r7, #52]	@ 0x34
 8001edc:	e004      	b.n	8001ee8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ede:	f001 fea1 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eea:	4a23      	ldr	r2, [pc, #140]	@ (8001f78 <HAL_InitTick+0xe8>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	0c9b      	lsrs	r3, r3, #18
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_InitTick+0xec>)
 8001ef8:	4a21      	ldr	r2, [pc, #132]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001efa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <HAL_InitTick+0xec>)
 8001efe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f02:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f04:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_InitTick+0xec>)
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <HAL_InitTick+0xec>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_InitTick+0xec>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_InitTick+0xec>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001f1c:	4817      	ldr	r0, [pc, #92]	@ (8001f7c <HAL_InitTick+0xec>)
 8001f1e:	f002 fba9 	bl	8004674 <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d11b      	bne.n	8001f68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001f30:	4812      	ldr	r0, [pc, #72]	@ (8001f7c <HAL_InitTick+0xec>)
 8001f32:	f002 fbef 	bl	8004714 <HAL_TIM_Base_Start_IT>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d111      	bne.n	8001f68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f44:	2037      	movs	r0, #55	@ 0x37
 8001f46:	f000 ff07 	bl	8002d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d808      	bhi.n	8001f62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	2037      	movs	r0, #55	@ 0x37
 8001f56:	f000 fee3 	bl	8002d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_InitTick+0xf4>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e002      	b.n	8001f68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3738      	adds	r7, #56	@ 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	431bde83 	.word	0x431bde83
 8001f7c:	2000047c 	.word	0x2000047c
 8001f80:	40001400 	.word	0x40001400
 8001f84:	20000008 	.word	0x20000008

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <NMI_Handler+0x4>

08001f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <MemManage_Handler+0x4>

08001fa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <UsageFault_Handler+0x4>

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <ADC_IRQHandler+0x10>)
 8001fc6:	f000 fa89 	bl	80024dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200001f8 	.word	0x200001f8

08001fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd8:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <TIM3_IRQHandler+0x10>)
 8001fda:	f002 ff5d 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000294 	.word	0x20000294

08001fe8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001fee:	f002 ff53 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000324 	.word	0x20000324

08001ffc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <TIM7_IRQHandler+0x10>)
 8002002:	f002 ff49 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000047c 	.word	0x2000047c

08002010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_kill>:

int _kill(int pid, int sig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202a:	f007 ff25 	bl	8009e78 <__errno>
 800202e:	4603      	mov	r3, r0
 8002030:	2216      	movs	r2, #22
 8002032:	601a      	str	r2, [r3, #0]
  return -1;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_exit>:

void _exit (int status)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffe7 	bl	8002020 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002052:	bf00      	nop
 8002054:	e7fd      	b.n	8002052 <_exit+0x12>

08002056 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e00a      	b.n	800207e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002068:	f3af 8000 	nop.w
 800206c:	4601      	mov	r1, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	b2ca      	uxtb	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	dbf0      	blt.n	8002068 <_read+0x12>
  }

  return len;
 8002086:	687b      	ldr	r3, [r7, #4]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e009      	b.n	80020b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbf1      	blt.n	80020a2 <_write+0x12>
  }
  return len;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_close>:

int _close(int file)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f0:	605a      	str	r2, [r3, #4]
  return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_isatty>:

int _isatty(int file)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f007 fe8a 	bl	8009e78 <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20020000 	.word	0x20020000
 8002190:	00000400 	.word	0x00000400
 8002194:	200004c4 	.word	0x200004c4
 8002198:	20004f68 	.word	0x20004f68

0800219c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c4:	f7ff ffea 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	@ (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	@ (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f007 fe49 	bl	8009e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7fe ff53 	bl	800109c <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002204:	0800c480 	.word	0x0800c480
  ldr r2, =_sbss
 8002208:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800220c:	20004f68 	.word	0x20004f68

08002210 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <CAN1_RX0_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_Init+0x40>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_Init+0x40>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_Init+0x40>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 fd64 	bl	8002d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	200f      	movs	r0, #15
 8002244:	f7ff fe24 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fc46 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c
 800227c:	200004c8 	.word	0x200004c8

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	200004c8 	.word	0x200004c8

08002298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e033      	b.n	8002316 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fc3a 	bl	8001b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022de:	f023 0302 	bic.w	r3, r3, #2
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fb5a 	bl	80029a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
 8002306:	e001      	b.n	800230c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADC_Start_IT+0x1a>
 8002336:	2302      	movs	r3, #2
 8002338:	e0bd      	b.n	80024b6 <HAL_ADC_Start_IT+0x196>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d018      	beq.n	8002382 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002360:	4b58      	ldr	r3, [pc, #352]	@ (80024c4 <HAL_ADC_Start_IT+0x1a4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a58      	ldr	r2, [pc, #352]	@ (80024c8 <HAL_ADC_Start_IT+0x1a8>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9a      	lsrs	r2, r3, #18
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	f040 8085 	bne.w	800249c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f023 0206 	bic.w	r2, r3, #6
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80023de:	e002      	b.n	80023e6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <HAL_ADC_Start_IT+0x1ac>)
 80023f0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023fa:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2b00      	cmp	r3, #0
 800241a:	d12a      	bne.n	8002472 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2b      	ldr	r2, [pc, #172]	@ (80024d0 <HAL_ADC_Start_IT+0x1b0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d015      	beq.n	8002452 <HAL_ADC_Start_IT+0x132>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2a      	ldr	r2, [pc, #168]	@ (80024d4 <HAL_ADC_Start_IT+0x1b4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d105      	bne.n	800243c <HAL_ADC_Start_IT+0x11c>
 8002430:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <HAL_ADC_Start_IT+0x1ac>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a25      	ldr	r2, [pc, #148]	@ (80024d8 <HAL_ADC_Start_IT+0x1b8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d136      	bne.n	80024b4 <HAL_ADC_Start_IT+0x194>
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_ADC_Start_IT+0x1ac>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d130      	bne.n	80024b4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d129      	bne.n	80024b4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	e020      	b.n	80024b4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <HAL_ADC_Start_IT+0x1b0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d11b      	bne.n	80024b4 <HAL_ADC_Start_IT+0x194>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d114      	bne.n	80024b4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	e00b      	b.n	80024b4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000004 	.word	0x20000004
 80024c8:	431bde83 	.word	0x431bde83
 80024cc:	40012300 	.word	0x40012300
 80024d0:	40012000 	.word	0x40012000
 80024d4:	40012100 	.word	0x40012100
 80024d8:	40012200 	.word	0x40012200

080024dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d049      	beq.n	80025a6 <HAL_ADC_IRQHandler+0xca>
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d046      	beq.n	80025a6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d12b      	bne.n	8002596 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d127      	bne.n	8002596 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0220 	bic.w	r2, r2, #32
 8002570:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff f904 	bl	80017a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0212 	mvn.w	r2, #18
 80025a4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d057      	beq.n	800266c <HAL_ADC_IRQHandler+0x190>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d054      	beq.n	800266c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d139      	bne.n	800265c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12b      	bne.n	800265c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d124      	bne.n	800265c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11d      	bne.n	800265c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d119      	bne.n	800265c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002636:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fa9d 	bl	8002b9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 020c 	mvn.w	r2, #12
 800266a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x1d6>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d014      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10d      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f837 	bl	8002716 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0201 	mvn.w	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026c0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x218>
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f06f 0220 	mvn.w	r2, #32
 80026e2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f820 	bl	800272a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0220 	mvn.w	r2, #32
 80026f2:	601a      	str	r2, [r3, #0]
  }
}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e113      	b.n	8002984 <HAL_ADC_ConfigChannel+0x244>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b09      	cmp	r3, #9
 800276a:	d925      	bls.n	80027b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68d9      	ldr	r1, [r3, #12]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	3b1e      	subs	r3, #30
 8002782:	2207      	movs	r2, #7
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43da      	mvns	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	400a      	ands	r2, r1
 8002790:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68d9      	ldr	r1, [r3, #12]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	4603      	mov	r3, r0
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4403      	add	r3, r0
 80027aa:	3b1e      	subs	r3, #30
 80027ac:	409a      	lsls	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	e022      	b.n	80027fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	2207      	movs	r2, #7
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6919      	ldr	r1, [r3, #16]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4403      	add	r3, r0
 80027f4:	409a      	lsls	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d824      	bhi.n	8002850 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b05      	subs	r3, #5
 8002818:	221f      	movs	r2, #31
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	3b05      	subs	r3, #5
 8002842:	fa00 f203 	lsl.w	r2, r0, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	635a      	str	r2, [r3, #52]	@ 0x34
 800284e:	e04c      	b.n	80028ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d824      	bhi.n	80028a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3b23      	subs	r3, #35	@ 0x23
 800286a:	221f      	movs	r2, #31
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43da      	mvns	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	400a      	ands	r2, r1
 8002878:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	4618      	mov	r0, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	3b23      	subs	r3, #35	@ 0x23
 8002894:	fa00 f203 	lsl.w	r2, r0, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a0:	e023      	b.n	80028ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	3b41      	subs	r3, #65	@ 0x41
 80028b4:	221f      	movs	r2, #31
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	400a      	ands	r2, r1
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b41      	subs	r3, #65	@ 0x41
 80028de:	fa00 f203 	lsl.w	r2, r0, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ea:	4b29      	ldr	r3, [pc, #164]	@ (8002990 <HAL_ADC_ConfigChannel+0x250>)
 80028ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_ADC_ConfigChannel+0x254>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10f      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1d8>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b12      	cmp	r3, #18
 80028fe:	d10b      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_ADC_ConfigChannel+0x254>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12b      	bne.n	800297a <HAL_ADC_ConfigChannel+0x23a>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <HAL_ADC_ConfigChannel+0x258>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <HAL_ADC_ConfigChannel+0x1f4>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b11      	cmp	r3, #17
 8002932:	d122      	bne.n	800297a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a11      	ldr	r2, [pc, #68]	@ (8002998 <HAL_ADC_ConfigChannel+0x258>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d111      	bne.n	800297a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_ADC_ConfigChannel+0x25c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <HAL_ADC_ConfigChannel+0x260>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	0c9a      	lsrs	r2, r3, #18
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800296c:	e002      	b.n	8002974 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3b01      	subs	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f9      	bne.n	800296e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40012300 	.word	0x40012300
 8002994:	40012000 	.word	0x40012000
 8002998:	10000012 	.word	0x10000012
 800299c:	20000004 	.word	0x20000004
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ac:	4b79      	ldr	r3, [pc, #484]	@ (8002b94 <ADC_Init+0x1f0>)
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	021a      	lsls	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	4a58      	ldr	r2, [pc, #352]	@ (8002b98 <ADC_Init+0x1f4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e00f      	b.n	8002aa2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aa0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0202 	bic.w	r2, r2, #2
 8002ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7e1b      	ldrb	r3, [r3, #24]
 8002abc:	005a      	lsls	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ade:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002aee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	3b01      	subs	r3, #1
 8002afc:	035a      	lsls	r2, r3, #13
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	e007      	b.n	8002b18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	051a      	lsls	r2, r3, #20
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6899      	ldr	r1, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b5a:	025a      	lsls	r2, r3, #9
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	029a      	lsls	r2, r3, #10
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40012300 	.word	0x40012300
 8002b98:	0f000001 	.word	0x0f000001

08002b9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	@ (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff4c 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d32:	f7ff ff61 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6978      	ldr	r0, [r7, #20]
 8002d3e:	f7ff ffb1 	bl	8002ca4 <NVIC_EncodePriority>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff80 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff54 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	@ 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e165      	b.n	800305c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8154 	bne.w	8003056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80ae 	beq.w	8003056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b5d      	ldr	r3, [pc, #372]	@ (8003074 <HAL_GPIO_Init+0x300>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a5c      	ldr	r2, [pc, #368]	@ (8003074 <HAL_GPIO_Init+0x300>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003074 <HAL_GPIO_Init+0x300>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <HAL_GPIO_Init+0x304>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800307c <HAL_GPIO_Init+0x308>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4e      	ldr	r2, [pc, #312]	@ (8003080 <HAL_GPIO_Init+0x30c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x216>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003084 <HAL_GPIO_Init+0x310>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x212>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4c      	ldr	r2, [pc, #304]	@ (8003088 <HAL_GPIO_Init+0x314>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x20e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800308c <HAL_GPIO_Init+0x318>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x20a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4a      	ldr	r2, [pc, #296]	@ (8003090 <HAL_GPIO_Init+0x31c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x206>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a49      	ldr	r2, [pc, #292]	@ (8003094 <HAL_GPIO_Init+0x320>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x202>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e00c      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f76:	2307      	movs	r3, #7
 8002f78:	e00a      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x21c>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa0:	4935      	ldr	r1, [pc, #212]	@ (8003078 <HAL_GPIO_Init+0x304>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fae:	4b3a      	ldr	r3, [pc, #232]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fd2:	4a31      	ldr	r2, [pc, #196]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ffc:	4a26      	ldr	r2, [pc, #152]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003002:	4b25      	ldr	r3, [pc, #148]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800302c:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_GPIO_Init+0x324>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	f67f ae96 	bls.w	8002d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	40013800 	.word	0x40013800
 800307c:	40020000 	.word	0x40020000
 8003080:	40020400 	.word	0x40020400
 8003084:	40020800 	.word	0x40020800
 8003088:	40020c00 	.word	0x40020c00
 800308c:	40021000 	.word	0x40021000
 8003090:	40021400 	.word	0x40021400
 8003094:	40021800 	.word	0x40021800
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	041a      	lsls	r2, r3, #16
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	400b      	ands	r3, r1
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	619a      	str	r2, [r3, #24]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e12b      	b.n	800336e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fd4c 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	@ 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003168:	f000 fd5c 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a81      	ldr	r2, [pc, #516]	@ (8003378 <HAL_I2C_Init+0x274>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d807      	bhi.n	8003188 <HAL_I2C_Init+0x84>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a80      	ldr	r2, [pc, #512]	@ (800337c <HAL_I2C_Init+0x278>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e006      	b.n	8003196 <HAL_I2C_Init+0x92>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a7d      	ldr	r2, [pc, #500]	@ (8003380 <HAL_I2C_Init+0x27c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0e7      	b.n	800336e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a78      	ldr	r2, [pc, #480]	@ (8003384 <HAL_I2C_Init+0x280>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <HAL_I2C_Init+0x274>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d802      	bhi.n	80031d8 <HAL_I2C_Init+0xd4>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e009      	b.n	80031ec <HAL_I2C_Init+0xe8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	4a69      	ldr	r2, [pc, #420]	@ (8003388 <HAL_I2C_Init+0x284>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	495c      	ldr	r1, [pc, #368]	@ (8003378 <HAL_I2C_Init+0x274>)
 8003208:	428b      	cmp	r3, r1
 800320a:	d819      	bhi.n	8003240 <HAL_I2C_Init+0x13c>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e59      	subs	r1, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fbb1 f3f3 	udiv	r3, r1, r3
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003220:	400b      	ands	r3, r1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_I2C_Init+0x138>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e59      	subs	r1, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fbb1 f3f3 	udiv	r3, r1, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	e051      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 800323c:	2304      	movs	r3, #4
 800323e:	e04f      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d111      	bne.n	800326c <HAL_I2C_Init+0x168>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e012      	b.n	8003292 <HAL_I2C_Init+0x18e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e58      	subs	r0, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	0099      	lsls	r1, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x196>
 8003296:	2301      	movs	r3, #1
 8003298:	e022      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10e      	bne.n	80032c0 <HAL_I2C_Init+0x1bc>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e58      	subs	r0, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032be:	e00f      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1e58      	subs	r0, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	0099      	lsls	r1, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	6809      	ldr	r1, [r1, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800330e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6911      	ldr	r1, [r2, #16]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	430b      	orrs	r3, r1
 8003322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	000186a0 	.word	0x000186a0
 800337c:	001e847f 	.word	0x001e847f
 8003380:	003d08ff 	.word	0x003d08ff
 8003384:	431bde83 	.word	0x431bde83
 8003388:	10624dd3 	.word	0x10624dd3

0800338c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	461a      	mov	r2, r3
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
 800339c:	4613      	mov	r3, r2
 800339e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7fe ff6e 	bl	8002280 <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	f040 80e0 	bne.w	8003574 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2319      	movs	r3, #25
 80033ba:	2201      	movs	r2, #1
 80033bc:	4970      	ldr	r1, [pc, #448]	@ (8003580 <HAL_I2C_Master_Transmit+0x1f4>)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f964 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0d3      	b.n	8003576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_I2C_Master_Transmit+0x50>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0cc      	b.n	8003576 <HAL_I2C_Master_Transmit+0x1ea>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d007      	beq.n	8003402 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2221      	movs	r2, #33	@ 0x21
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2210      	movs	r2, #16
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	893a      	ldrh	r2, [r7, #8]
 8003432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a50      	ldr	r2, [pc, #320]	@ (8003584 <HAL_I2C_Master_Transmit+0x1f8>)
 8003442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003444:	8979      	ldrh	r1, [r7, #10]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f89c 	bl	8003588 <I2C_MasterRequestWrite>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e08d      	b.n	8003576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003470:	e066      	b.n	8003540 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	6a39      	ldr	r1, [r7, #32]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa22 	bl	80038c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06b      	b.n	8003576 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_I2C_Master_Transmit+0x188>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d017      	beq.n	8003514 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	6a39      	ldr	r1, [r7, #32]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fa19 	bl	8003950 <I2C_WaitOnBTFFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	2b04      	cmp	r3, #4
 800352a:	d107      	bne.n	800353c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e01a      	b.n	8003576 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d194      	bne.n	8003472 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	00100002 	.word	0x00100002
 8003584:	ffff0000 	.word	0xffff0000

08003588 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	460b      	mov	r3, r1
 8003596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d006      	beq.n	80035b2 <I2C_MasterRequestWrite+0x2a>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d003      	beq.n	80035b2 <I2C_MasterRequestWrite+0x2a>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b0:	d108      	bne.n	80035c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e00b      	b.n	80035dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d107      	bne.n	80035dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f84f 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	d103      	bne.n	800360c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e035      	b.n	800367c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003618:	d108      	bne.n	800362c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	e01b      	b.n	8003664 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	11db      	asrs	r3, r3, #7
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0306 	and.w	r3, r3, #6
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f063 030f 	orn	r3, r3, #15
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	490e      	ldr	r1, [pc, #56]	@ (8003684 <I2C_MasterRequestWrite+0xfc>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f898 	bl	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e010      	b.n	800367c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800365a:	897b      	ldrh	r3, [r7, #10]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4907      	ldr	r1, [pc, #28]	@ (8003688 <I2C_MasterRequestWrite+0x100>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f888 	bl	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010008 	.word	0x00010008
 8003688:	00010002 	.word	0x00010002

0800368c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369c:	e048      	b.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d044      	beq.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe fdeb 	bl	8002280 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d139      	bne.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10d      	bne.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	43da      	mvns	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	e00c      	b.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	43da      	mvns	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d116      	bne.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e023      	b.n	8003778 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10d      	bne.n	8003756 <I2C_WaitOnFlagUntilTimeout+0xca>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	43da      	mvns	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	e00c      	b.n	8003770 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	43da      	mvns	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	429a      	cmp	r2, r3
 8003774:	d093      	beq.n	800369e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800378e:	e071      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379e:	d123      	bne.n	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e067      	b.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d041      	beq.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fe fd46 	bl	8002280 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d136      	bne.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10c      	bne.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	43da      	mvns	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	2300      	moveq	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	e00b      	b.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	43da      	mvns	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e021      	b.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10c      	bne.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	43da      	mvns	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e00b      	b.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f af6d 	bne.w	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038cc:	e034      	b.n	8003938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f886 	bl	80039e0 <I2C_IsAcknowledgeFailed>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e034      	b.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d028      	beq.n	8003938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fccb 	bl	8002280 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11d      	bne.n	8003938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	2b80      	cmp	r3, #128	@ 0x80
 8003908:	d016      	beq.n	8003938 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b80      	cmp	r3, #128	@ 0x80
 8003944:	d1c3      	bne.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800395c:	e034      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f83e 	bl	80039e0 <I2C_IsAcknowledgeFailed>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e034      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d028      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fe fc83 	bl	8002280 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11d      	bne.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d016      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d1c3      	bne.n	800395e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f6:	d11b      	bne.n	8003a30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0cc      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b68      	ldr	r3, [pc, #416]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d90c      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b63      	ldr	r3, [pc, #396]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a58      	ldr	r2, [pc, #352]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d044      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b47      	ldr	r3, [pc, #284]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d119      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e067      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b37      	ldr	r3, [pc, #220]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4934      	ldr	r1, [pc, #208]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b30:	f7fe fba6 	bl	8002280 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fe fba2 	bl	8002280 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e04f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d20c      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b22      	ldr	r3, [pc, #136]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f887 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490a      	ldr	r1, [pc, #40]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	4a09      	ldr	r2, [pc, #36]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe f952 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023c00 	.word	0x40023c00
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800c0e4 	.word	0x0800c0e4
 8003c04:	20000004 	.word	0x20000004
 8003c08:	20000008 	.word	0x20000008

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c28:	f7ff fff0 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0a9b      	lsrs	r3, r3, #10
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	0800c0f4 	.word	0x0800c0f4

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c50:	f7ff ffdc 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0b5b      	lsrs	r3, r3, #13
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	0800c0f4 	.word	0x0800c0f4

08003c74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	220f      	movs	r2, #15
 8003c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c84:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0203 	and.w	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c90:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cb6:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_RCC_GetClockConfig+0x60>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40023c00 	.word	0x40023c00

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b0ae      	sub	sp, #184	@ 0xb8
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfe:	4bcb      	ldr	r3, [pc, #812]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	f200 8206 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x440>
 8003d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08004119 	.word	0x08004119
 8003d1c:	08004119 	.word	0x08004119
 8003d20:	08004119 	.word	0x08004119
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08004119 	.word	0x08004119
 8003d2c:	08004119 	.word	0x08004119
 8003d30:	08004119 	.word	0x08004119
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08004119 	.word	0x08004119
 8003d3c:	08004119 	.word	0x08004119
 8003d40:	08004119 	.word	0x08004119
 8003d44:	08003f49 	.word	0x08003f49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4bb9      	ldr	r3, [pc, #740]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003d4e:	e1e7      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d50:	4bb8      	ldr	r3, [pc, #736]	@ (8004034 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d56:	e1e3      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4bb4      	ldr	r3, [pc, #720]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d64:	4bb1      	ldr	r3, [pc, #708]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d071      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4bae      	ldr	r3, [pc, #696]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d7c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da8:	0150      	lsls	r0, r2, #5
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4621      	mov	r1, r4
 8003db0:	1a51      	subs	r1, r2, r1
 8003db2:	6439      	str	r1, [r7, #64]	@ 0x40
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003dc8:	4649      	mov	r1, r9
 8003dca:	018b      	lsls	r3, r1, #6
 8003dcc:	4641      	mov	r1, r8
 8003dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	018a      	lsls	r2, r1, #6
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1a51      	subs	r1, r2, r1
 8003dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ddc:	4649      	mov	r1, r9
 8003dde:	eb63 0301 	sbc.w	r3, r3, r1
 8003de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003df0:	4649      	mov	r1, r9
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4641      	mov	r1, r8
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4622      	mov	r2, r4
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e20:	4629      	mov	r1, r5
 8003e22:	024b      	lsls	r3, r1, #9
 8003e24:	4621      	mov	r1, r4
 8003e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	024a      	lsls	r2, r1, #9
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e44:	f7fc fed0 	bl	8000be8 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e52:	e067      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e54:	4b75      	ldr	r3, [pc, #468]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	099b      	lsrs	r3, r3, #6
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e60:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e6e:	2300      	movs	r3, #0
 8003e70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f04f 0000 	mov.w	r0, #0
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	0159      	lsls	r1, r3, #5
 8003e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e88:	0150      	lsls	r0, r2, #5
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4621      	mov	r1, r4
 8003e90:	1a51      	subs	r1, r2, r1
 8003e92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e94:	4629      	mov	r1, r5
 8003e96:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	018b      	lsls	r3, r1, #6
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	018a      	lsls	r2, r1, #6
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ece:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed6:	4692      	mov	sl, r2
 8003ed8:	469b      	mov	fp, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	028b      	lsls	r3, r1, #10
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f00:	4621      	mov	r1, r4
 8003f02:	028a      	lsls	r2, r1, #10
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f10:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f16:	f7fc fe67 	bl	8000be8 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f46:	e0eb      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f48:	4b38      	ldr	r3, [pc, #224]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f54:	4b35      	ldr	r3, [pc, #212]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d06b      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f60:	4b32      	ldr	r3, [pc, #200]	@ (800402c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	2200      	movs	r2, #0
 8003f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f74:	2300      	movs	r3, #0
 8003f76:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	0159      	lsls	r1, r3, #5
 8003f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8e:	0150      	lsls	r0, r2, #5
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4621      	mov	r1, r4
 8003f96:	1a51      	subs	r1, r2, r1
 8003f98:	61b9      	str	r1, [r7, #24]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fae:	4659      	mov	r1, fp
 8003fb0:	018b      	lsls	r3, r1, #6
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb8:	4651      	mov	r1, sl
 8003fba:	018a      	lsls	r2, r1, #6
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	ebb2 0801 	subs.w	r8, r2, r1
 8003fc2:	4659      	mov	r1, fp
 8003fc4:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fdc:	4690      	mov	r8, r2
 8003fde:	4699      	mov	r9, r3
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	eb18 0303 	adds.w	r3, r8, r3
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	462b      	mov	r3, r5
 8003fea:	eb49 0303 	adc.w	r3, r9, r3
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	024b      	lsls	r3, r1, #9
 8004000:	4621      	mov	r1, r4
 8004002:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004006:	4621      	mov	r1, r4
 8004008:	024a      	lsls	r2, r1, #9
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004012:	2200      	movs	r2, #0
 8004014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004016:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004018:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800401c:	f7fc fde4 	bl	8000be8 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800402a:	e065      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x420>
 800402c:	40023800 	.word	0x40023800
 8004030:	00f42400 	.word	0x00f42400
 8004034:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4b3d      	ldr	r3, [pc, #244]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x458>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	2200      	movs	r2, #0
 8004040:	4618      	mov	r0, r3
 8004042:	4611      	mov	r1, r2
 8004044:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004048:	653b      	str	r3, [r7, #80]	@ 0x50
 800404a:	2300      	movs	r3, #0
 800404c:	657b      	str	r3, [r7, #84]	@ 0x54
 800404e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004052:	4642      	mov	r2, r8
 8004054:	464b      	mov	r3, r9
 8004056:	f04f 0000 	mov.w	r0, #0
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	0159      	lsls	r1, r3, #5
 8004060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004064:	0150      	lsls	r0, r2, #5
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4641      	mov	r1, r8
 800406c:	1a51      	subs	r1, r2, r1
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	4649      	mov	r1, r9
 8004072:	eb63 0301 	sbc.w	r3, r3, r1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004084:	4659      	mov	r1, fp
 8004086:	018b      	lsls	r3, r1, #6
 8004088:	4651      	mov	r1, sl
 800408a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800408e:	4651      	mov	r1, sl
 8004090:	018a      	lsls	r2, r1, #6
 8004092:	4651      	mov	r1, sl
 8004094:	1a54      	subs	r4, r2, r1
 8004096:	4659      	mov	r1, fp
 8004098:	eb63 0501 	sbc.w	r5, r3, r1
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040e0:	2200      	movs	r2, #0
 80040e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040ea:	f7fc fd7d 	bl	8000be8 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4613      	mov	r3, r2
 80040f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x458>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0f1b      	lsrs	r3, r3, #28
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800410a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004116:	e003      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x45c>)
 800411a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800411e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004124:	4618      	mov	r0, r3
 8004126:	37b8      	adds	r7, #184	@ 0xb8
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400

08004138 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e28d      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8083 	beq.w	800425e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004158:	4b94      	ldr	r3, [pc, #592]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	d019      	beq.n	8004198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004164:	4b91      	ldr	r3, [pc, #580]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800416c:	2b08      	cmp	r3, #8
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004170:	4b8e      	ldr	r3, [pc, #568]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800417c:	d00c      	beq.n	8004198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b8b      	ldr	r3, [pc, #556]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d112      	bne.n	80041b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418a:	4b88      	ldr	r3, [pc, #544]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004196:	d10b      	bne.n	80041b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	4b84      	ldr	r3, [pc, #528]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d05b      	beq.n	800425c <HAL_RCC_OscConfig+0x124>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d157      	bne.n	800425c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e25a      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b8:	d106      	bne.n	80041c8 <HAL_RCC_OscConfig+0x90>
 80041ba:	4b7c      	ldr	r3, [pc, #496]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7b      	ldr	r2, [pc, #492]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e01d      	b.n	8004204 <HAL_RCC_OscConfig+0xcc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0xb4>
 80041d2:	4b76      	ldr	r3, [pc, #472]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a75      	ldr	r2, [pc, #468]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b73      	ldr	r3, [pc, #460]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a72      	ldr	r2, [pc, #456]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0xcc>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6e      	ldr	r2, [pc, #440]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	4b6c      	ldr	r3, [pc, #432]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6b      	ldr	r2, [pc, #428]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80041fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fe f838 	bl	8002280 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004214:	f7fe f834 	bl	8002280 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	@ 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e21f      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0xdc>
 8004232:	e014      	b.n	800425e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fe f824 	bl	8002280 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800423c:	f7fe f820 	bl	8002280 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	@ 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e20b      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	4b57      	ldr	r3, [pc, #348]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x104>
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06f      	beq.n	800434a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800426a:	4b50      	ldr	r3, [pc, #320]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004276:	4b4d      	ldr	r3, [pc, #308]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800427e:	2b08      	cmp	r3, #8
 8004280:	d105      	bne.n	800428e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004282:	4b4a      	ldr	r3, [pc, #296]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b47      	ldr	r3, [pc, #284]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b44      	ldr	r3, [pc, #272]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b41      	ldr	r3, [pc, #260]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x186>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1d3      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4937      	ldr	r1, [pc, #220]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b34      	ldr	r3, [pc, #208]	@ (80043b0 <HAL_RCC_OscConfig+0x278>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd ffcd 	bl	8002280 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fd ffc9 	bl	8002280 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1b4      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4925      	ldr	r1, [pc, #148]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b24      	ldr	r3, [pc, #144]	@ (80043b0 <HAL_RCC_OscConfig+0x278>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd ffac 	bl	8002280 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd ffa8 	bl	8002280 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e193      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d036      	beq.n	80043c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <HAL_RCC_OscConfig+0x27c>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd ff8c 	bl	8002280 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fd ff88 	bl	8002280 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e173      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HAL_RCC_OscConfig+0x274>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x234>
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438c:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <HAL_RCC_OscConfig+0x27c>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7fd ff75 	bl	8002280 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	e00e      	b.n	80043b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd ff71 	bl	8002280 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d907      	bls.n	80043b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e15c      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470000 	.word	0x42470000
 80043b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b8a      	ldr	r3, [pc, #552]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ea      	bne.n	800439a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b83      	ldr	r3, [pc, #524]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	4b7f      	ldr	r3, [pc, #508]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	4a7e      	ldr	r2, [pc, #504]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043f2:	4b7c      	ldr	r3, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b79      	ldr	r3, [pc, #484]	@ (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d118      	bne.n	8004440 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440e:	4b76      	ldr	r3, [pc, #472]	@ (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	@ (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fd ff31 	bl	8002280 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fd ff2d 	bl	8002280 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e118      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	4b6c      	ldr	r3, [pc, #432]	@ (80045e8 <HAL_RCC_OscConfig+0x4b0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x31e>
 8004448:	4b66      	ldr	r3, [pc, #408]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a65      	ldr	r2, [pc, #404]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0x358>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x340>
 800445e:	4b61      	ldr	r3, [pc, #388]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	4a60      	ldr	r2, [pc, #384]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	@ 0x70
 800446a:	4b5e      	ldr	r3, [pc, #376]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	4a5d      	ldr	r2, [pc, #372]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	@ 0x70
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x358>
 8004478:	4b5a      	ldr	r3, [pc, #360]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447c:	4a59      	ldr	r2, [pc, #356]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	@ 0x70
 8004484:	4b57      	ldr	r3, [pc, #348]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	4a56      	ldr	r2, [pc, #344]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd fef2 	bl	8002280 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd feee 	bl	8002280 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0d7      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	4b4b      	ldr	r3, [pc, #300]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ee      	beq.n	80044a0 <HAL_RCC_OscConfig+0x368>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fedc 	bl	8002280 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd fed8 	bl	8002280 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0c1      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	4b40      	ldr	r3, [pc, #256]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b3b      	ldr	r3, [pc, #236]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	4a3a      	ldr	r2, [pc, #232]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80ad 	beq.w	8004664 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d060      	beq.n	80045d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d145      	bne.n	80045aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b33      	ldr	r3, [pc, #204]	@ (80045ec <HAL_RCC_OscConfig+0x4b4>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd feac 	bl	8002280 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd fea8 	bl	8002280 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e093      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b29      	ldr	r3, [pc, #164]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	491b      	ldr	r1, [pc, #108]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_RCC_OscConfig+0x4b4>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fe7d 	bl	8002280 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd fe79 	bl	8002280 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e064      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x452>
 80045a8:	e05c      	b.n	8004664 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <HAL_RCC_OscConfig+0x4b4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fe66 	bl	8002280 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fe62 	bl	8002280 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04d      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x480>
 80045d6:	e045      	b.n	8004664 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e040      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004670 <HAL_RCC_OscConfig+0x538>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d030      	beq.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d129      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d122      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d119      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d10f      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e041      	b.n	800470a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fadc 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 ff68 	bl	8005588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e04e      	b.n	80047ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	@ (80047d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004756:	d01d      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1f      	ldr	r2, [pc, #124]	@ (80047dc <HAL_TIM_Base_Start_IT+0xc8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	@ (80047ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d010      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e007      	b.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40001800 	.word	0x40001800

080047f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f839 	bl	8004892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fea8 	bl	8005588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x24>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e022      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d109      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x3e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e015      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x58>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07c      	b.n	8004a14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0x82>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004928:	e013      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0x92>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004938:	e00b      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004948:	e003      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fa34 	bl	8005dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2d      	ldr	r2, [pc, #180]	@ (8004a1c <HAL_TIM_PWM_Start+0x174>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_PWM_Start+0xcc>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a20 <HAL_TIM_PWM_Start+0x178>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_TIM_PWM_Start+0xd0>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_TIM_PWM_Start+0xd2>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_TIM_PWM_Start+0x174>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a0:	d01d      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a24 <HAL_TIM_PWM_Start+0x17c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <HAL_TIM_PWM_Start+0x180>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <HAL_TIM_PWM_Start+0x184>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HAL_TIM_PWM_Start+0x178>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a18      	ldr	r2, [pc, #96]	@ (8004a30 <HAL_TIM_PWM_Start+0x188>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	@ (8004a34 <HAL_TIM_PWM_Start+0x18c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b06      	cmp	r3, #6
 80049ee:	d010      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a00:	e007      	b.n	8004a12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40001800 	.word	0x40001800

08004a38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e041      	b.n	8004ace <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f839 	bl	8004ad6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fd86 	bl	8005588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_IC_Start_IT+0x1e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e013      	b.n	8004b32 <HAL_TIM_IC_Start_IT+0x46>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_IC_Start_IT+0x2e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e00b      	b.n	8004b32 <HAL_TIM_IC_Start_IT+0x46>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_IC_Start_IT+0x3e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e003      	b.n	8004b32 <HAL_TIM_IC_Start_IT+0x46>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <HAL_TIM_IC_Start_IT+0x58>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e013      	b.n	8004b6c <HAL_TIM_IC_Start_IT+0x80>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d104      	bne.n	8004b54 <HAL_TIM_IC_Start_IT+0x68>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e00b      	b.n	8004b6c <HAL_TIM_IC_Start_IT+0x80>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d104      	bne.n	8004b64 <HAL_TIM_IC_Start_IT+0x78>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e003      	b.n	8004b6c <HAL_TIM_IC_Start_IT+0x80>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	7bbb      	ldrb	r3, [r7, #14]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d102      	bne.n	8004b7a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b74:	7b7b      	ldrb	r3, [r7, #13]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0cc      	b.n	8004d18 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_IC_Start_IT+0xa2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b8c:	e013      	b.n	8004bb6 <HAL_TIM_IC_Start_IT+0xca>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_IC_Start_IT+0xb2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9c:	e00b      	b.n	8004bb6 <HAL_TIM_IC_Start_IT+0xca>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_IC_Start_IT+0xc2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bac:	e003      	b.n	8004bb6 <HAL_TIM_IC_Start_IT+0xca>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_IC_Start_IT+0xda>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc4:	e013      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x102>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_IC_Start_IT+0xea>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x102>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_IC_Start_IT+0xfa>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be4:	e003      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x102>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d841      	bhi.n	8004c78 <HAL_TIM_IC_Start_IT+0x18c>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HAL_TIM_IC_Start_IT+0x110>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c79 	.word	0x08004c79
 8004c04:	08004c79 	.word	0x08004c79
 8004c08:	08004c79 	.word	0x08004c79
 8004c0c:	08004c43 	.word	0x08004c43
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004c79 	.word	0x08004c79
 8004c18:	08004c79 	.word	0x08004c79
 8004c1c:	08004c55 	.word	0x08004c55
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c79 	.word	0x08004c79
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004c67 	.word	0x08004c67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0202 	orr.w	r2, r2, #2
 8004c3e:	60da      	str	r2, [r3, #12]
      break;
 8004c40:	e01d      	b.n	8004c7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0204 	orr.w	r2, r2, #4
 8004c50:	60da      	str	r2, [r3, #12]
      break;
 8004c52:	e014      	b.n	8004c7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	60da      	str	r2, [r3, #12]
      break;
 8004c64:	e00b      	b.n	8004c7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0210 	orr.w	r2, r2, #16
 8004c74:	60da      	str	r2, [r3, #12]
      break;
 8004c76:	e002      	b.n	8004c7e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d148      	bne.n	8004d16 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 f89b 	bl	8005dc8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a22      	ldr	r2, [pc, #136]	@ (8004d20 <HAL_TIM_IC_Start_IT+0x234>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d022      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <HAL_TIM_IC_Start_IT+0x238>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d018      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <HAL_TIM_IC_Start_IT+0x23c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <HAL_TIM_IC_Start_IT+0x240>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a19      	ldr	r2, [pc, #100]	@ (8004d30 <HAL_TIM_IC_Start_IT+0x244>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <HAL_TIM_IC_Start_IT+0x248>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIM_IC_Start_IT+0x1f6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <HAL_TIM_IC_Start_IT+0x24c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d010      	beq.n	8004d16 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d04:	e007      	b.n	8004d16 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40010400 	.word	0x40010400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40001800 	.word	0x40001800

08004d3c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d841      	bhi.n	8004dd4 <HAL_TIM_IC_Stop_IT+0x98>
 8004d50:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <HAL_TIM_IC_Stop_IT+0x1c>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004dd5 	.word	0x08004dd5
 8004d60:	08004dd5 	.word	0x08004dd5
 8004d64:	08004dd5 	.word	0x08004dd5
 8004d68:	08004d9f 	.word	0x08004d9f
 8004d6c:	08004dd5 	.word	0x08004dd5
 8004d70:	08004dd5 	.word	0x08004dd5
 8004d74:	08004dd5 	.word	0x08004dd5
 8004d78:	08004db1 	.word	0x08004db1
 8004d7c:	08004dd5 	.word	0x08004dd5
 8004d80:	08004dd5 	.word	0x08004dd5
 8004d84:	08004dd5 	.word	0x08004dd5
 8004d88:	08004dc3 	.word	0x08004dc3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0202 	bic.w	r2, r2, #2
 8004d9a:	60da      	str	r2, [r3, #12]
      break;
 8004d9c:	e01d      	b.n	8004dda <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0204 	bic.w	r2, r2, #4
 8004dac:	60da      	str	r2, [r3, #12]
      break;
 8004dae:	e014      	b.n	8004dda <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0208 	bic.w	r2, r2, #8
 8004dbe:	60da      	str	r2, [r3, #12]
      break;
 8004dc0:	e00b      	b.n	8004dda <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0210 	bic.w	r2, r2, #16
 8004dd0:	60da      	str	r2, [r3, #12]
      break;
 8004dd2:	e002      	b.n	8004dda <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d156      	bne.n	8004e8e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2200      	movs	r2, #0
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 ffed 	bl	8005dc8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_TIM_IC_Stop_IT+0xe2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_TIM_IC_Stop_IT+0xe2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_IC_Stop_IT+0xf2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e2c:	e013      	b.n	8004e56 <HAL_TIM_IC_Stop_IT+0x11a>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_IC_Stop_IT+0x102>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e3c:	e00b      	b.n	8004e56 <HAL_TIM_IC_Stop_IT+0x11a>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_IC_Stop_IT+0x112>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e4c:	e003      	b.n	8004e56 <HAL_TIM_IC_Stop_IT+0x11a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_IC_Stop_IT+0x12a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e64:	e013      	b.n	8004e8e <HAL_TIM_IC_Stop_IT+0x152>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e74:	e00b      	b.n	8004e8e <HAL_TIM_IC_Stop_IT+0x152>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_IC_Stop_IT+0x14a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e84:	e003      	b.n	8004e8e <HAL_TIM_IC_Stop_IT+0x152>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0202 	mvn.w	r2, #2
 8004ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc fc76 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb2e 	bl	800554c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb35 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01b      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0204 	mvn.w	r2, #4
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc fc50 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb08 	bl	800554c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fb0f 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d020      	beq.n	8004f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01b      	beq.n	8004f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0208 	mvn.w	r2, #8
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2204      	movs	r2, #4
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc fc2a 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fae2 	bl	800554c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fae9 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d020      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01b      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0210 	mvn.w	r2, #16
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fc04 	bl	80017d4 <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fabc 	bl	800554c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fac3 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0201 	mvn.w	r2, #1
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc fd52 	bl	8001aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00c      	beq.n	8005028 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 ff7c 	bl	8005f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa94 	bl	8005574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00c      	beq.n	8005070 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0220 	mvn.w	r2, #32
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 ff4e 	bl	8005f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e088      	b.n	80051a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11b      	bne.n	80050dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80050b4:	f000 fcc4 	bl	8005a40 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020c 	bic.w	r2, r2, #12
 80050c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
 80050da:	e060      	b.n	800519e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d11c      	bne.n	800511c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80050f2:	f000 fd48 	bl	8005b86 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005104:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6999      	ldr	r1, [r3, #24]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	021a      	lsls	r2, r3, #8
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	619a      	str	r2, [r3, #24]
 800511a:	e040      	b.n	800519e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d11b      	bne.n	800515a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005132:	f000 fd95 	bl	8005c60 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 020c 	bic.w	r2, r2, #12
 8005144:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69d9      	ldr	r1, [r3, #28]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	61da      	str	r2, [r3, #28]
 8005158:	e021      	b.n	800519e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d11c      	bne.n	800519a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005170:	f000 fdb2 	bl	8005cd8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005182:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69d9      	ldr	r1, [r3, #28]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	021a      	lsls	r2, r3, #8
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
 8005198:	e001      	b.n	800519e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e0ae      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	f200 809f 	bhi.w	800531c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005219 	.word	0x08005219
 80051e8:	0800531d 	.word	0x0800531d
 80051ec:	0800531d 	.word	0x0800531d
 80051f0:	0800531d 	.word	0x0800531d
 80051f4:	08005259 	.word	0x08005259
 80051f8:	0800531d 	.word	0x0800531d
 80051fc:	0800531d 	.word	0x0800531d
 8005200:	0800531d 	.word	0x0800531d
 8005204:	0800529b 	.word	0x0800529b
 8005208:	0800531d 	.word	0x0800531d
 800520c:	0800531d 	.word	0x0800531d
 8005210:	0800531d 	.word	0x0800531d
 8005214:	080052db 	.word	0x080052db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fa5e 	bl	80056e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	619a      	str	r2, [r3, #24]
      break;
 8005256:	e064      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 faae 	bl	80057c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]
      break;
 8005298:	e043      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fb03 	bl	80058ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0208 	orr.w	r2, r2, #8
 80052b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0204 	bic.w	r2, r2, #4
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69d9      	ldr	r1, [r3, #28]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
      break;
 80052d8:	e023      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fb57 	bl	8005994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69d9      	ldr	r1, [r3, #28]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	021a      	lsls	r2, r3, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	61da      	str	r2, [r3, #28]
      break;
 800531a:	e002      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIM_ConfigClockSource+0x1c>
 800534c:	2302      	movs	r3, #2
 800534e:	e0b4      	b.n	80054ba <HAL_TIM_ConfigClockSource+0x186>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800536e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d03e      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0xd4>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	f200 8087 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005396:	f000 8086 	beq.w	80054a6 <HAL_TIM_ConfigClockSource+0x172>
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539e:	d87f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b70      	cmp	r3, #112	@ 0x70
 80053a2:	d01a      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
 80053a4:	2b70      	cmp	r3, #112	@ 0x70
 80053a6:	d87b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b60      	cmp	r3, #96	@ 0x60
 80053aa:	d050      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x11a>
 80053ac:	2b60      	cmp	r3, #96	@ 0x60
 80053ae:	d877      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b50      	cmp	r3, #80	@ 0x50
 80053b2:	d03c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0xfa>
 80053b4:	2b50      	cmp	r3, #80	@ 0x50
 80053b6:	d873      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d058      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x13a>
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d86f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b30      	cmp	r3, #48	@ 0x30
 80053c2:	d064      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d86b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d060      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d867      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d05a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	e062      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	f000 fccd 	bl	8005d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
      break;
 8005406:	e04f      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	f000 fcb6 	bl	8005d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e03c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	461a      	mov	r2, r3
 800543c:	f000 fb74 	bl	8005b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2150      	movs	r1, #80	@ 0x50
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fc83 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800544c:	e02c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fbd0 	bl	8005c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2160      	movs	r1, #96	@ 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fc73 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800546c:	e01c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fb54 	bl	8005b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2140      	movs	r1, #64	@ 0x40
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fc63 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 fc5a 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800549e:	e003      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d831      	bhi.n	800553c <HAL_TIM_ReadCapturedValue+0x78>
 80054d8:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005515 	.word	0x08005515
 80054e4:	0800553d 	.word	0x0800553d
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	0800553d 	.word	0x0800553d
 80054f0:	0800551f 	.word	0x0800551f
 80054f4:	0800553d 	.word	0x0800553d
 80054f8:	0800553d 	.word	0x0800553d
 80054fc:	0800553d 	.word	0x0800553d
 8005500:	08005529 	.word	0x08005529
 8005504:	0800553d 	.word	0x0800553d
 8005508:	0800553d 	.word	0x0800553d
 800550c:	0800553d 	.word	0x0800553d
 8005510:	08005533 	.word	0x08005533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551a:	60fb      	str	r3, [r7, #12]

      break;
 800551c:	e00f      	b.n	800553e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	60fb      	str	r3, [r7, #12]

      break;
 8005526:	e00a      	b.n	800553e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	60fb      	str	r3, [r7, #12]

      break;
 8005530:	e005      	b.n	800553e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	60fb      	str	r3, [r7, #12]

      break;
 800553a:	e000      	b.n	800553e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800553c:	bf00      	nop
  }

  return tmpreg;
 800553e:	68fb      	ldr	r3, [r7, #12]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a46      	ldr	r2, [pc, #280]	@ (80056b4 <TIM_Base_SetConfig+0x12c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a6:	d00f      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a43      	ldr	r2, [pc, #268]	@ (80056b8 <TIM_Base_SetConfig+0x130>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a42      	ldr	r2, [pc, #264]	@ (80056bc <TIM_Base_SetConfig+0x134>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a41      	ldr	r2, [pc, #260]	@ (80056c0 <TIM_Base_SetConfig+0x138>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a40      	ldr	r2, [pc, #256]	@ (80056c4 <TIM_Base_SetConfig+0x13c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a35      	ldr	r2, [pc, #212]	@ (80056b4 <TIM_Base_SetConfig+0x12c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e8:	d027      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a32      	ldr	r2, [pc, #200]	@ (80056b8 <TIM_Base_SetConfig+0x130>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d023      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a31      	ldr	r2, [pc, #196]	@ (80056bc <TIM_Base_SetConfig+0x134>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01f      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a30      	ldr	r2, [pc, #192]	@ (80056c0 <TIM_Base_SetConfig+0x138>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2f      	ldr	r2, [pc, #188]	@ (80056c4 <TIM_Base_SetConfig+0x13c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d017      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2e      	ldr	r2, [pc, #184]	@ (80056c8 <TIM_Base_SetConfig+0x140>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2d      	ldr	r2, [pc, #180]	@ (80056cc <TIM_Base_SetConfig+0x144>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2c      	ldr	r2, [pc, #176]	@ (80056d0 <TIM_Base_SetConfig+0x148>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2b      	ldr	r2, [pc, #172]	@ (80056d4 <TIM_Base_SetConfig+0x14c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2a      	ldr	r2, [pc, #168]	@ (80056d8 <TIM_Base_SetConfig+0x150>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a29      	ldr	r2, [pc, #164]	@ (80056dc <TIM_Base_SetConfig+0x154>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a10      	ldr	r2, [pc, #64]	@ (80056b4 <TIM_Base_SetConfig+0x12c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0xf8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a12      	ldr	r2, [pc, #72]	@ (80056c4 <TIM_Base_SetConfig+0x13c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d103      	bne.n	8005688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d105      	bne.n	80056a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	611a      	str	r2, [r3, #16]
  }
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800
 80056d4:	40001800 	.word	0x40001800
 80056d8:	40001c00 	.word	0x40001c00
 80056dc:	40002000 	.word	0x40002000

080056e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f023 0201 	bic.w	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0302 	bic.w	r3, r3, #2
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a20      	ldr	r2, [pc, #128]	@ (80057b8 <TIM_OC1_SetConfig+0xd8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC1_SetConfig+0x64>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1f      	ldr	r2, [pc, #124]	@ (80057bc <TIM_OC1_SetConfig+0xdc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10c      	bne.n	800575e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0308 	bic.w	r3, r3, #8
 800574a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 0304 	bic.w	r3, r3, #4
 800575c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a15      	ldr	r2, [pc, #84]	@ (80057b8 <TIM_OC1_SetConfig+0xd8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC1_SetConfig+0x8e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a14      	ldr	r2, [pc, #80]	@ (80057bc <TIM_OC1_SetConfig+0xdc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d111      	bne.n	8005792 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f023 0210 	bic.w	r2, r3, #16
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a22      	ldr	r2, [pc, #136]	@ (80058a4 <TIM_OC2_SetConfig+0xe4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_OC2_SetConfig+0x68>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a21      	ldr	r2, [pc, #132]	@ (80058a8 <TIM_OC2_SetConfig+0xe8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d10d      	bne.n	8005844 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800582e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a17      	ldr	r2, [pc, #92]	@ (80058a4 <TIM_OC2_SetConfig+0xe4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC2_SetConfig+0x94>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <TIM_OC2_SetConfig+0xe8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d113      	bne.n	800587c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800585a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400

080058ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a21      	ldr	r2, [pc, #132]	@ (800598c <TIM_OC3_SetConfig+0xe0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0x66>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a20      	ldr	r2, [pc, #128]	@ (8005990 <TIM_OC3_SetConfig+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10d      	bne.n	800592e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800592c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a16      	ldr	r2, [pc, #88]	@ (800598c <TIM_OC3_SetConfig+0xe0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_OC3_SetConfig+0x92>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a15      	ldr	r2, [pc, #84]	@ (8005990 <TIM_OC3_SetConfig+0xe4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d113      	bne.n	8005966 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	621a      	str	r2, [r3, #32]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400

08005994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <TIM_OC4_SetConfig+0xa4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC4_SetConfig+0x68>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <TIM_OC4_SetConfig+0xa8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f023 0201 	bic.w	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a28      	ldr	r2, [pc, #160]	@ (8005b0c <TIM_TI1_SetConfig+0xcc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01b      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a74:	d017      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a25      	ldr	r2, [pc, #148]	@ (8005b10 <TIM_TI1_SetConfig+0xd0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a24      	ldr	r2, [pc, #144]	@ (8005b14 <TIM_TI1_SetConfig+0xd4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a23      	ldr	r2, [pc, #140]	@ (8005b18 <TIM_TI1_SetConfig+0xd8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a22      	ldr	r2, [pc, #136]	@ (8005b1c <TIM_TI1_SetConfig+0xdc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d007      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a21      	ldr	r2, [pc, #132]	@ (8005b20 <TIM_TI1_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_TI1_SetConfig+0x66>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	@ (8005b24 <TIM_TI1_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <TIM_TI1_SetConfig+0x6a>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <TIM_TI1_SetConfig+0x6c>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e003      	b.n	8005aca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f003 030a 	and.w	r3, r3, #10
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40010400 	.word	0x40010400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40001800 	.word	0x40001800

08005b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 030a 	bic.w	r3, r3, #10
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b087      	sub	sp, #28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f023 0210 	bic.w	r2, r3, #16
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	621a      	str	r2, [r3, #32]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	031b      	lsls	r3, r3, #12
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	621a      	str	r2, [r3, #32]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f023 0303 	bic.w	r3, r3, #3
 8005c8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	031b      	lsls	r3, r3, #12
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	031b      	lsls	r3, r3, #12
 8005d30:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f043 0307 	orr.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2201      	movs	r2, #1
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1a      	ldr	r2, [r3, #32]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	401a      	ands	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e05a      	b.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1a      	ldr	r2, [pc, #104]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e042      	b.n	8005fcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fb ff50 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	@ 0x24
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f973 	bl	8006264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	@ 0x28
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d175      	bne.n	80060e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_UART_Transmit+0x2c>
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e06e      	b.n	80060e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2221      	movs	r2, #33	@ 0x21
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006012:	f7fc f935 	bl	8002280 <HAL_GetTick>
 8006016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602c:	d108      	bne.n	8006040 <HAL_UART_Transmit+0x6c>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e003      	b.n	8006048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006048:	e02e      	b.n	80060a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2200      	movs	r2, #0
 8006052:	2180      	movs	r1, #128	@ 0x80
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f848 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e03a      	b.n	80060e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	3302      	adds	r3, #2
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e007      	b.n	800609a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1cb      	bne.n	800604a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2140      	movs	r1, #64	@ 0x40
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f814 	bl	80060ea <UART_WaitOnFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e006      	b.n	80060e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fa:	e03b      	b.n	8006174 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d037      	beq.n	8006174 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006104:	f7fc f8bc 	bl	8002280 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	6a3a      	ldr	r2, [r7, #32]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <UART_WaitOnFlagUntilTimeout+0x30>
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e03a      	b.n	8006194 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d023      	beq.n	8006174 <UART_WaitOnFlagUntilTimeout+0x8a>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b80      	cmp	r3, #128	@ 0x80
 8006130:	d020      	beq.n	8006174 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d01d      	beq.n	8006174 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b08      	cmp	r3, #8
 8006144:	d116      	bne.n	8006174 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f81d 	bl	800619c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2208      	movs	r2, #8
 8006166:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e00f      	b.n	8006194 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4013      	ands	r3, r2
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	429a      	cmp	r2, r3
 8006190:	d0b4      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b095      	sub	sp, #84	@ 0x54
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80061c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	2b01      	cmp	r3, #1
 8006212:	d119      	bne.n	8006248 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	60bb      	str	r3, [r7, #8]
   return(result);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	647b      	str	r3, [r7, #68]	@ 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006234:	61ba      	str	r2, [r7, #24]
 8006236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	613b      	str	r3, [r7, #16]
   return(result);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006256:	bf00      	nop
 8006258:	3754      	adds	r7, #84	@ 0x54
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006268:	b0c0      	sub	sp, #256	@ 0x100
 800626a:	af00      	add	r7, sp, #0
 800626c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	68d9      	ldr	r1, [r3, #12]
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	ea40 0301 	orr.w	r3, r0, r1
 800628c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	431a      	orrs	r2, r3
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80062bc:	f021 010c 	bic.w	r1, r1, #12
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062ca:	430b      	orrs	r3, r1
 80062cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062de:	6999      	ldr	r1, [r3, #24]
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	ea40 0301 	orr.w	r3, r0, r1
 80062ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b8f      	ldr	r3, [pc, #572]	@ (8006530 <UART_SetConfig+0x2cc>)
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d005      	beq.n	8006304 <UART_SetConfig+0xa0>
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006534 <UART_SetConfig+0x2d0>)
 8006300:	429a      	cmp	r2, r3
 8006302:	d104      	bne.n	800630e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006304:	f7fd fca2 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8006308:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800630c:	e003      	b.n	8006316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fd fc89 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8006312:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006320:	f040 810c 	bne.w	800653c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800632e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	1891      	adds	r1, r2, r2
 800633c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800633e:	415b      	adcs	r3, r3
 8006340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006346:	4621      	mov	r1, r4
 8006348:	eb12 0801 	adds.w	r8, r2, r1
 800634c:	4629      	mov	r1, r5
 800634e:	eb43 0901 	adc.w	r9, r3, r1
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800635e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006366:	4690      	mov	r8, r2
 8006368:	4699      	mov	r9, r3
 800636a:	4623      	mov	r3, r4
 800636c:	eb18 0303 	adds.w	r3, r8, r3
 8006370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006374:	462b      	mov	r3, r5
 8006376:	eb49 0303 	adc.w	r3, r9, r3
 800637a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800638a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800638e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006392:	460b      	mov	r3, r1
 8006394:	18db      	adds	r3, r3, r3
 8006396:	653b      	str	r3, [r7, #80]	@ 0x50
 8006398:	4613      	mov	r3, r2
 800639a:	eb42 0303 	adc.w	r3, r2, r3
 800639e:	657b      	str	r3, [r7, #84]	@ 0x54
 80063a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063a8:	f7fa fc1e 	bl	8000be8 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4b61      	ldr	r3, [pc, #388]	@ (8006538 <UART_SetConfig+0x2d4>)
 80063b2:	fba3 2302 	umull	r2, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	011c      	lsls	r4, r3, #4
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	1891      	adds	r1, r2, r2
 80063d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063d4:	415b      	adcs	r3, r3
 80063d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063dc:	4641      	mov	r1, r8
 80063de:	eb12 0a01 	adds.w	sl, r2, r1
 80063e2:	4649      	mov	r1, r9
 80063e4:	eb43 0b01 	adc.w	fp, r3, r1
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063fc:	4692      	mov	sl, r2
 80063fe:	469b      	mov	fp, r3
 8006400:	4643      	mov	r3, r8
 8006402:	eb1a 0303 	adds.w	r3, sl, r3
 8006406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800640a:	464b      	mov	r3, r9
 800640c:	eb4b 0303 	adc.w	r3, fp, r3
 8006410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006420:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006428:	460b      	mov	r3, r1
 800642a:	18db      	adds	r3, r3, r3
 800642c:	643b      	str	r3, [r7, #64]	@ 0x40
 800642e:	4613      	mov	r3, r2
 8006430:	eb42 0303 	adc.w	r3, r2, r3
 8006434:	647b      	str	r3, [r7, #68]	@ 0x44
 8006436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800643a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800643e:	f7fa fbd3 	bl	8000be8 <__aeabi_uldivmod>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4611      	mov	r1, r2
 8006448:	4b3b      	ldr	r3, [pc, #236]	@ (8006538 <UART_SetConfig+0x2d4>)
 800644a:	fba3 2301 	umull	r2, r3, r3, r1
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2264      	movs	r2, #100	@ 0x64
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	1acb      	subs	r3, r1, r3
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800645e:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <UART_SetConfig+0x2d4>)
 8006460:	fba3 2302 	umull	r2, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800646c:	441c      	add	r4, r3
 800646e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006472:	2200      	movs	r2, #0
 8006474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800647c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	1891      	adds	r1, r2, r2
 8006486:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006488:	415b      	adcs	r3, r3
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800648c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006490:	4641      	mov	r1, r8
 8006492:	1851      	adds	r1, r2, r1
 8006494:	6339      	str	r1, [r7, #48]	@ 0x30
 8006496:	4649      	mov	r1, r9
 8006498:	414b      	adcs	r3, r1
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064a8:	4659      	mov	r1, fp
 80064aa:	00cb      	lsls	r3, r1, #3
 80064ac:	4651      	mov	r1, sl
 80064ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b2:	4651      	mov	r1, sl
 80064b4:	00ca      	lsls	r2, r1, #3
 80064b6:	4610      	mov	r0, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	4642      	mov	r2, r8
 80064be:	189b      	adds	r3, r3, r2
 80064c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064c4:	464b      	mov	r3, r9
 80064c6:	460a      	mov	r2, r1
 80064c8:	eb42 0303 	adc.w	r3, r2, r3
 80064cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064e4:	460b      	mov	r3, r1
 80064e6:	18db      	adds	r3, r3, r3
 80064e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ea:	4613      	mov	r3, r2
 80064ec:	eb42 0303 	adc.w	r3, r2, r3
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064fa:	f7fa fb75 	bl	8000be8 <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <UART_SetConfig+0x2d4>)
 8006504:	fba3 1302 	umull	r1, r3, r3, r2
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	2164      	movs	r1, #100	@ 0x64
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	3332      	adds	r3, #50	@ 0x32
 8006516:	4a08      	ldr	r2, [pc, #32]	@ (8006538 <UART_SetConfig+0x2d4>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f003 0207 	and.w	r2, r3, #7
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4422      	add	r2, r4
 800652a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800652c:	e106      	b.n	800673c <UART_SetConfig+0x4d8>
 800652e:	bf00      	nop
 8006530:	40011000 	.word	0x40011000
 8006534:	40011400 	.word	0x40011400
 8006538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006546:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800654a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800654e:	4642      	mov	r2, r8
 8006550:	464b      	mov	r3, r9
 8006552:	1891      	adds	r1, r2, r2
 8006554:	6239      	str	r1, [r7, #32]
 8006556:	415b      	adcs	r3, r3
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
 800655a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655e:	4641      	mov	r1, r8
 8006560:	1854      	adds	r4, r2, r1
 8006562:	4649      	mov	r1, r9
 8006564:	eb43 0501 	adc.w	r5, r3, r1
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	00eb      	lsls	r3, r5, #3
 8006572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006576:	00e2      	lsls	r2, r4, #3
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	4643      	mov	r3, r8
 800657e:	18e3      	adds	r3, r4, r3
 8006580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006584:	464b      	mov	r3, r9
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800659a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065aa:	4629      	mov	r1, r5
 80065ac:	008b      	lsls	r3, r1, #2
 80065ae:	4621      	mov	r1, r4
 80065b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b4:	4621      	mov	r1, r4
 80065b6:	008a      	lsls	r2, r1, #2
 80065b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80065bc:	f7fa fb14 	bl	8000be8 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4b60      	ldr	r3, [pc, #384]	@ (8006748 <UART_SetConfig+0x4e4>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	011c      	lsls	r4, r3, #4
 80065ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	1891      	adds	r1, r2, r2
 80065e6:	61b9      	str	r1, [r7, #24]
 80065e8:	415b      	adcs	r3, r3
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f0:	4641      	mov	r1, r8
 80065f2:	1851      	adds	r1, r2, r1
 80065f4:	6139      	str	r1, [r7, #16]
 80065f6:	4649      	mov	r1, r9
 80065f8:	414b      	adcs	r3, r1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006608:	4659      	mov	r1, fp
 800660a:	00cb      	lsls	r3, r1, #3
 800660c:	4651      	mov	r1, sl
 800660e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006612:	4651      	mov	r1, sl
 8006614:	00ca      	lsls	r2, r1, #3
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	4603      	mov	r3, r0
 800661c:	4642      	mov	r2, r8
 800661e:	189b      	adds	r3, r3, r2
 8006620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006624:	464b      	mov	r3, r9
 8006626:	460a      	mov	r2, r1
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800663a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006648:	4649      	mov	r1, r9
 800664a:	008b      	lsls	r3, r1, #2
 800664c:	4641      	mov	r1, r8
 800664e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006652:	4641      	mov	r1, r8
 8006654:	008a      	lsls	r2, r1, #2
 8006656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800665a:	f7fa fac5 	bl	8000be8 <__aeabi_uldivmod>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4611      	mov	r1, r2
 8006664:	4b38      	ldr	r3, [pc, #224]	@ (8006748 <UART_SetConfig+0x4e4>)
 8006666:	fba3 2301 	umull	r2, r3, r3, r1
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	2264      	movs	r2, #100	@ 0x64
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	1acb      	subs	r3, r1, r3
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	3332      	adds	r3, #50	@ 0x32
 8006678:	4a33      	ldr	r2, [pc, #204]	@ (8006748 <UART_SetConfig+0x4e4>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006684:	441c      	add	r4, r3
 8006686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668a:	2200      	movs	r2, #0
 800668c:	673b      	str	r3, [r7, #112]	@ 0x70
 800668e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006694:	4642      	mov	r2, r8
 8006696:	464b      	mov	r3, r9
 8006698:	1891      	adds	r1, r2, r2
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	415b      	adcs	r3, r3
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066a4:	4641      	mov	r1, r8
 80066a6:	1851      	adds	r1, r2, r1
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	4649      	mov	r1, r9
 80066ac:	414b      	adcs	r3, r1
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066bc:	4659      	mov	r1, fp
 80066be:	00cb      	lsls	r3, r1, #3
 80066c0:	4651      	mov	r1, sl
 80066c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c6:	4651      	mov	r1, sl
 80066c8:	00ca      	lsls	r2, r1, #3
 80066ca:	4610      	mov	r0, r2
 80066cc:	4619      	mov	r1, r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	4642      	mov	r2, r8
 80066d2:	189b      	adds	r3, r3, r2
 80066d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066d6:	464b      	mov	r3, r9
 80066d8:	460a      	mov	r2, r1
 80066da:	eb42 0303 	adc.w	r3, r2, r3
 80066de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066f8:	4649      	mov	r1, r9
 80066fa:	008b      	lsls	r3, r1, #2
 80066fc:	4641      	mov	r1, r8
 80066fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006702:	4641      	mov	r1, r8
 8006704:	008a      	lsls	r2, r1, #2
 8006706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800670a:	f7fa fa6d 	bl	8000be8 <__aeabi_uldivmod>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <UART_SetConfig+0x4e4>)
 8006714:	fba3 1302 	umull	r1, r3, r3, r2
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	2164      	movs	r1, #100	@ 0x64
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	3332      	adds	r3, #50	@ 0x32
 8006726:	4a08      	ldr	r2, [pc, #32]	@ (8006748 <UART_SetConfig+0x4e4>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	f003 020f 	and.w	r2, r3, #15
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4422      	add	r2, r4
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006742:	46bd      	mov	sp, r7
 8006744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006748:	51eb851f 	.word	0x51eb851f

0800674c <__NVIC_SetPriority>:
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675c:	2b00      	cmp	r3, #0
 800675e:	db0a      	blt.n	8006776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	490c      	ldr	r1, [pc, #48]	@ (8006798 <__NVIC_SetPriority+0x4c>)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	0112      	lsls	r2, r2, #4
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	440b      	add	r3, r1
 8006770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006774:	e00a      	b.n	800678c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4908      	ldr	r1, [pc, #32]	@ (800679c <__NVIC_SetPriority+0x50>)
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3b04      	subs	r3, #4
 8006784:	0112      	lsls	r2, r2, #4
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	440b      	add	r3, r1
 800678a:	761a      	strb	r2, [r3, #24]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	e000e100 	.word	0xe000e100
 800679c:	e000ed00 	.word	0xe000ed00

080067a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067a4:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <SysTick_Handler+0x1c>)
 80067a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80067a8:	f001 fd18 	bl	80081dc <xTaskGetSchedulerState>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d001      	beq.n	80067b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80067b2:	f002 fb11 	bl	8008dd8 <xPortSysTickHandler>
  }
}
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	e000e010 	.word	0xe000e010

080067c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80067c4:	2100      	movs	r1, #0
 80067c6:	f06f 0004 	mvn.w	r0, #4
 80067ca:	f7ff ffbf 	bl	800674c <__NVIC_SetPriority>
#endif
}
 80067ce:	bf00      	nop
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067da:	f3ef 8305 	mrs	r3, IPSR
 80067de:	603b      	str	r3, [r7, #0]
  return(result);
 80067e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067e6:	f06f 0305 	mvn.w	r3, #5
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	e00c      	b.n	8006808 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006818 <osKernelInitialize+0x44>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d105      	bne.n	8006802 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067f6:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <osKernelInitialize+0x44>)
 80067f8:	2201      	movs	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	e002      	b.n	8006808 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006802:	f04f 33ff 	mov.w	r3, #4294967295
 8006806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006808:	687b      	ldr	r3, [r7, #4]
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	200004cc 	.word	0x200004cc

0800681c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006822:	f3ef 8305 	mrs	r3, IPSR
 8006826:	603b      	str	r3, [r7, #0]
  return(result);
 8006828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <osKernelStart+0x1a>
    stat = osErrorISR;
 800682e:	f06f 0305 	mvn.w	r3, #5
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	e010      	b.n	8006858 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <osKernelStart+0x48>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d109      	bne.n	8006852 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800683e:	f7ff ffbf 	bl	80067c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006842:	4b08      	ldr	r3, [pc, #32]	@ (8006864 <osKernelStart+0x48>)
 8006844:	2202      	movs	r2, #2
 8006846:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006848:	f001 f87a 	bl	8007940 <vTaskStartScheduler>
      stat = osOK;
 800684c:	2300      	movs	r3, #0
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	e002      	b.n	8006858 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006858:	687b      	ldr	r3, [r7, #4]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200004cc 	.word	0x200004cc

08006868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b08e      	sub	sp, #56	@ 0x38
 800686c:	af04      	add	r7, sp, #16
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006878:	f3ef 8305 	mrs	r3, IPSR
 800687c:	617b      	str	r3, [r7, #20]
  return(result);
 800687e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006880:	2b00      	cmp	r3, #0
 8006882:	d17e      	bne.n	8006982 <osThreadNew+0x11a>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d07b      	beq.n	8006982 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800688a:	2380      	movs	r3, #128	@ 0x80
 800688c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800688e:	2318      	movs	r3, #24
 8006890:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d045      	beq.n	800692e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <osThreadNew+0x48>
        name = attr->name;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <osThreadNew+0x6e>
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b38      	cmp	r3, #56	@ 0x38
 80068c8:	d805      	bhi.n	80068d6 <osThreadNew+0x6e>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <osThreadNew+0x72>
        return (NULL);
 80068d6:	2300      	movs	r3, #0
 80068d8:	e054      	b.n	8006984 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00e      	beq.n	8006910 <osThreadNew+0xa8>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80068f8:	d90a      	bls.n	8006910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d006      	beq.n	8006910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <osThreadNew+0xa8>
        mem = 1;
 800690a:	2301      	movs	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e010      	b.n	8006932 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <osThreadNew+0xca>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d108      	bne.n	8006932 <osThreadNew+0xca>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <osThreadNew+0xca>
          mem = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	e001      	b.n	8006932 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d110      	bne.n	800695a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006940:	9202      	str	r2, [sp, #8]
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fe1a 	bl	8007588 <xTaskCreateStatic>
 8006954:	4603      	mov	r3, r0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e013      	b.n	8006982 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d110      	bne.n	8006982 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	b29a      	uxth	r2, r3
 8006964:	f107 0310 	add.w	r3, r7, #16
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fe68 	bl	8007648 <xTaskCreate>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d001      	beq.n	8006982 <osThreadNew+0x11a>
            hTask = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006982:	693b      	ldr	r3, [r7, #16]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3728      	adds	r7, #40	@ 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006994:	f3ef 8305 	mrs	r3, IPSR
 8006998:	60bb      	str	r3, [r7, #8]
  return(result);
 800699a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <osDelay+0x1c>
    stat = osErrorISR;
 80069a0:	f06f 0305 	mvn.w	r3, #5
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e007      	b.n	80069b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ff8e 	bl	80078d4 <vTaskDelay>
    }
  }

  return (stat);
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a07      	ldr	r2, [pc, #28]	@ (80069f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80069d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4a06      	ldr	r2, [pc, #24]	@ (80069f4 <vApplicationGetIdleTaskMemory+0x30>)
 80069da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2280      	movs	r2, #128	@ 0x80
 80069e0:	601a      	str	r2, [r3, #0]
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200004d0 	.word	0x200004d0
 80069f4:	2000052c 	.word	0x2000052c

080069f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a07      	ldr	r2, [pc, #28]	@ (8006a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4a06      	ldr	r2, [pc, #24]	@ (8006a28 <vApplicationGetTimerTaskMemory+0x30>)
 8006a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a16:	601a      	str	r2, [r3, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	2000072c 	.word	0x2000072c
 8006a28:	20000788 	.word	0x20000788

08006a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0208 	add.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f103 0208 	add.w	r2, r3, #8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f103 0208 	add.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d103      	bne.n	8006aee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e00c      	b.n	8006b08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3308      	adds	r3, #8
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e002      	b.n	8006afc <vListInsert+0x2e>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d2f6      	bcs.n	8006af6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6892      	ldr	r2, [r2, #8]
 8006b56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6852      	ldr	r2, [r2, #4]
 8006b60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d103      	bne.n	8006b74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bc0:	f002 f87a 	bl	8008cb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	22ff      	movs	r2, #255	@ 0xff
 8006c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	22ff      	movs	r2, #255	@ 0xff
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d114      	bne.n	8006c40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01a      	beq.n	8006c54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3310      	adds	r3, #16
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 f91a 	bl	8007e5c <xTaskRemoveFromEventList>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d012      	beq.n	8006c54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <xQueueGenericReset+0xd0>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	e009      	b.n	8006c54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3310      	adds	r3, #16
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fef1 	bl	8006a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3324      	adds	r3, #36	@ 0x24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff feec 	bl	8006a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c54:	f002 f862 	bl	8008d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c58:	2301      	movs	r3, #1
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08e      	sub	sp, #56	@ 0x38
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <xQueueGenericCreateStatic+0x56>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <xQueueGenericCreateStatic+0x5a>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <xQueueGenericCreateStatic+0x5c>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10b      	bne.n	8006ce0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	623b      	str	r3, [r7, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	e7fd      	b.n	8006cdc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <xQueueGenericCreateStatic+0x84>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <xQueueGenericCreateStatic+0x88>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <xQueueGenericCreateStatic+0x8a>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	61fb      	str	r3, [r7, #28]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d0e:	2350      	movs	r3, #80	@ 0x50
 8006d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b50      	cmp	r3, #80	@ 0x50
 8006d16:	d00b      	beq.n	8006d30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	61bb      	str	r3, [r7, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00d      	beq.n	8006d58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f805 	bl	8006d62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3730      	adds	r7, #48	@ 0x30
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d90:	2101      	movs	r1, #1
 8006d92:	69b8      	ldr	r0, [r7, #24]
 8006d94:	f7ff fefe 	bl	8006b94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08e      	sub	sp, #56	@ 0x38
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006db6:	2300      	movs	r3, #0
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <xQueueGenericSend+0x34>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x42>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <xQueueGenericSend+0x46>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <xQueueGenericSend+0x48>
 8006dee:	2300      	movs	r3, #0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <xQueueGenericSend+0x64>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d103      	bne.n	8006e1a <xQueueGenericSend+0x72>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <xQueueGenericSend+0x76>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueGenericSend+0x78>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <xQueueGenericSend+0x94>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	623b      	str	r3, [r7, #32]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e3c:	f001 f9ce 	bl	80081dc <xTaskGetSchedulerState>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d102      	bne.n	8006e4c <xQueueGenericSend+0xa4>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <xQueueGenericSend+0xa8>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <xQueueGenericSend+0xaa>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10b      	bne.n	8006e6e <xQueueGenericSend+0xc6>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	61fb      	str	r3, [r7, #28]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e6e:	f001 ff23 	bl	8008cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d302      	bcc.n	8006e84 <xQueueGenericSend+0xdc>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d129      	bne.n	8006ed8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e8a:	f000 fa0f 	bl	80072ac <prvCopyDataToQueue>
 8006e8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d010      	beq.n	8006eba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	3324      	adds	r3, #36	@ 0x24
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 ffdd 	bl	8007e5c <xTaskRemoveFromEventList>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d013      	beq.n	8006ed0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8006fa8 <xQueueGenericSend+0x200>)
 8006eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	e00a      	b.n	8006ed0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ec0:	4b39      	ldr	r3, [pc, #228]	@ (8006fa8 <xQueueGenericSend+0x200>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ed0:	f001 ff24 	bl	8008d1c <vPortExitCritical>
				return pdPASS;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e063      	b.n	8006fa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ede:	f001 ff1d 	bl	8008d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e05c      	b.n	8006fa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eec:	f107 0314 	add.w	r3, r7, #20
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 f817 	bl	8007f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006efa:	f001 ff0f 	bl	8008d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006efe:	f000 fd87 	bl	8007a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f02:	f001 fed9 	bl	8008cb8 <vPortEnterCritical>
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f0c:	b25b      	sxtb	r3, r3
 8006f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f12:	d103      	bne.n	8006f1c <xQueueGenericSend+0x174>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d103      	bne.n	8006f32 <xQueueGenericSend+0x18a>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f32:	f001 fef3 	bl	8008d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f36:	1d3a      	adds	r2, r7, #4
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 f806 	bl	8007f50 <xTaskCheckForTimeOut>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d124      	bne.n	8006f94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f4c:	f000 faa6 	bl	800749c <prvIsQueueFull>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d018      	beq.n	8006f88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	3310      	adds	r3, #16
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 ff2a 	bl	8007db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f66:	f000 fa31 	bl	80073cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f6a:	f000 fd5f 	bl	8007a2c <xTaskResumeAll>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f47f af7c 	bne.w	8006e6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f76:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa8 <xQueueGenericSend+0x200>)
 8006f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	e772      	b.n	8006e6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f8a:	f000 fa1f 	bl	80073cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f8e:	f000 fd4d 	bl	8007a2c <xTaskResumeAll>
 8006f92:	e76c      	b.n	8006e6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f96:	f000 fa19 	bl	80073cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f9a:	f000 fd47 	bl	8007a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3738      	adds	r7, #56	@ 0x38
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	e000ed04 	.word	0xe000ed04

08006fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b090      	sub	sp, #64	@ 0x40
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10b      	bne.n	8006fdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <xQueueGenericSendFromISR+0x3e>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <xQueueGenericSendFromISR+0x42>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <xQueueGenericSendFromISR+0x44>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	e7fd      	b.n	8007008 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d103      	bne.n	800701a <xQueueGenericSendFromISR+0x6e>
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <xQueueGenericSendFromISR+0x72>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <xQueueGenericSendFromISR+0x74>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	623b      	str	r3, [r7, #32]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800703c:	f001 ff1c 	bl	8008e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007040:	f3ef 8211 	mrs	r2, BASEPRI
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	61fa      	str	r2, [r7, #28]
 8007056:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007058:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800705a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	429a      	cmp	r2, r3
 8007066:	d302      	bcc.n	800706e <xQueueGenericSendFromISR+0xc2>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d12f      	bne.n	80070ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007084:	f000 f912 	bl	80072ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007088:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007090:	d112      	bne.n	80070b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	d016      	beq.n	80070c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	3324      	adds	r3, #36	@ 0x24
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fedc 	bl	8007e5c <xTaskRemoveFromEventList>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00e      	beq.n	80070c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e007      	b.n	80070c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070bc:	3301      	adds	r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	b25a      	sxtb	r2, r3
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070c8:	2301      	movs	r3, #1
 80070ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80070cc:	e001      	b.n	80070d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3740      	adds	r7, #64	@ 0x40
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08c      	sub	sp, #48	@ 0x30
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070f4:	2300      	movs	r3, #0
 80070f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <xQueueReceive+0x32>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	623b      	str	r3, [r7, #32]
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <xQueueReceive+0x40>
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <xQueueReceive+0x44>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <xQueueReceive+0x46>
 800712c:	2300      	movs	r3, #0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10b      	bne.n	800714a <xQueueReceive+0x62>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	61fb      	str	r3, [r7, #28]
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	e7fd      	b.n	8007146 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800714a:	f001 f847 	bl	80081dc <xTaskGetSchedulerState>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <xQueueReceive+0x72>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <xQueueReceive+0x76>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueReceive+0x78>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <xQueueReceive+0x94>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	61bb      	str	r3, [r7, #24]
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800717c:	f001 fd9c 	bl	8008cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01f      	beq.n	80071cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007190:	f000 f8f6 	bl	8007380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	1e5a      	subs	r2, r3, #1
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00f      	beq.n	80071c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	3310      	adds	r3, #16
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fe57 	bl	8007e5c <xTaskRemoveFromEventList>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071b4:	4b3c      	ldr	r3, [pc, #240]	@ (80072a8 <xQueueReceive+0x1c0>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071c4:	f001 fdaa 	bl	8008d1c <vPortExitCritical>
				return pdPASS;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e069      	b.n	80072a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d103      	bne.n	80071da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071d2:	f001 fda3 	bl	8008d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e062      	b.n	80072a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071e0:	f107 0310 	add.w	r3, r7, #16
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fe9d 	bl	8007f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ee:	f001 fd95 	bl	8008d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071f2:	f000 fc0d 	bl	8007a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071f6:	f001 fd5f 	bl	8008cb8 <vPortEnterCritical>
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007200:	b25b      	sxtb	r3, r3
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d103      	bne.n	8007210 <xQueueReceive+0x128>
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007216:	b25b      	sxtb	r3, r3
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d103      	bne.n	8007226 <xQueueReceive+0x13e>
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007226:	f001 fd79 	bl	8008d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800722a:	1d3a      	adds	r2, r7, #4
 800722c:	f107 0310 	add.w	r3, r7, #16
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fe8c 	bl	8007f50 <xTaskCheckForTimeOut>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d123      	bne.n	8007286 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800723e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007240:	f000 f916 	bl	8007470 <prvIsQueueEmpty>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d017      	beq.n	800727a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	3324      	adds	r3, #36	@ 0x24
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fdb0 	bl	8007db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725a:	f000 f8b7 	bl	80073cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800725e:	f000 fbe5 	bl	8007a2c <xTaskResumeAll>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d189      	bne.n	800717c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007268:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <xQueueReceive+0x1c0>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	e780      	b.n	800717c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800727a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800727c:	f000 f8a6 	bl	80073cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007280:	f000 fbd4 	bl	8007a2c <xTaskResumeAll>
 8007284:	e77a      	b.n	800717c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007288:	f000 f8a0 	bl	80073cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800728c:	f000 fbce 	bl	8007a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007292:	f000 f8ed 	bl	8007470 <prvIsQueueEmpty>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f43f af6f 	beq.w	800717c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800729e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	@ 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10d      	bne.n	80072e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d14d      	bne.n	800736e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 ff9e 	bl	8008218 <xTaskPriorityDisinherit>
 80072dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	e043      	b.n	800736e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d119      	bne.n	8007320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6858      	ldr	r0, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	461a      	mov	r2, r3
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	f002 fdeb 	bl	8009ed2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	d32b      	bcc.n	800736e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e026      	b.n	800736e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68d8      	ldr	r0, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	f002 fdd1 	bl	8009ed2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	425b      	negs	r3, r3
 800733a:	441a      	add	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d207      	bcs.n	800735c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007354:	425b      	negs	r3, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d105      	bne.n	800736e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	3b01      	subs	r3, #1
 800736c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007376:	697b      	ldr	r3, [r7, #20]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d018      	beq.n	80073c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	441a      	add	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d303      	bcc.n	80073b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68d9      	ldr	r1, [r3, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	461a      	mov	r2, r3
 80073be:	6838      	ldr	r0, [r7, #0]
 80073c0:	f002 fd87 	bl	8009ed2 <memcpy>
	}
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073d4:	f001 fc70 	bl	8008cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e0:	e011      	b.n	8007406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d012      	beq.n	8007410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3324      	adds	r3, #36	@ 0x24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fd34 	bl	8007e5c <xTaskRemoveFromEventList>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073fa:	f000 fe0d 	bl	8008018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	3b01      	subs	r3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dce9      	bgt.n	80073e2 <prvUnlockQueue+0x16>
 800740e:	e000      	b.n	8007412 <prvUnlockQueue+0x46>
					break;
 8007410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	22ff      	movs	r2, #255	@ 0xff
 8007416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800741a:	f001 fc7f 	bl	8008d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800741e:	f001 fc4b 	bl	8008cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800742a:	e011      	b.n	8007450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3310      	adds	r3, #16
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fd0f 	bl	8007e5c <xTaskRemoveFromEventList>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007444:	f000 fde8 	bl	8008018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	3b01      	subs	r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	dce9      	bgt.n	800742c <prvUnlockQueue+0x60>
 8007458:	e000      	b.n	800745c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800745a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	22ff      	movs	r2, #255	@ 0xff
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007464:	f001 fc5a 	bl	8008d1c <vPortExitCritical>
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007478:	f001 fc1e 	bl	8008cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e001      	b.n	800748e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800748e:	f001 fc45 	bl	8008d1c <vPortExitCritical>

	return xReturn;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074a4:	f001 fc08 	bl	8008cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d102      	bne.n	80074ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e001      	b.n	80074be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074be:	f001 fc2d 	bl	8008d1c <vPortExitCritical>

	return xReturn;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e014      	b.n	8007506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074dc:	4a0f      	ldr	r2, [pc, #60]	@ (800751c <vQueueAddToRegistry+0x50>)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074e8:	490c      	ldr	r1, [pc, #48]	@ (800751c <vQueueAddToRegistry+0x50>)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074f2:	4a0a      	ldr	r2, [pc, #40]	@ (800751c <vQueueAddToRegistry+0x50>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4413      	add	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074fe:	e006      	b.n	800750e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b07      	cmp	r3, #7
 800750a:	d9e7      	bls.n	80074dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000b88 	.word	0x20000b88

08007520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007530:	f001 fbc2 	bl	8008cb8 <vPortEnterCritical>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800753a:	b25b      	sxtb	r3, r3
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d103      	bne.n	800754a <vQueueWaitForMessageRestricted+0x2a>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007550:	b25b      	sxtb	r3, r3
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007556:	d103      	bne.n	8007560 <vQueueWaitForMessageRestricted+0x40>
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007560:	f001 fbdc 	bl	8008d1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	3324      	adds	r3, #36	@ 0x24
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fc45 	bl	8007e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f7ff ff26 	bl	80073cc <prvUnlockQueue>
	}
 8007580:	bf00      	nop
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08e      	sub	sp, #56	@ 0x38
 800758c:	af04      	add	r7, sp, #16
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	623b      	str	r3, [r7, #32]
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	e7fd      	b.n	80075b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	61fb      	str	r3, [r7, #28]
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	e7fd      	b.n	80075ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075d2:	235c      	movs	r3, #92	@ 0x5c
 80075d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80075da:	d00b      	beq.n	80075f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	61bb      	str	r3, [r7, #24]
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01e      	beq.n	800763a <xTaskCreateStatic+0xb2>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01b      	beq.n	800763a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800760a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007614:	2300      	movs	r3, #0
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	9302      	str	r3, [sp, #8]
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f850 	bl	80076d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007634:	f000 f8de 	bl	80077f4 <prvAddNewTaskToReadyList>
 8007638:	e001      	b.n	800763e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
	}
 8007640:	4618      	mov	r0, r3
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08c      	sub	sp, #48	@ 0x30
 800764c:	af04      	add	r7, sp, #16
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4618      	mov	r0, r3
 800765e:	f001 fc4d 	bl	8008efc <pvPortMalloc>
 8007662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800766a:	205c      	movs	r0, #92	@ 0x5c
 800766c:	f001 fc46 	bl	8008efc <pvPortMalloc>
 8007670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	631a      	str	r2, [r3, #48]	@ 0x30
 800767e:	e005      	b.n	800768c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007680:	6978      	ldr	r0, [r7, #20]
 8007682:	f001 fd09 	bl	8009098 <vPortFree>
 8007686:	e001      	b.n	800768c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d017      	beq.n	80076c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800769a:	88fa      	ldrh	r2, [r7, #6]
 800769c:	2300      	movs	r3, #0
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f80e 	bl	80076d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076b6:	69f8      	ldr	r0, [r7, #28]
 80076b8:	f000 f89c 	bl	80077f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	e002      	b.n	80076c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076c2:	f04f 33ff 	mov.w	r3, #4294967295
 80076c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076c8:	69bb      	ldr	r3, [r7, #24]
	}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	461a      	mov	r2, r3
 80076ea:	21a5      	movs	r1, #165	@ 0xa5
 80076ec:	f002 fb71 	bl	8009dd2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076fa:	3b01      	subs	r3, #1
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f023 0307 	bic.w	r3, r3, #7
 8007708:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	617b      	str	r3, [r7, #20]
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	e7fd      	b.n	8007728 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01f      	beq.n	8007772 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	e012      	b.n	800775e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	4413      	add	r3, r2
 800773e:	7819      	ldrb	r1, [r3, #0]
 8007740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	3334      	adds	r3, #52	@ 0x34
 8007748:	460a      	mov	r2, r1
 800774a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4413      	add	r3, r2
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	3301      	adds	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	2b0f      	cmp	r3, #15
 8007762:	d9e9      	bls.n	8007738 <prvInitialiseNewTask+0x66>
 8007764:	e000      	b.n	8007768 <prvInitialiseNewTask+0x96>
			{
				break;
 8007766:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007770:	e003      	b.n	800777a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	2b37      	cmp	r3, #55	@ 0x37
 800777e:	d901      	bls.n	8007784 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007780:	2337      	movs	r3, #55	@ 0x37
 8007782:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800778e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	2200      	movs	r2, #0
 8007794:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	3304      	adds	r3, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff f966 	bl	8006a6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	3318      	adds	r3, #24
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff f961 	bl	8006a6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	2200      	movs	r2, #0
 80077c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	68f9      	ldr	r1, [r7, #12]
 80077d2:	69b8      	ldr	r0, [r7, #24]
 80077d4:	f001 f93e 	bl	8008a54 <pxPortInitialiseStack>
 80077d8:	4602      	mov	r2, r0
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ea:	bf00      	nop
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077fc:	f001 fa5c 	bl	8008cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007800:	4b2d      	ldr	r3, [pc, #180]	@ (80078b8 <prvAddNewTaskToReadyList+0xc4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	4a2c      	ldr	r2, [pc, #176]	@ (80078b8 <prvAddNewTaskToReadyList+0xc4>)
 8007808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800780a:	4b2c      	ldr	r3, [pc, #176]	@ (80078bc <prvAddNewTaskToReadyList+0xc8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d109      	bne.n	8007826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007812:	4a2a      	ldr	r2, [pc, #168]	@ (80078bc <prvAddNewTaskToReadyList+0xc8>)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007818:	4b27      	ldr	r3, [pc, #156]	@ (80078b8 <prvAddNewTaskToReadyList+0xc4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d110      	bne.n	8007842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007820:	f000 fc1e 	bl	8008060 <prvInitialiseTaskLists>
 8007824:	e00d      	b.n	8007842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007826:	4b26      	ldr	r3, [pc, #152]	@ (80078c0 <prvAddNewTaskToReadyList+0xcc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d109      	bne.n	8007842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800782e:	4b23      	ldr	r3, [pc, #140]	@ (80078bc <prvAddNewTaskToReadyList+0xc8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	429a      	cmp	r2, r3
 800783a:	d802      	bhi.n	8007842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800783c:	4a1f      	ldr	r2, [pc, #124]	@ (80078bc <prvAddNewTaskToReadyList+0xc8>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007842:	4b20      	ldr	r3, [pc, #128]	@ (80078c4 <prvAddNewTaskToReadyList+0xd0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3301      	adds	r3, #1
 8007848:	4a1e      	ldr	r2, [pc, #120]	@ (80078c4 <prvAddNewTaskToReadyList+0xd0>)
 800784a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800784c:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <prvAddNewTaskToReadyList+0xd0>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007858:	4b1b      	ldr	r3, [pc, #108]	@ (80078c8 <prvAddNewTaskToReadyList+0xd4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d903      	bls.n	8007868 <prvAddNewTaskToReadyList+0x74>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	4a18      	ldr	r2, [pc, #96]	@ (80078c8 <prvAddNewTaskToReadyList+0xd4>)
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4a15      	ldr	r2, [pc, #84]	@ (80078cc <prvAddNewTaskToReadyList+0xd8>)
 8007876:	441a      	add	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	f7ff f901 	bl	8006a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007884:	f001 fa4a 	bl	8008d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007888:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <prvAddNewTaskToReadyList+0xcc>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00e      	beq.n	80078ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007890:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <prvAddNewTaskToReadyList+0xc8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	429a      	cmp	r2, r3
 800789c:	d207      	bcs.n	80078ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800789e:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <prvAddNewTaskToReadyList+0xdc>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	2000109c 	.word	0x2000109c
 80078bc:	20000bc8 	.word	0x20000bc8
 80078c0:	200010a8 	.word	0x200010a8
 80078c4:	200010b8 	.word	0x200010b8
 80078c8:	200010a4 	.word	0x200010a4
 80078cc:	20000bcc 	.word	0x20000bcc
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078e6:	4b14      	ldr	r3, [pc, #80]	@ (8007938 <vTaskDelay+0x64>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <vTaskDelay+0x32>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60bb      	str	r3, [r7, #8]
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	e7fd      	b.n	8007902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007906:	f000 f883 	bl	8007a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800790a:	2100      	movs	r1, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fcf3 	bl	80082f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007912:	f000 f88b 	bl	8007a2c <xTaskResumeAll>
 8007916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800791e:	4b07      	ldr	r3, [pc, #28]	@ (800793c <vTaskDelay+0x68>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200010c4 	.word	0x200010c4
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	@ 0x28
 8007944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800794e:	463a      	mov	r2, r7
 8007950:	1d39      	adds	r1, r7, #4
 8007952:	f107 0308 	add.w	r3, r7, #8
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff f834 	bl	80069c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	9202      	str	r2, [sp, #8]
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2300      	movs	r3, #0
 800796c:	460a      	mov	r2, r1
 800796e:	4922      	ldr	r1, [pc, #136]	@ (80079f8 <vTaskStartScheduler+0xb8>)
 8007970:	4822      	ldr	r0, [pc, #136]	@ (80079fc <vTaskStartScheduler+0xbc>)
 8007972:	f7ff fe09 	bl	8007588 <xTaskCreateStatic>
 8007976:	4603      	mov	r3, r0
 8007978:	4a21      	ldr	r2, [pc, #132]	@ (8007a00 <vTaskStartScheduler+0xc0>)
 800797a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800797c:	4b20      	ldr	r3, [pc, #128]	@ (8007a00 <vTaskStartScheduler+0xc0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e001      	b.n	800798e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d102      	bne.n	800799a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007994:	f000 fd04 	bl	80083a0 <xTimerCreateTimerTask>
 8007998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d116      	bne.n	80079ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	613b      	str	r3, [r7, #16]
}
 80079b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079b4:	4b13      	ldr	r3, [pc, #76]	@ (8007a04 <vTaskStartScheduler+0xc4>)
 80079b6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079bc:	4b12      	ldr	r3, [pc, #72]	@ (8007a08 <vTaskStartScheduler+0xc8>)
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079c2:	4b12      	ldr	r3, [pc, #72]	@ (8007a0c <vTaskStartScheduler+0xcc>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079c8:	f001 f8d2 	bl	8008b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079cc:	e00f      	b.n	80079ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d10b      	bne.n	80079ee <vTaskStartScheduler+0xae>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60fb      	str	r3, [r7, #12]
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	e7fd      	b.n	80079ea <vTaskStartScheduler+0xaa>
}
 80079ee:	bf00      	nop
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	0800bff4 	.word	0x0800bff4
 80079fc:	08008031 	.word	0x08008031
 8007a00:	200010c0 	.word	0x200010c0
 8007a04:	200010bc 	.word	0x200010bc
 8007a08:	200010a8 	.word	0x200010a8
 8007a0c:	200010a0 	.word	0x200010a0

08007a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <vTaskSuspendAll+0x18>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	4a03      	ldr	r2, [pc, #12]	@ (8007a28 <vTaskSuspendAll+0x18>)
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a1e:	bf00      	nop
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	200010c4 	.word	0x200010c4

08007a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a3a:	4b42      	ldr	r3, [pc, #264]	@ (8007b44 <xTaskResumeAll+0x118>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <xTaskResumeAll+0x2e>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	603b      	str	r3, [r7, #0]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a5a:	f001 f92d 	bl	8008cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a5e:	4b39      	ldr	r3, [pc, #228]	@ (8007b44 <xTaskResumeAll+0x118>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	4a37      	ldr	r2, [pc, #220]	@ (8007b44 <xTaskResumeAll+0x118>)
 8007a66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a68:	4b36      	ldr	r3, [pc, #216]	@ (8007b44 <xTaskResumeAll+0x118>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d162      	bne.n	8007b36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a70:	4b35      	ldr	r3, [pc, #212]	@ (8007b48 <xTaskResumeAll+0x11c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d05e      	beq.n	8007b36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a78:	e02f      	b.n	8007ada <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7a:	4b34      	ldr	r3, [pc, #208]	@ (8007b4c <xTaskResumeAll+0x120>)
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3318      	adds	r3, #24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff f85a 	bl	8006b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff f855 	bl	8006b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007b50 <xTaskResumeAll+0x124>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d903      	bls.n	8007aaa <xTaskResumeAll+0x7e>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8007b50 <xTaskResumeAll+0x124>)
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4a27      	ldr	r2, [pc, #156]	@ (8007b54 <xTaskResumeAll+0x128>)
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fe ffe0 	bl	8006a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aca:	4b23      	ldr	r3, [pc, #140]	@ (8007b58 <xTaskResumeAll+0x12c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d302      	bcc.n	8007ada <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007ad4:	4b21      	ldr	r3, [pc, #132]	@ (8007b5c <xTaskResumeAll+0x130>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ada:	4b1c      	ldr	r3, [pc, #112]	@ (8007b4c <xTaskResumeAll+0x120>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1cb      	bne.n	8007a7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ae8:	f000 fb58 	bl	800819c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007aec:	4b1c      	ldr	r3, [pc, #112]	@ (8007b60 <xTaskResumeAll+0x134>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007af8:	f000 f846 	bl	8007b88 <xTaskIncrementTick>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007b02:	4b16      	ldr	r3, [pc, #88]	@ (8007b5c <xTaskResumeAll+0x130>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f1      	bne.n	8007af8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007b14:	4b12      	ldr	r3, [pc, #72]	@ (8007b60 <xTaskResumeAll+0x134>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b1a:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <xTaskResumeAll+0x130>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b22:	2301      	movs	r3, #1
 8007b24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <xTaskResumeAll+0x138>)
 8007b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b36:	f001 f8f1 	bl	8008d1c <vPortExitCritical>

	return xAlreadyYielded;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	200010c4 	.word	0x200010c4
 8007b48:	2000109c 	.word	0x2000109c
 8007b4c:	2000105c 	.word	0x2000105c
 8007b50:	200010a4 	.word	0x200010a4
 8007b54:	20000bcc 	.word	0x20000bcc
 8007b58:	20000bc8 	.word	0x20000bc8
 8007b5c:	200010b0 	.word	0x200010b0
 8007b60:	200010ac 	.word	0x200010ac
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b6e:	4b05      	ldr	r3, [pc, #20]	@ (8007b84 <xTaskGetTickCount+0x1c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b74:	687b      	ldr	r3, [r7, #4]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	200010a0 	.word	0x200010a0

08007b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b92:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd0 <xTaskIncrementTick+0x148>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 8090 	bne.w	8007cbc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007cd4 <xTaskIncrementTick+0x14c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8007cd4 <xTaskIncrementTick+0x14c>)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d121      	bne.n	8007bf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bb0:	4b49      	ldr	r3, [pc, #292]	@ (8007cd8 <xTaskIncrementTick+0x150>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	603b      	str	r3, [r7, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <xTaskIncrementTick+0x46>
 8007bd2:	4b41      	ldr	r3, [pc, #260]	@ (8007cd8 <xTaskIncrementTick+0x150>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	4b40      	ldr	r3, [pc, #256]	@ (8007cdc <xTaskIncrementTick+0x154>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8007cd8 <xTaskIncrementTick+0x150>)
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	4a3e      	ldr	r2, [pc, #248]	@ (8007cdc <xTaskIncrementTick+0x154>)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce0 <xTaskIncrementTick+0x158>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	4a3c      	ldr	r2, [pc, #240]	@ (8007ce0 <xTaskIncrementTick+0x158>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	f000 fad4 	bl	800819c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ce4 <xTaskIncrementTick+0x15c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d349      	bcc.n	8007c92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bfe:	4b36      	ldr	r3, [pc, #216]	@ (8007cd8 <xTaskIncrementTick+0x150>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c08:	4b36      	ldr	r3, [pc, #216]	@ (8007ce4 <xTaskIncrementTick+0x15c>)
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	601a      	str	r2, [r3, #0]
					break;
 8007c10:	e03f      	b.n	8007c92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c12:	4b31      	ldr	r3, [pc, #196]	@ (8007cd8 <xTaskIncrementTick+0x150>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d203      	bcs.n	8007c32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce4 <xTaskIncrementTick+0x15c>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c30:	e02f      	b.n	8007c92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe ff82 	bl	8006b40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3318      	adds	r3, #24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe ff79 	bl	8006b40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c52:	4b25      	ldr	r3, [pc, #148]	@ (8007ce8 <xTaskIncrementTick+0x160>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d903      	bls.n	8007c62 <xTaskIncrementTick+0xda>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	4a22      	ldr	r2, [pc, #136]	@ (8007ce8 <xTaskIncrementTick+0x160>)
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cec <xTaskIncrementTick+0x164>)
 8007c70:	441a      	add	r2, r3
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7fe ff04 	bl	8006a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c82:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf0 <xTaskIncrementTick+0x168>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d3b8      	bcc.n	8007bfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c90:	e7b5      	b.n	8007bfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c92:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <xTaskIncrementTick+0x168>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c98:	4914      	ldr	r1, [pc, #80]	@ (8007cec <xTaskIncrementTick+0x164>)
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d901      	bls.n	8007cae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cae:	4b11      	ldr	r3, [pc, #68]	@ (8007cf4 <xTaskIncrementTick+0x16c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e004      	b.n	8007cc6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007cf8 <xTaskIncrementTick+0x170>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8007cf8 <xTaskIncrementTick+0x170>)
 8007cc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cc6:	697b      	ldr	r3, [r7, #20]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200010c4 	.word	0x200010c4
 8007cd4:	200010a0 	.word	0x200010a0
 8007cd8:	20001054 	.word	0x20001054
 8007cdc:	20001058 	.word	0x20001058
 8007ce0:	200010b4 	.word	0x200010b4
 8007ce4:	200010bc 	.word	0x200010bc
 8007ce8:	200010a4 	.word	0x200010a4
 8007cec:	20000bcc 	.word	0x20000bcc
 8007cf0:	20000bc8 	.word	0x20000bc8
 8007cf4:	200010b0 	.word	0x200010b0
 8007cf8:	200010ac 	.word	0x200010ac

08007cfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d02:	4b28      	ldr	r3, [pc, #160]	@ (8007da4 <vTaskSwitchContext+0xa8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d0a:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <vTaskSwitchContext+0xac>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d10:	e042      	b.n	8007d98 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007d12:	4b25      	ldr	r3, [pc, #148]	@ (8007da8 <vTaskSwitchContext+0xac>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b24      	ldr	r3, [pc, #144]	@ (8007dac <vTaskSwitchContext+0xb0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e011      	b.n	8007d44 <vTaskSwitchContext+0x48>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <vTaskSwitchContext+0x42>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	607b      	str	r3, [r7, #4]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <vTaskSwitchContext+0x3e>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	491a      	ldr	r1, [pc, #104]	@ (8007db0 <vTaskSwitchContext+0xb4>)
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0e3      	beq.n	8007d20 <vTaskSwitchContext+0x24>
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4a13      	ldr	r2, [pc, #76]	@ (8007db0 <vTaskSwitchContext+0xb4>)
 8007d64:	4413      	add	r3, r2
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d104      	bne.n	8007d88 <vTaskSwitchContext+0x8c>
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	605a      	str	r2, [r3, #4]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	4a09      	ldr	r2, [pc, #36]	@ (8007db4 <vTaskSwitchContext+0xb8>)
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	4a06      	ldr	r2, [pc, #24]	@ (8007dac <vTaskSwitchContext+0xb0>)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6013      	str	r3, [r2, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	200010c4 	.word	0x200010c4
 8007da8:	200010b0 	.word	0x200010b0
 8007dac:	200010a4 	.word	0x200010a4
 8007db0:	20000bcc 	.word	0x20000bcc
 8007db4:	20000bc8 	.word	0x20000bc8

08007db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10b      	bne.n	8007de0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	e7fd      	b.n	8007ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007de0:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <vTaskPlaceOnEventList+0x48>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3318      	adds	r3, #24
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fe fe70 	bl	8006ace <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dee:	2101      	movs	r1, #1
 8007df0:	6838      	ldr	r0, [r7, #0]
 8007df2:	f000 fa81 	bl	80082f8 <prvAddCurrentTaskToDelayedList>
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000bc8 	.word	0x20000bc8

08007e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10b      	bne.n	8007e2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	617b      	str	r3, [r7, #20]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4619      	mov	r1, r3
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7fe fe25 	bl	8006a86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295
 8007e46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	68b8      	ldr	r0, [r7, #8]
 8007e4c:	f000 fa54 	bl	80082f8 <prvAddCurrentTaskToDelayedList>
	}
 8007e50:	bf00      	nop
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000bc8 	.word	0x20000bc8

08007e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10b      	bne.n	8007e8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60fb      	str	r3, [r7, #12]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	3318      	adds	r3, #24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fe56 	bl	8006b40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e94:	4b1d      	ldr	r3, [pc, #116]	@ (8007f0c <xTaskRemoveFromEventList+0xb0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d11d      	bne.n	8007ed8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe fe4d 	bl	8006b40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eaa:	4b19      	ldr	r3, [pc, #100]	@ (8007f10 <xTaskRemoveFromEventList+0xb4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d903      	bls.n	8007eba <xTaskRemoveFromEventList+0x5e>
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	4a16      	ldr	r2, [pc, #88]	@ (8007f10 <xTaskRemoveFromEventList+0xb4>)
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a13      	ldr	r2, [pc, #76]	@ (8007f14 <xTaskRemoveFromEventList+0xb8>)
 8007ec8:	441a      	add	r2, r3
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7fe fdd8 	bl	8006a86 <vListInsertEnd>
 8007ed6:	e005      	b.n	8007ee4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	3318      	adds	r3, #24
 8007edc:	4619      	mov	r1, r3
 8007ede:	480e      	ldr	r0, [pc, #56]	@ (8007f18 <xTaskRemoveFromEventList+0xbc>)
 8007ee0:	f7fe fdd1 	bl	8006a86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f1c <xTaskRemoveFromEventList+0xc0>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d905      	bls.n	8007efe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <xTaskRemoveFromEventList+0xc4>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	e001      	b.n	8007f02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f02:	697b      	ldr	r3, [r7, #20]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	200010c4 	.word	0x200010c4
 8007f10:	200010a4 	.word	0x200010a4
 8007f14:	20000bcc 	.word	0x20000bcc
 8007f18:	2000105c 	.word	0x2000105c
 8007f1c:	20000bc8 	.word	0x20000bc8
 8007f20:	200010b0 	.word	0x200010b0

08007f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f2c:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <vTaskInternalSetTimeOutState+0x24>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <vTaskInternalSetTimeOutState+0x28>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	605a      	str	r2, [r3, #4]
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	200010b4 	.word	0x200010b4
 8007f4c:	200010a0 	.word	0x200010a0

08007f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	613b      	str	r3, [r7, #16]
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	60fb      	str	r3, [r7, #12]
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	e7fd      	b.n	8007f92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f96:	f000 fe8f 	bl	8008cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <xTaskCheckForTimeOut+0xc0>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d102      	bne.n	8007fba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]
 8007fb8:	e023      	b.n	8008002 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b15      	ldr	r3, [pc, #84]	@ (8008014 <xTaskCheckForTimeOut+0xc4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d007      	beq.n	8007fd6 <xTaskCheckForTimeOut+0x86>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d302      	bcc.n	8007fd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e015      	b.n	8008002 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d20b      	bcs.n	8007ff8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff ff99 	bl	8007f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	e004      	b.n	8008002 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008002:	f000 fe8b 	bl	8008d1c <vPortExitCritical>

	return xReturn;
 8008006:	69fb      	ldr	r3, [r7, #28]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200010a0 	.word	0x200010a0
 8008014:	200010b4 	.word	0x200010b4

08008018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800801c:	4b03      	ldr	r3, [pc, #12]	@ (800802c <vTaskMissedYield+0x14>)
 800801e:	2201      	movs	r2, #1
 8008020:	601a      	str	r2, [r3, #0]
}
 8008022:	bf00      	nop
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	200010b0 	.word	0x200010b0

08008030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008038:	f000 f852 	bl	80080e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <prvIdleTask+0x28>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d9f9      	bls.n	8008038 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <prvIdleTask+0x2c>)
 8008046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008054:	e7f0      	b.n	8008038 <prvIdleTask+0x8>
 8008056:	bf00      	nop
 8008058:	20000bcc 	.word	0x20000bcc
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008066:	2300      	movs	r3, #0
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	e00c      	b.n	8008086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4a12      	ldr	r2, [pc, #72]	@ (80080c0 <prvInitialiseTaskLists+0x60>)
 8008078:	4413      	add	r3, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe fcd6 	bl	8006a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3301      	adds	r3, #1
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b37      	cmp	r3, #55	@ 0x37
 800808a:	d9ef      	bls.n	800806c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800808c:	480d      	ldr	r0, [pc, #52]	@ (80080c4 <prvInitialiseTaskLists+0x64>)
 800808e:	f7fe fccd 	bl	8006a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008092:	480d      	ldr	r0, [pc, #52]	@ (80080c8 <prvInitialiseTaskLists+0x68>)
 8008094:	f7fe fcca 	bl	8006a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008098:	480c      	ldr	r0, [pc, #48]	@ (80080cc <prvInitialiseTaskLists+0x6c>)
 800809a:	f7fe fcc7 	bl	8006a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800809e:	480c      	ldr	r0, [pc, #48]	@ (80080d0 <prvInitialiseTaskLists+0x70>)
 80080a0:	f7fe fcc4 	bl	8006a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080a4:	480b      	ldr	r0, [pc, #44]	@ (80080d4 <prvInitialiseTaskLists+0x74>)
 80080a6:	f7fe fcc1 	bl	8006a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080aa:	4b0b      	ldr	r3, [pc, #44]	@ (80080d8 <prvInitialiseTaskLists+0x78>)
 80080ac:	4a05      	ldr	r2, [pc, #20]	@ (80080c4 <prvInitialiseTaskLists+0x64>)
 80080ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080b0:	4b0a      	ldr	r3, [pc, #40]	@ (80080dc <prvInitialiseTaskLists+0x7c>)
 80080b2:	4a05      	ldr	r2, [pc, #20]	@ (80080c8 <prvInitialiseTaskLists+0x68>)
 80080b4:	601a      	str	r2, [r3, #0]
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000bcc 	.word	0x20000bcc
 80080c4:	2000102c 	.word	0x2000102c
 80080c8:	20001040 	.word	0x20001040
 80080cc:	2000105c 	.word	0x2000105c
 80080d0:	20001070 	.word	0x20001070
 80080d4:	20001088 	.word	0x20001088
 80080d8:	20001054 	.word	0x20001054
 80080dc:	20001058 	.word	0x20001058

080080e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080e6:	e019      	b.n	800811c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080e8:	f000 fde6 	bl	8008cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ec:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <prvCheckTasksWaitingTermination+0x50>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fd21 	bl	8006b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008134 <prvCheckTasksWaitingTermination+0x54>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3b01      	subs	r3, #1
 8008104:	4a0b      	ldr	r2, [pc, #44]	@ (8008134 <prvCheckTasksWaitingTermination+0x54>)
 8008106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008108:	4b0b      	ldr	r3, [pc, #44]	@ (8008138 <prvCheckTasksWaitingTermination+0x58>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3b01      	subs	r3, #1
 800810e:	4a0a      	ldr	r2, [pc, #40]	@ (8008138 <prvCheckTasksWaitingTermination+0x58>)
 8008110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008112:	f000 fe03 	bl	8008d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f810 	bl	800813c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800811c:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <prvCheckTasksWaitingTermination+0x58>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e1      	bne.n	80080e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20001070 	.word	0x20001070
 8008134:	2000109c 	.word	0x2000109c
 8008138:	20001084 	.word	0x20001084

0800813c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800814a:	2b00      	cmp	r3, #0
 800814c:	d108      	bne.n	8008160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	4618      	mov	r0, r3
 8008154:	f000 ffa0 	bl	8009098 <vPortFree>
				vPortFree( pxTCB );
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 ff9d 	bl	8009098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800815e:	e019      	b.n	8008194 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008166:	2b01      	cmp	r3, #1
 8008168:	d103      	bne.n	8008172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 ff94 	bl	8009098 <vPortFree>
	}
 8008170:	e010      	b.n	8008194 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008178:	2b02      	cmp	r3, #2
 800817a:	d00b      	beq.n	8008194 <prvDeleteTCB+0x58>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	e7fd      	b.n	8008190 <prvDeleteTCB+0x54>
	}
 8008194:	bf00      	nop
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081a2:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <prvResetNextTaskUnblockTime+0x38>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <prvResetNextTaskUnblockTime+0x3c>)
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081b4:	e008      	b.n	80081c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b6:	4b07      	ldr	r3, [pc, #28]	@ (80081d4 <prvResetNextTaskUnblockTime+0x38>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4a04      	ldr	r2, [pc, #16]	@ (80081d8 <prvResetNextTaskUnblockTime+0x3c>)
 80081c6:	6013      	str	r3, [r2, #0]
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	20001054 	.word	0x20001054
 80081d8:	200010bc 	.word	0x200010bc

080081dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008210 <xTaskGetSchedulerState+0x34>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081ea:	2301      	movs	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	e008      	b.n	8008202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f0:	4b08      	ldr	r3, [pc, #32]	@ (8008214 <xTaskGetSchedulerState+0x38>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081f8:	2302      	movs	r3, #2
 80081fa:	607b      	str	r3, [r7, #4]
 80081fc:	e001      	b.n	8008202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081fe:	2300      	movs	r3, #0
 8008200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008202:	687b      	ldr	r3, [r7, #4]
	}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	200010a8 	.word	0x200010a8
 8008214:	200010c4 	.word	0x200010c4

08008218 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d058      	beq.n	80082e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800822e:	4b2f      	ldr	r3, [pc, #188]	@ (80082ec <xTaskPriorityDisinherit+0xd4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	429a      	cmp	r2, r3
 8008236:	d00b      	beq.n	8008250 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	60fb      	str	r3, [r7, #12]
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10b      	bne.n	8008270 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	60bb      	str	r3, [r7, #8]
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	e7fd      	b.n	800826c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008274:	1e5a      	subs	r2, r3, #1
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008282:	429a      	cmp	r2, r3
 8008284:	d02c      	beq.n	80082e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828a:	2b00      	cmp	r3, #0
 800828c:	d128      	bne.n	80082e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	3304      	adds	r3, #4
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fc54 	bl	8006b40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b0:	4b0f      	ldr	r3, [pc, #60]	@ (80082f0 <xTaskPriorityDisinherit+0xd8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d903      	bls.n	80082c0 <xTaskPriorityDisinherit+0xa8>
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082bc:	4a0c      	ldr	r2, [pc, #48]	@ (80082f0 <xTaskPriorityDisinherit+0xd8>)
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4a09      	ldr	r2, [pc, #36]	@ (80082f4 <xTaskPriorityDisinherit+0xdc>)
 80082ce:	441a      	add	r2, r3
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f7fe fbd5 	bl	8006a86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082dc:	2301      	movs	r3, #1
 80082de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082e0:	697b      	ldr	r3, [r7, #20]
	}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000bc8 	.word	0x20000bc8
 80082f0:	200010a4 	.word	0x200010a4
 80082f4:	20000bcc 	.word	0x20000bcc

080082f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008302:	4b21      	ldr	r3, [pc, #132]	@ (8008388 <prvAddCurrentTaskToDelayedList+0x90>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008308:	4b20      	ldr	r3, [pc, #128]	@ (800838c <prvAddCurrentTaskToDelayedList+0x94>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3304      	adds	r3, #4
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fc16 	bl	8006b40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d10a      	bne.n	8008332 <prvAddCurrentTaskToDelayedList+0x3a>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008322:	4b1a      	ldr	r3, [pc, #104]	@ (800838c <prvAddCurrentTaskToDelayedList+0x94>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3304      	adds	r3, #4
 8008328:	4619      	mov	r1, r3
 800832a:	4819      	ldr	r0, [pc, #100]	@ (8008390 <prvAddCurrentTaskToDelayedList+0x98>)
 800832c:	f7fe fbab 	bl	8006a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008330:	e026      	b.n	8008380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800833a:	4b14      	ldr	r3, [pc, #80]	@ (800838c <prvAddCurrentTaskToDelayedList+0x94>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	429a      	cmp	r2, r3
 8008348:	d209      	bcs.n	800835e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800834a:	4b12      	ldr	r3, [pc, #72]	@ (8008394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b0f      	ldr	r3, [pc, #60]	@ (800838c <prvAddCurrentTaskToDelayedList+0x94>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3304      	adds	r3, #4
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7fe fbb9 	bl	8006ace <vListInsert>
}
 800835c:	e010      	b.n	8008380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800835e:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <prvAddCurrentTaskToDelayedList+0x94>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3304      	adds	r3, #4
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f7fe fbaf 	bl	8006ace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008370:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	429a      	cmp	r2, r3
 8008378:	d202      	bcs.n	8008380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800837a:	4a08      	ldr	r2, [pc, #32]	@ (800839c <prvAddCurrentTaskToDelayedList+0xa4>)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6013      	str	r3, [r2, #0]
}
 8008380:	bf00      	nop
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	200010a0 	.word	0x200010a0
 800838c:	20000bc8 	.word	0x20000bc8
 8008390:	20001088 	.word	0x20001088
 8008394:	20001058 	.word	0x20001058
 8008398:	20001054 	.word	0x20001054
 800839c:	200010bc 	.word	0x200010bc

080083a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08a      	sub	sp, #40	@ 0x28
 80083a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083aa:	f000 fb13 	bl	80089d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008424 <xTimerCreateTimerTask+0x84>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d021      	beq.n	80083fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083be:	1d3a      	adds	r2, r7, #4
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	f107 030c 	add.w	r3, r7, #12
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fb15 	bl	80069f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	9202      	str	r2, [sp, #8]
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	2302      	movs	r3, #2
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	2300      	movs	r3, #0
 80083de:	460a      	mov	r2, r1
 80083e0:	4911      	ldr	r1, [pc, #68]	@ (8008428 <xTimerCreateTimerTask+0x88>)
 80083e2:	4812      	ldr	r0, [pc, #72]	@ (800842c <xTimerCreateTimerTask+0x8c>)
 80083e4:	f7ff f8d0 	bl	8007588 <xTaskCreateStatic>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4a11      	ldr	r2, [pc, #68]	@ (8008430 <xTimerCreateTimerTask+0x90>)
 80083ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083ee:	4b10      	ldr	r3, [pc, #64]	@ (8008430 <xTimerCreateTimerTask+0x90>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083f6:	2301      	movs	r3, #1
 80083f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10b      	bne.n	8008418 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	613b      	str	r3, [r7, #16]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008418:	697b      	ldr	r3, [r7, #20]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200010f8 	.word	0x200010f8
 8008428:	0800bffc 	.word	0x0800bffc
 800842c:	0800856d 	.word	0x0800856d
 8008430:	200010fc 	.word	0x200010fc

08008434 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008442:	2300      	movs	r3, #0
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10b      	bne.n	8008464 <xTimerGenericCommand+0x30>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	623b      	str	r3, [r7, #32]
}
 800845e:	bf00      	nop
 8008460:	bf00      	nop
 8008462:	e7fd      	b.n	8008460 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008464:	4b19      	ldr	r3, [pc, #100]	@ (80084cc <xTimerGenericCommand+0x98>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d02a      	beq.n	80084c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b05      	cmp	r3, #5
 800847c:	dc18      	bgt.n	80084b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800847e:	f7ff fead 	bl	80081dc <xTaskGetSchedulerState>
 8008482:	4603      	mov	r3, r0
 8008484:	2b02      	cmp	r3, #2
 8008486:	d109      	bne.n	800849c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008488:	4b10      	ldr	r3, [pc, #64]	@ (80084cc <xTimerGenericCommand+0x98>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	f107 0110 	add.w	r1, r7, #16
 8008490:	2300      	movs	r3, #0
 8008492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008494:	f7fe fc88 	bl	8006da8 <xQueueGenericSend>
 8008498:	6278      	str	r0, [r7, #36]	@ 0x24
 800849a:	e012      	b.n	80084c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800849c:	4b0b      	ldr	r3, [pc, #44]	@ (80084cc <xTimerGenericCommand+0x98>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	f107 0110 	add.w	r1, r7, #16
 80084a4:	2300      	movs	r3, #0
 80084a6:	2200      	movs	r2, #0
 80084a8:	f7fe fc7e 	bl	8006da8 <xQueueGenericSend>
 80084ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80084ae:	e008      	b.n	80084c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <xTimerGenericCommand+0x98>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	f107 0110 	add.w	r1, r7, #16
 80084b8:	2300      	movs	r3, #0
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	f7fe fd76 	bl	8006fac <xQueueGenericSendFromISR>
 80084c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3728      	adds	r7, #40	@ 0x28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200010f8 	.word	0x200010f8

080084d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084da:	4b23      	ldr	r3, [pc, #140]	@ (8008568 <prvProcessExpiredTimer+0x98>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fb29 	bl	8006b40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d023      	beq.n	8008544 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	18d1      	adds	r1, r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	6978      	ldr	r0, [r7, #20]
 800850a:	f000 f8d5 	bl	80086b8 <prvInsertTimerInActiveList>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d020      	beq.n	8008556 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008514:	2300      	movs	r3, #0
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	2300      	movs	r3, #0
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	2100      	movs	r1, #0
 800851e:	6978      	ldr	r0, [r7, #20]
 8008520:	f7ff ff88 	bl	8008434 <xTimerGenericCommand>
 8008524:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d114      	bne.n	8008556 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60fb      	str	r3, [r7, #12]
}
 800853e:	bf00      	nop
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800854a:	f023 0301 	bic.w	r3, r3, #1
 800854e:	b2da      	uxtb	r2, r3
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	6978      	ldr	r0, [r7, #20]
 800855c:	4798      	blx	r3
}
 800855e:	bf00      	nop
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200010f0 	.word	0x200010f0

0800856c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008574:	f107 0308 	add.w	r3, r7, #8
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f859 	bl	8008630 <prvGetNextExpireTime>
 800857e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4619      	mov	r1, r3
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f805 	bl	8008594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800858a:	f000 f8d7 	bl	800873c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800858e:	bf00      	nop
 8008590:	e7f0      	b.n	8008574 <prvTimerTask+0x8>
	...

08008594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800859e:	f7ff fa37 	bl	8007a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f866 	bl	8008678 <prvSampleTimeNow>
 80085ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d130      	bne.n	8008616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <prvProcessTimerOrBlockTask+0x3c>
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d806      	bhi.n	80085d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085c2:	f7ff fa33 	bl	8007a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff ff81 	bl	80084d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085ce:	e024      	b.n	800861a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d008      	beq.n	80085e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085d6:	4b13      	ldr	r3, [pc, #76]	@ (8008624 <prvProcessTimerOrBlockTask+0x90>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <prvProcessTimerOrBlockTask+0x50>
 80085e0:	2301      	movs	r3, #1
 80085e2:	e000      	b.n	80085e6 <prvProcessTimerOrBlockTask+0x52>
 80085e4:	2300      	movs	r3, #0
 80085e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <prvProcessTimerOrBlockTask+0x94>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	4619      	mov	r1, r3
 80085f6:	f7fe ff93 	bl	8007520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085fa:	f7ff fa17 	bl	8007a2c <xTaskResumeAll>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008604:	4b09      	ldr	r3, [pc, #36]	@ (800862c <prvProcessTimerOrBlockTask+0x98>)
 8008606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	f3bf 8f6f 	isb	sy
}
 8008614:	e001      	b.n	800861a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008616:	f7ff fa09 	bl	8007a2c <xTaskResumeAll>
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200010f4 	.word	0x200010f4
 8008628:	200010f8 	.word	0x200010f8
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008638:	4b0e      	ldr	r3, [pc, #56]	@ (8008674 <prvGetNextExpireTime+0x44>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <prvGetNextExpireTime+0x16>
 8008642:	2201      	movs	r2, #1
 8008644:	e000      	b.n	8008648 <prvGetNextExpireTime+0x18>
 8008646:	2200      	movs	r2, #0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d105      	bne.n	8008660 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008654:	4b07      	ldr	r3, [pc, #28]	@ (8008674 <prvGetNextExpireTime+0x44>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	e001      	b.n	8008664 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008664:	68fb      	ldr	r3, [r7, #12]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	200010f0 	.word	0x200010f0

08008678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008680:	f7ff fa72 	bl	8007b68 <xTaskGetTickCount>
 8008684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008686:	4b0b      	ldr	r3, [pc, #44]	@ (80086b4 <prvSampleTimeNow+0x3c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	429a      	cmp	r2, r3
 800868e:	d205      	bcs.n	800869c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008690:	f000 f93a 	bl	8008908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	e002      	b.n	80086a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086a2:	4a04      	ldr	r2, [pc, #16]	@ (80086b4 <prvSampleTimeNow+0x3c>)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086a8:	68fb      	ldr	r3, [r7, #12]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20001100 	.word	0x20001100

080086b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d812      	bhi.n	8008704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d302      	bcc.n	80086f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	e01b      	b.n	800872a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086f2:	4b10      	ldr	r3, [pc, #64]	@ (8008734 <prvInsertTimerInActiveList+0x7c>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f7fe f9e6 	bl	8006ace <vListInsert>
 8008702:	e012      	b.n	800872a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d206      	bcs.n	800871a <prvInsertTimerInActiveList+0x62>
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d302      	bcc.n	800871a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008714:	2301      	movs	r3, #1
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e007      	b.n	800872a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800871a:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <prvInsertTimerInActiveList+0x80>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3304      	adds	r3, #4
 8008722:	4619      	mov	r1, r3
 8008724:	4610      	mov	r0, r2
 8008726:	f7fe f9d2 	bl	8006ace <vListInsert>
		}
	}

	return xProcessTimerNow;
 800872a:	697b      	ldr	r3, [r7, #20]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	200010f4 	.word	0x200010f4
 8008738:	200010f0 	.word	0x200010f0

0800873c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08e      	sub	sp, #56	@ 0x38
 8008740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008742:	e0ce      	b.n	80088e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	da19      	bge.n	800877e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800874a:	1d3b      	adds	r3, r7, #4
 800874c:	3304      	adds	r3, #4
 800874e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	61fb      	str	r3, [r7, #28]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008774:	6850      	ldr	r0, [r2, #4]
 8008776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008778:	6892      	ldr	r2, [r2, #8]
 800877a:	4611      	mov	r1, r2
 800877c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f2c0 80ae 	blt.w	80088e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800878a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d004      	beq.n	800879c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008794:	3304      	adds	r3, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe f9d2 	bl	8006b40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800879c:	463b      	mov	r3, r7
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff ff6a 	bl	8008678 <prvSampleTimeNow>
 80087a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b09      	cmp	r3, #9
 80087aa:	f200 8097 	bhi.w	80088dc <prvProcessReceivedCommands+0x1a0>
 80087ae:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <prvProcessReceivedCommands+0x78>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087dd 	.word	0x080087dd
 80087b8:	080087dd 	.word	0x080087dd
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	08008853 	.word	0x08008853
 80087c4:	08008867 	.word	0x08008867
 80087c8:	080088b3 	.word	0x080088b3
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	080087dd 	.word	0x080087dd
 80087d4:	08008853 	.word	0x08008853
 80087d8:	08008867 	.word	0x08008867
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087e2:	f043 0301 	orr.w	r3, r3, #1
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	18d1      	adds	r1, r2, r3
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087fc:	f7ff ff5c 	bl	80086b8 <prvInsertTimerInActiveList>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d06c      	beq.n	80088e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800880c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d061      	beq.n	80088e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	441a      	add	r2, r3
 8008824:	2300      	movs	r3, #0
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	2300      	movs	r3, #0
 800882a:	2100      	movs	r1, #0
 800882c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800882e:	f7ff fe01 	bl	8008434 <xTimerGenericCommand>
 8008832:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d152      	bne.n	80088e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	61bb      	str	r3, [r7, #24]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008858:	f023 0301 	bic.w	r3, r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008864:	e03d      	b.n	80088e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800886c:	f043 0301 	orr.w	r3, r3, #1
 8008870:	b2da      	uxtb	r2, r3
 8008872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	617b      	str	r3, [r7, #20]
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e7fd      	b.n	800889a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	18d1      	adds	r1, r2, r3
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088ac:	f7ff ff04 	bl	80086b8 <prvInsertTimerInActiveList>
					break;
 80088b0:	e017      	b.n	80088e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80088c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c2:	f000 fbe9 	bl	8009098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088c6:	e00c      	b.n	80088e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088da:	e002      	b.n	80088e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80088e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088e2:	4b08      	ldr	r3, [pc, #32]	@ (8008904 <prvProcessReceivedCommands+0x1c8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	1d39      	adds	r1, r7, #4
 80088e8:	2200      	movs	r2, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fbfc 	bl	80070e8 <xQueueReceive>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f47f af26 	bne.w	8008744 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	3730      	adds	r7, #48	@ 0x30
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	200010f8 	.word	0x200010f8

08008908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800890e:	e049      	b.n	80089a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008910:	4b2e      	ldr	r3, [pc, #184]	@ (80089cc <prvSwitchTimerLists+0xc4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891a:	4b2c      	ldr	r3, [pc, #176]	@ (80089cc <prvSwitchTimerLists+0xc4>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe f909 	bl	8006b40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d02f      	beq.n	80089a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4413      	add	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	429a      	cmp	r2, r3
 8008954:	d90e      	bls.n	8008974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008962:	4b1a      	ldr	r3, [pc, #104]	@ (80089cc <prvSwitchTimerLists+0xc4>)
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f7fe f8ae 	bl	8006ace <vListInsert>
 8008972:	e017      	b.n	80089a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008974:	2300      	movs	r3, #0
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	2300      	movs	r3, #0
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	2100      	movs	r1, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff fd58 	bl	8008434 <xTimerGenericCommand>
 8008984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10b      	bne.n	80089a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	603b      	str	r3, [r7, #0]
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	e7fd      	b.n	80089a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089a4:	4b09      	ldr	r3, [pc, #36]	@ (80089cc <prvSwitchTimerLists+0xc4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1b0      	bne.n	8008910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089ae:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <prvSwitchTimerLists+0xc4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089b4:	4b06      	ldr	r3, [pc, #24]	@ (80089d0 <prvSwitchTimerLists+0xc8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a04      	ldr	r2, [pc, #16]	@ (80089cc <prvSwitchTimerLists+0xc4>)
 80089ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089bc:	4a04      	ldr	r2, [pc, #16]	@ (80089d0 <prvSwitchTimerLists+0xc8>)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	6013      	str	r3, [r2, #0]
}
 80089c2:	bf00      	nop
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200010f0 	.word	0x200010f0
 80089d0:	200010f4 	.word	0x200010f4

080089d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089da:	f000 f96d 	bl	8008cb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089de:	4b15      	ldr	r3, [pc, #84]	@ (8008a34 <prvCheckForValidListAndQueue+0x60>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d120      	bne.n	8008a28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089e6:	4814      	ldr	r0, [pc, #80]	@ (8008a38 <prvCheckForValidListAndQueue+0x64>)
 80089e8:	f7fe f820 	bl	8006a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089ec:	4813      	ldr	r0, [pc, #76]	@ (8008a3c <prvCheckForValidListAndQueue+0x68>)
 80089ee:	f7fe f81d 	bl	8006a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089f2:	4b13      	ldr	r3, [pc, #76]	@ (8008a40 <prvCheckForValidListAndQueue+0x6c>)
 80089f4:	4a10      	ldr	r2, [pc, #64]	@ (8008a38 <prvCheckForValidListAndQueue+0x64>)
 80089f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089f8:	4b12      	ldr	r3, [pc, #72]	@ (8008a44 <prvCheckForValidListAndQueue+0x70>)
 80089fa:	4a10      	ldr	r2, [pc, #64]	@ (8008a3c <prvCheckForValidListAndQueue+0x68>)
 80089fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089fe:	2300      	movs	r3, #0
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	4b11      	ldr	r3, [pc, #68]	@ (8008a48 <prvCheckForValidListAndQueue+0x74>)
 8008a04:	4a11      	ldr	r2, [pc, #68]	@ (8008a4c <prvCheckForValidListAndQueue+0x78>)
 8008a06:	2110      	movs	r1, #16
 8008a08:	200a      	movs	r0, #10
 8008a0a:	f7fe f92d 	bl	8006c68 <xQueueGenericCreateStatic>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4a08      	ldr	r2, [pc, #32]	@ (8008a34 <prvCheckForValidListAndQueue+0x60>)
 8008a12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a14:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <prvCheckForValidListAndQueue+0x60>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a1c:	4b05      	ldr	r3, [pc, #20]	@ (8008a34 <prvCheckForValidListAndQueue+0x60>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	490b      	ldr	r1, [pc, #44]	@ (8008a50 <prvCheckForValidListAndQueue+0x7c>)
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fd52 	bl	80074cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a28:	f000 f978 	bl	8008d1c <vPortExitCritical>
}
 8008a2c:	bf00      	nop
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200010f8 	.word	0x200010f8
 8008a38:	200010c8 	.word	0x200010c8
 8008a3c:	200010dc 	.word	0x200010dc
 8008a40:	200010f0 	.word	0x200010f0
 8008a44:	200010f4 	.word	0x200010f4
 8008a48:	200011a4 	.word	0x200011a4
 8008a4c:	20001104 	.word	0x20001104
 8008a50:	0800c004 	.word	0x0800c004

08008a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3b04      	subs	r3, #4
 8008a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3b04      	subs	r3, #4
 8008a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f023 0201 	bic.w	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3b04      	subs	r3, #4
 8008a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a84:	4a0c      	ldr	r2, [pc, #48]	@ (8008ab8 <pxPortInitialiseStack+0x64>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3b14      	subs	r3, #20
 8008a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f06f 0202 	mvn.w	r2, #2
 8008aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3b20      	subs	r3, #32
 8008aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	08008abd 	.word	0x08008abd

08008abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ac6:	4b13      	ldr	r3, [pc, #76]	@ (8008b14 <prvTaskExitError+0x58>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ace:	d00b      	beq.n	8008ae8 <prvTaskExitError+0x2c>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <prvTaskExitError+0x28>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	60bb      	str	r3, [r7, #8]
}
 8008afa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008afc:	bf00      	nop
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d0fc      	beq.n	8008afe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000010 	.word	0x20000010
	...

08008b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b20:	4b07      	ldr	r3, [pc, #28]	@ (8008b40 <pxCurrentTCBConst2>)
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	6808      	ldr	r0, [r1, #0]
 8008b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	f380 8809 	msr	PSP, r0
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f04f 0000 	mov.w	r0, #0
 8008b36:	f380 8811 	msr	BASEPRI, r0
 8008b3a:	4770      	bx	lr
 8008b3c:	f3af 8000 	nop.w

08008b40 <pxCurrentTCBConst2>:
 8008b40:	20000bc8 	.word	0x20000bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b48:	4808      	ldr	r0, [pc, #32]	@ (8008b6c <prvPortStartFirstTask+0x24>)
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	6800      	ldr	r0, [r0, #0]
 8008b4e:	f380 8808 	msr	MSP, r0
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8814 	msr	CONTROL, r0
 8008b5a:	b662      	cpsie	i
 8008b5c:	b661      	cpsie	f
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	df00      	svc	0
 8008b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b6a:	bf00      	nop
 8008b6c:	e000ed08 	.word	0xe000ed08

08008b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b76:	4b47      	ldr	r3, [pc, #284]	@ (8008c94 <xPortStartScheduler+0x124>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a47      	ldr	r2, [pc, #284]	@ (8008c98 <xPortStartScheduler+0x128>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d10b      	bne.n	8008b98 <xPortStartScheduler+0x28>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	613b      	str	r3, [r7, #16]
}
 8008b92:	bf00      	nop
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b98:	4b3e      	ldr	r3, [pc, #248]	@ (8008c94 <xPortStartScheduler+0x124>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c9c <xPortStartScheduler+0x12c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d10b      	bne.n	8008bba <xPortStartScheduler+0x4a>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60fb      	str	r3, [r7, #12]
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bba:	4b39      	ldr	r3, [pc, #228]	@ (8008ca0 <xPortStartScheduler+0x130>)
 8008bbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	22ff      	movs	r2, #255	@ 0xff
 8008bca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b31      	ldr	r3, [pc, #196]	@ (8008ca4 <xPortStartScheduler+0x134>)
 8008be0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008be2:	4b31      	ldr	r3, [pc, #196]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008be4:	2207      	movs	r2, #7
 8008be6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008be8:	e009      	b.n	8008bfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008bea:	4b2f      	ldr	r3, [pc, #188]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008bf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c06:	2b80      	cmp	r3, #128	@ 0x80
 8008c08:	d0ef      	beq.n	8008bea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c0a:	4b27      	ldr	r3, [pc, #156]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f1c3 0307 	rsb	r3, r3, #7
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d00b      	beq.n	8008c2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60bb      	str	r3, [r7, #8]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c38:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c40:	4a19      	ldr	r2, [pc, #100]	@ (8008ca8 <xPortStartScheduler+0x138>)
 8008c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c4c:	4b17      	ldr	r3, [pc, #92]	@ (8008cac <xPortStartScheduler+0x13c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a16      	ldr	r2, [pc, #88]	@ (8008cac <xPortStartScheduler+0x13c>)
 8008c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c58:	4b14      	ldr	r3, [pc, #80]	@ (8008cac <xPortStartScheduler+0x13c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <xPortStartScheduler+0x13c>)
 8008c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c64:	f000 f8da 	bl	8008e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c68:	4b11      	ldr	r3, [pc, #68]	@ (8008cb0 <xPortStartScheduler+0x140>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c6e:	f000 f8f9 	bl	8008e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c72:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <xPortStartScheduler+0x144>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a0f      	ldr	r2, [pc, #60]	@ (8008cb4 <xPortStartScheduler+0x144>)
 8008c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c7e:	f7ff ff63 	bl	8008b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c82:	f7ff f83b 	bl	8007cfc <vTaskSwitchContext>
	prvTaskExitError();
 8008c86:	f7ff ff19 	bl	8008abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	e000ed00 	.word	0xe000ed00
 8008c98:	410fc271 	.word	0x410fc271
 8008c9c:	410fc270 	.word	0x410fc270
 8008ca0:	e000e400 	.word	0xe000e400
 8008ca4:	200011f4 	.word	0x200011f4
 8008ca8:	200011f8 	.word	0x200011f8
 8008cac:	e000ed20 	.word	0xe000ed20
 8008cb0:	20000010 	.word	0x20000010
 8008cb4:	e000ef34 	.word	0xe000ef34

08008cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cd2:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <vPortEnterCritical+0x5c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8008d14 <vPortEnterCritical+0x5c>)
 8008cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <vPortEnterCritical+0x5c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d110      	bne.n	8008d06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d18 <vPortEnterCritical+0x60>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <vPortEnterCritical+0x4e>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	603b      	str	r3, [r7, #0]
}
 8008d00:	bf00      	nop
 8008d02:	bf00      	nop
 8008d04:	e7fd      	b.n	8008d02 <vPortEnterCritical+0x4a>
	}
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000010 	.word	0x20000010
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d22:	4b12      	ldr	r3, [pc, #72]	@ (8008d6c <vPortExitCritical+0x50>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <vPortExitCritical+0x26>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	607b      	str	r3, [r7, #4]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d42:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <vPortExitCritical+0x50>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	4a08      	ldr	r2, [pc, #32]	@ (8008d6c <vPortExitCritical+0x50>)
 8008d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d4c:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <vPortExitCritical+0x50>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <vPortExitCritical+0x44>
 8008d54:	2300      	movs	r3, #0
 8008d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	f383 8811 	msr	BASEPRI, r3
}
 8008d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	20000010 	.word	0x20000010

08008d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d70:	f3ef 8009 	mrs	r0, PSP
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	4b15      	ldr	r3, [pc, #84]	@ (8008dd0 <pxCurrentTCBConst>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	f01e 0f10 	tst.w	lr, #16
 8008d80:	bf08      	it	eq
 8008d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8a:	6010      	str	r0, [r2, #0]
 8008d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d94:	f380 8811 	msr	BASEPRI, r0
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f7fe ffac 	bl	8007cfc <vTaskSwitchContext>
 8008da4:	f04f 0000 	mov.w	r0, #0
 8008da8:	f380 8811 	msr	BASEPRI, r0
 8008dac:	bc09      	pop	{r0, r3}
 8008dae:	6819      	ldr	r1, [r3, #0]
 8008db0:	6808      	ldr	r0, [r1, #0]
 8008db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db6:	f01e 0f10 	tst.w	lr, #16
 8008dba:	bf08      	it	eq
 8008dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008dc0:	f380 8809 	msr	PSP, r0
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w

08008dd0 <pxCurrentTCBConst>:
 8008dd0:	20000bc8 	.word	0x20000bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop

08008dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008df2:	f7fe fec9 	bl	8007b88 <xTaskIncrementTick>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dfc:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <xPortSysTickHandler+0x40>)
 8008dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	2300      	movs	r3, #0
 8008e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f383 8811 	msr	BASEPRI, r3
}
 8008e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e20:	4b0b      	ldr	r3, [pc, #44]	@ (8008e50 <vPortSetupTimerInterrupt+0x34>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e26:	4b0b      	ldr	r3, [pc, #44]	@ (8008e54 <vPortSetupTimerInterrupt+0x38>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <vPortSetupTimerInterrupt+0x3c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a0a      	ldr	r2, [pc, #40]	@ (8008e5c <vPortSetupTimerInterrupt+0x40>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	099b      	lsrs	r3, r3, #6
 8008e38:	4a09      	ldr	r2, [pc, #36]	@ (8008e60 <vPortSetupTimerInterrupt+0x44>)
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e3e:	4b04      	ldr	r3, [pc, #16]	@ (8008e50 <vPortSetupTimerInterrupt+0x34>)
 8008e40:	2207      	movs	r2, #7
 8008e42:	601a      	str	r2, [r3, #0]
}
 8008e44:	bf00      	nop
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	e000e010 	.word	0xe000e010
 8008e54:	e000e018 	.word	0xe000e018
 8008e58:	20000004 	.word	0x20000004
 8008e5c:	10624dd3 	.word	0x10624dd3
 8008e60:	e000e014 	.word	0xe000e014

08008e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e74 <vPortEnableVFP+0x10>
 8008e68:	6801      	ldr	r1, [r0, #0]
 8008e6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e6e:	6001      	str	r1, [r0, #0]
 8008e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e72:	bf00      	nop
 8008e74:	e000ed88 	.word	0xe000ed88

08008e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e7e:	f3ef 8305 	mrs	r3, IPSR
 8008e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b0f      	cmp	r3, #15
 8008e88:	d915      	bls.n	8008eb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e8a:	4a18      	ldr	r2, [pc, #96]	@ (8008eec <vPortValidateInterruptPriority+0x74>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e94:	4b16      	ldr	r3, [pc, #88]	@ (8008ef0 <vPortValidateInterruptPriority+0x78>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	7afa      	ldrb	r2, [r7, #11]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d20b      	bcs.n	8008eb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	607b      	str	r3, [r7, #4]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef4 <vPortValidateInterruptPriority+0x7c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <vPortValidateInterruptPriority+0x80>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d90b      	bls.n	8008ede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	603b      	str	r3, [r7, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <vPortValidateInterruptPriority+0x62>
	}
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	e000e3f0 	.word	0xe000e3f0
 8008ef0:	200011f4 	.word	0x200011f4
 8008ef4:	e000ed0c 	.word	0xe000ed0c
 8008ef8:	200011f8 	.word	0x200011f8

08008efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	@ 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f08:	f7fe fd82 	bl	8007a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8009080 <pvPortMalloc+0x184>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f14:	f000 f924 	bl	8009160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f18:	4b5a      	ldr	r3, [pc, #360]	@ (8009084 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f040 8095 	bne.w	8009050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01e      	beq.n	8008f6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f2c:	2208      	movs	r2, #8
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4413      	add	r3, r2
 8008f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d015      	beq.n	8008f6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f023 0307 	bic.w	r3, r3, #7
 8008f44:	3308      	adds	r3, #8
 8008f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <pvPortMalloc+0x6e>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	617b      	str	r3, [r7, #20]
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d06f      	beq.n	8009050 <pvPortMalloc+0x154>
 8008f70:	4b45      	ldr	r3, [pc, #276]	@ (8009088 <pvPortMalloc+0x18c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d86a      	bhi.n	8009050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f7a:	4b44      	ldr	r3, [pc, #272]	@ (800908c <pvPortMalloc+0x190>)
 8008f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f7e:	4b43      	ldr	r3, [pc, #268]	@ (800908c <pvPortMalloc+0x190>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f84:	e004      	b.n	8008f90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d903      	bls.n	8008fa2 <pvPortMalloc+0xa6>
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f1      	bne.n	8008f86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fa2:	4b37      	ldr	r3, [pc, #220]	@ (8009080 <pvPortMalloc+0x184>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d051      	beq.n	8009050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	4413      	add	r3, r2
 8008fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	1ad2      	subs	r2, r2, r3
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d920      	bls.n	8009010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <pvPortMalloc+0xfc>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	613b      	str	r3, [r7, #16]
}
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
 8008ff6:	e7fd      	b.n	8008ff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800900a:	69b8      	ldr	r0, [r7, #24]
 800900c:	f000 f90a 	bl	8009224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009010:	4b1d      	ldr	r3, [pc, #116]	@ (8009088 <pvPortMalloc+0x18c>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	4a1b      	ldr	r2, [pc, #108]	@ (8009088 <pvPortMalloc+0x18c>)
 800901c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800901e:	4b1a      	ldr	r3, [pc, #104]	@ (8009088 <pvPortMalloc+0x18c>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4b1b      	ldr	r3, [pc, #108]	@ (8009090 <pvPortMalloc+0x194>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d203      	bcs.n	8009032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800902a:	4b17      	ldr	r3, [pc, #92]	@ (8009088 <pvPortMalloc+0x18c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a18      	ldr	r2, [pc, #96]	@ (8009090 <pvPortMalloc+0x194>)
 8009030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4b13      	ldr	r3, [pc, #76]	@ (8009084 <pvPortMalloc+0x188>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	431a      	orrs	r2, r3
 800903c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009046:	4b13      	ldr	r3, [pc, #76]	@ (8009094 <pvPortMalloc+0x198>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	4a11      	ldr	r2, [pc, #68]	@ (8009094 <pvPortMalloc+0x198>)
 800904e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009050:	f7fe fcec 	bl	8007a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <pvPortMalloc+0x17a>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	60fb      	str	r3, [r7, #12]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <pvPortMalloc+0x176>
	return pvReturn;
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3728      	adds	r7, #40	@ 0x28
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20004e04 	.word	0x20004e04
 8009084:	20004e18 	.word	0x20004e18
 8009088:	20004e08 	.word	0x20004e08
 800908c:	20004dfc 	.word	0x20004dfc
 8009090:	20004e0c 	.word	0x20004e0c
 8009094:	20004e10 	.word	0x20004e10

08009098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d04f      	beq.n	800914a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090aa:	2308      	movs	r3, #8
 80090ac:	425b      	negs	r3, r3
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4413      	add	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	4b25      	ldr	r3, [pc, #148]	@ (8009154 <vPortFree+0xbc>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <vPortFree+0x46>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60fb      	str	r3, [r7, #12]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <vPortFree+0x66>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60bb      	str	r3, [r7, #8]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	4b14      	ldr	r3, [pc, #80]	@ (8009154 <vPortFree+0xbc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4013      	ands	r3, r2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01e      	beq.n	800914a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d11a      	bne.n	800914a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	4b0e      	ldr	r3, [pc, #56]	@ (8009154 <vPortFree+0xbc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	43db      	mvns	r3, r3
 800911e:	401a      	ands	r2, r3
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009124:	f7fe fc74 	bl	8007a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <vPortFree+0xc0>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4413      	add	r3, r2
 8009132:	4a09      	ldr	r2, [pc, #36]	@ (8009158 <vPortFree+0xc0>)
 8009134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009136:	6938      	ldr	r0, [r7, #16]
 8009138:	f000 f874 	bl	8009224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800913c:	4b07      	ldr	r3, [pc, #28]	@ (800915c <vPortFree+0xc4>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	4a06      	ldr	r2, [pc, #24]	@ (800915c <vPortFree+0xc4>)
 8009144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009146:	f7fe fc71 	bl	8007a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800914a:	bf00      	nop
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20004e18 	.word	0x20004e18
 8009158:	20004e08 	.word	0x20004e08
 800915c:	20004e14 	.word	0x20004e14

08009160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800916a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800916c:	4b27      	ldr	r3, [pc, #156]	@ (800920c <prvHeapInit+0xac>)
 800916e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00c      	beq.n	8009194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3307      	adds	r3, #7
 800917e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 0307 	bic.w	r3, r3, #7
 8009186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	4a1f      	ldr	r2, [pc, #124]	@ (800920c <prvHeapInit+0xac>)
 8009190:	4413      	add	r3, r2
 8009192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009198:	4a1d      	ldr	r2, [pc, #116]	@ (8009210 <prvHeapInit+0xb0>)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800919e:	4b1c      	ldr	r3, [pc, #112]	@ (8009210 <prvHeapInit+0xb0>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	4413      	add	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091ac:	2208      	movs	r2, #8
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	1a9b      	subs	r3, r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4a15      	ldr	r2, [pc, #84]	@ (8009214 <prvHeapInit+0xb4>)
 80091c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091c2:	4b14      	ldr	r3, [pc, #80]	@ (8009214 <prvHeapInit+0xb4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2200      	movs	r2, #0
 80091c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091ca:	4b12      	ldr	r3, [pc, #72]	@ (8009214 <prvHeapInit+0xb4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	1ad2      	subs	r2, r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <prvHeapInit+0xb4>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009218 <prvHeapInit+0xb8>)
 80091ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	4a09      	ldr	r2, [pc, #36]	@ (800921c <prvHeapInit+0xbc>)
 80091f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091f8:	4b09      	ldr	r3, [pc, #36]	@ (8009220 <prvHeapInit+0xc0>)
 80091fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80091fe:	601a      	str	r2, [r3, #0]
}
 8009200:	bf00      	nop
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	200011fc 	.word	0x200011fc
 8009210:	20004dfc 	.word	0x20004dfc
 8009214:	20004e04 	.word	0x20004e04
 8009218:	20004e0c 	.word	0x20004e0c
 800921c:	20004e08 	.word	0x20004e08
 8009220:	20004e18 	.word	0x20004e18

08009224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800922c:	4b28      	ldr	r3, [pc, #160]	@ (80092d0 <prvInsertBlockIntoFreeList+0xac>)
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	e002      	b.n	8009238 <prvInsertBlockIntoFreeList+0x14>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d8f7      	bhi.n	8009232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d108      	bne.n	8009266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	441a      	add	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	441a      	add	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d118      	bne.n	80092ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	4b15      	ldr	r3, [pc, #84]	@ (80092d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d00d      	beq.n	80092a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	441a      	add	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	e008      	b.n	80092b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092a2:	4b0c      	ldr	r3, [pc, #48]	@ (80092d4 <prvInsertBlockIntoFreeList+0xb0>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e003      	b.n	80092b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d002      	beq.n	80092c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20004dfc 	.word	0x20004dfc
 80092d4:	20004e04 	.word	0x20004e04

080092d8 <__cvt>:
 80092d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	ec57 6b10 	vmov	r6, r7, d0
 80092e0:	2f00      	cmp	r7, #0
 80092e2:	460c      	mov	r4, r1
 80092e4:	4619      	mov	r1, r3
 80092e6:	463b      	mov	r3, r7
 80092e8:	bfbb      	ittet	lt
 80092ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80092ee:	461f      	movlt	r7, r3
 80092f0:	2300      	movge	r3, #0
 80092f2:	232d      	movlt	r3, #45	@ 0x2d
 80092f4:	700b      	strb	r3, [r1, #0]
 80092f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80092fc:	4691      	mov	r9, r2
 80092fe:	f023 0820 	bic.w	r8, r3, #32
 8009302:	bfbc      	itt	lt
 8009304:	4632      	movlt	r2, r6
 8009306:	4616      	movlt	r6, r2
 8009308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800930c:	d005      	beq.n	800931a <__cvt+0x42>
 800930e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009312:	d100      	bne.n	8009316 <__cvt+0x3e>
 8009314:	3401      	adds	r4, #1
 8009316:	2102      	movs	r1, #2
 8009318:	e000      	b.n	800931c <__cvt+0x44>
 800931a:	2103      	movs	r1, #3
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	ab02      	add	r3, sp, #8
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	ec47 6b10 	vmov	d0, r6, r7
 8009328:	4653      	mov	r3, sl
 800932a:	4622      	mov	r2, r4
 800932c:	f000 fe68 	bl	800a000 <_dtoa_r>
 8009330:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009334:	4605      	mov	r5, r0
 8009336:	d119      	bne.n	800936c <__cvt+0x94>
 8009338:	f019 0f01 	tst.w	r9, #1
 800933c:	d00e      	beq.n	800935c <__cvt+0x84>
 800933e:	eb00 0904 	add.w	r9, r0, r4
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	4630      	mov	r0, r6
 8009348:	4639      	mov	r1, r7
 800934a:	f7f7 fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 800934e:	b108      	cbz	r0, 8009354 <__cvt+0x7c>
 8009350:	f8cd 900c 	str.w	r9, [sp, #12]
 8009354:	2230      	movs	r2, #48	@ 0x30
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	454b      	cmp	r3, r9
 800935a:	d31e      	bcc.n	800939a <__cvt+0xc2>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009360:	1b5b      	subs	r3, r3, r5
 8009362:	4628      	mov	r0, r5
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	b004      	add	sp, #16
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009370:	eb00 0904 	add.w	r9, r0, r4
 8009374:	d1e5      	bne.n	8009342 <__cvt+0x6a>
 8009376:	7803      	ldrb	r3, [r0, #0]
 8009378:	2b30      	cmp	r3, #48	@ 0x30
 800937a:	d10a      	bne.n	8009392 <__cvt+0xba>
 800937c:	2200      	movs	r2, #0
 800937e:	2300      	movs	r3, #0
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f7 fbc0 	bl	8000b08 <__aeabi_dcmpeq>
 8009388:	b918      	cbnz	r0, 8009392 <__cvt+0xba>
 800938a:	f1c4 0401 	rsb	r4, r4, #1
 800938e:	f8ca 4000 	str.w	r4, [sl]
 8009392:	f8da 3000 	ldr.w	r3, [sl]
 8009396:	4499      	add	r9, r3
 8009398:	e7d3      	b.n	8009342 <__cvt+0x6a>
 800939a:	1c59      	adds	r1, r3, #1
 800939c:	9103      	str	r1, [sp, #12]
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e7d9      	b.n	8009356 <__cvt+0x7e>

080093a2 <__exponent>:
 80093a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093a4:	2900      	cmp	r1, #0
 80093a6:	bfba      	itte	lt
 80093a8:	4249      	neglt	r1, r1
 80093aa:	232d      	movlt	r3, #45	@ 0x2d
 80093ac:	232b      	movge	r3, #43	@ 0x2b
 80093ae:	2909      	cmp	r1, #9
 80093b0:	7002      	strb	r2, [r0, #0]
 80093b2:	7043      	strb	r3, [r0, #1]
 80093b4:	dd29      	ble.n	800940a <__exponent+0x68>
 80093b6:	f10d 0307 	add.w	r3, sp, #7
 80093ba:	461d      	mov	r5, r3
 80093bc:	270a      	movs	r7, #10
 80093be:	461a      	mov	r2, r3
 80093c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80093c4:	fb07 1416 	mls	r4, r7, r6, r1
 80093c8:	3430      	adds	r4, #48	@ 0x30
 80093ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80093ce:	460c      	mov	r4, r1
 80093d0:	2c63      	cmp	r4, #99	@ 0x63
 80093d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80093d6:	4631      	mov	r1, r6
 80093d8:	dcf1      	bgt.n	80093be <__exponent+0x1c>
 80093da:	3130      	adds	r1, #48	@ 0x30
 80093dc:	1e94      	subs	r4, r2, #2
 80093de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093e2:	1c41      	adds	r1, r0, #1
 80093e4:	4623      	mov	r3, r4
 80093e6:	42ab      	cmp	r3, r5
 80093e8:	d30a      	bcc.n	8009400 <__exponent+0x5e>
 80093ea:	f10d 0309 	add.w	r3, sp, #9
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	42ac      	cmp	r4, r5
 80093f2:	bf88      	it	hi
 80093f4:	2300      	movhi	r3, #0
 80093f6:	3302      	adds	r3, #2
 80093f8:	4403      	add	r3, r0
 80093fa:	1a18      	subs	r0, r3, r0
 80093fc:	b003      	add	sp, #12
 80093fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009400:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009404:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009408:	e7ed      	b.n	80093e6 <__exponent+0x44>
 800940a:	2330      	movs	r3, #48	@ 0x30
 800940c:	3130      	adds	r1, #48	@ 0x30
 800940e:	7083      	strb	r3, [r0, #2]
 8009410:	70c1      	strb	r1, [r0, #3]
 8009412:	1d03      	adds	r3, r0, #4
 8009414:	e7f1      	b.n	80093fa <__exponent+0x58>
	...

08009418 <_printf_float>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	b08d      	sub	sp, #52	@ 0x34
 800941e:	460c      	mov	r4, r1
 8009420:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009424:	4616      	mov	r6, r2
 8009426:	461f      	mov	r7, r3
 8009428:	4605      	mov	r5, r0
 800942a:	f000 fcdb 	bl	8009de4 <_localeconv_r>
 800942e:	6803      	ldr	r3, [r0, #0]
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	4618      	mov	r0, r3
 8009434:	f7f6 ff3c 	bl	80002b0 <strlen>
 8009438:	2300      	movs	r3, #0
 800943a:	930a      	str	r3, [sp, #40]	@ 0x28
 800943c:	f8d8 3000 	ldr.w	r3, [r8]
 8009440:	9005      	str	r0, [sp, #20]
 8009442:	3307      	adds	r3, #7
 8009444:	f023 0307 	bic.w	r3, r3, #7
 8009448:	f103 0208 	add.w	r2, r3, #8
 800944c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009450:	f8d4 b000 	ldr.w	fp, [r4]
 8009454:	f8c8 2000 	str.w	r2, [r8]
 8009458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800945c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009460:	9307      	str	r3, [sp, #28]
 8009462:	f8cd 8018 	str.w	r8, [sp, #24]
 8009466:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800946a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800946e:	4b9c      	ldr	r3, [pc, #624]	@ (80096e0 <_printf_float+0x2c8>)
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	f7f7 fb7a 	bl	8000b6c <__aeabi_dcmpun>
 8009478:	bb70      	cbnz	r0, 80094d8 <_printf_float+0xc0>
 800947a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800947e:	4b98      	ldr	r3, [pc, #608]	@ (80096e0 <_printf_float+0x2c8>)
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	f7f7 fb54 	bl	8000b30 <__aeabi_dcmple>
 8009488:	bb30      	cbnz	r0, 80094d8 <_printf_float+0xc0>
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	4640      	mov	r0, r8
 8009490:	4649      	mov	r1, r9
 8009492:	f7f7 fb43 	bl	8000b1c <__aeabi_dcmplt>
 8009496:	b110      	cbz	r0, 800949e <_printf_float+0x86>
 8009498:	232d      	movs	r3, #45	@ 0x2d
 800949a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800949e:	4a91      	ldr	r2, [pc, #580]	@ (80096e4 <_printf_float+0x2cc>)
 80094a0:	4b91      	ldr	r3, [pc, #580]	@ (80096e8 <_printf_float+0x2d0>)
 80094a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094a6:	bf94      	ite	ls
 80094a8:	4690      	movls	r8, r2
 80094aa:	4698      	movhi	r8, r3
 80094ac:	2303      	movs	r3, #3
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	f02b 0304 	bic.w	r3, fp, #4
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	f04f 0900 	mov.w	r9, #0
 80094ba:	9700      	str	r7, [sp, #0]
 80094bc:	4633      	mov	r3, r6
 80094be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 f9d2 	bl	800986c <_printf_common>
 80094c8:	3001      	adds	r0, #1
 80094ca:	f040 808d 	bne.w	80095e8 <_printf_float+0x1d0>
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295
 80094d2:	b00d      	add	sp, #52	@ 0x34
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f7 fb44 	bl	8000b6c <__aeabi_dcmpun>
 80094e4:	b140      	cbz	r0, 80094f8 <_printf_float+0xe0>
 80094e6:	464b      	mov	r3, r9
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bfbc      	itt	lt
 80094ec:	232d      	movlt	r3, #45	@ 0x2d
 80094ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80094f2:	4a7e      	ldr	r2, [pc, #504]	@ (80096ec <_printf_float+0x2d4>)
 80094f4:	4b7e      	ldr	r3, [pc, #504]	@ (80096f0 <_printf_float+0x2d8>)
 80094f6:	e7d4      	b.n	80094a2 <_printf_float+0x8a>
 80094f8:	6863      	ldr	r3, [r4, #4]
 80094fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80094fe:	9206      	str	r2, [sp, #24]
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	d13b      	bne.n	800957c <_printf_float+0x164>
 8009504:	2306      	movs	r3, #6
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800950c:	2300      	movs	r3, #0
 800950e:	6022      	str	r2, [r4, #0]
 8009510:	9303      	str	r3, [sp, #12]
 8009512:	ab0a      	add	r3, sp, #40	@ 0x28
 8009514:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009518:	ab09      	add	r3, sp, #36	@ 0x24
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	ec49 8b10 	vmov	d0, r8, r9
 8009522:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009526:	4628      	mov	r0, r5
 8009528:	f7ff fed6 	bl	80092d8 <__cvt>
 800952c:	9b06      	ldr	r3, [sp, #24]
 800952e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009530:	2b47      	cmp	r3, #71	@ 0x47
 8009532:	4680      	mov	r8, r0
 8009534:	d129      	bne.n	800958a <_printf_float+0x172>
 8009536:	1cc8      	adds	r0, r1, #3
 8009538:	db02      	blt.n	8009540 <_printf_float+0x128>
 800953a:	6863      	ldr	r3, [r4, #4]
 800953c:	4299      	cmp	r1, r3
 800953e:	dd41      	ble.n	80095c4 <_printf_float+0x1ac>
 8009540:	f1aa 0a02 	sub.w	sl, sl, #2
 8009544:	fa5f fa8a 	uxtb.w	sl, sl
 8009548:	3901      	subs	r1, #1
 800954a:	4652      	mov	r2, sl
 800954c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009550:	9109      	str	r1, [sp, #36]	@ 0x24
 8009552:	f7ff ff26 	bl	80093a2 <__exponent>
 8009556:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009558:	1813      	adds	r3, r2, r0
 800955a:	2a01      	cmp	r2, #1
 800955c:	4681      	mov	r9, r0
 800955e:	6123      	str	r3, [r4, #16]
 8009560:	dc02      	bgt.n	8009568 <_printf_float+0x150>
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	07d2      	lsls	r2, r2, #31
 8009566:	d501      	bpl.n	800956c <_printf_float+0x154>
 8009568:	3301      	adds	r3, #1
 800956a:	6123      	str	r3, [r4, #16]
 800956c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0a2      	beq.n	80094ba <_printf_float+0xa2>
 8009574:	232d      	movs	r3, #45	@ 0x2d
 8009576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800957a:	e79e      	b.n	80094ba <_printf_float+0xa2>
 800957c:	9a06      	ldr	r2, [sp, #24]
 800957e:	2a47      	cmp	r2, #71	@ 0x47
 8009580:	d1c2      	bne.n	8009508 <_printf_float+0xf0>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1c0      	bne.n	8009508 <_printf_float+0xf0>
 8009586:	2301      	movs	r3, #1
 8009588:	e7bd      	b.n	8009506 <_printf_float+0xee>
 800958a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800958e:	d9db      	bls.n	8009548 <_printf_float+0x130>
 8009590:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009594:	d118      	bne.n	80095c8 <_printf_float+0x1b0>
 8009596:	2900      	cmp	r1, #0
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	dd0b      	ble.n	80095b4 <_printf_float+0x19c>
 800959c:	6121      	str	r1, [r4, #16]
 800959e:	b913      	cbnz	r3, 80095a6 <_printf_float+0x18e>
 80095a0:	6822      	ldr	r2, [r4, #0]
 80095a2:	07d0      	lsls	r0, r2, #31
 80095a4:	d502      	bpl.n	80095ac <_printf_float+0x194>
 80095a6:	3301      	adds	r3, #1
 80095a8:	440b      	add	r3, r1
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095ae:	f04f 0900 	mov.w	r9, #0
 80095b2:	e7db      	b.n	800956c <_printf_float+0x154>
 80095b4:	b913      	cbnz	r3, 80095bc <_printf_float+0x1a4>
 80095b6:	6822      	ldr	r2, [r4, #0]
 80095b8:	07d2      	lsls	r2, r2, #31
 80095ba:	d501      	bpl.n	80095c0 <_printf_float+0x1a8>
 80095bc:	3302      	adds	r3, #2
 80095be:	e7f4      	b.n	80095aa <_printf_float+0x192>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e7f2      	b.n	80095aa <_printf_float+0x192>
 80095c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80095c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ca:	4299      	cmp	r1, r3
 80095cc:	db05      	blt.n	80095da <_printf_float+0x1c2>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6121      	str	r1, [r4, #16]
 80095d2:	07d8      	lsls	r0, r3, #31
 80095d4:	d5ea      	bpl.n	80095ac <_printf_float+0x194>
 80095d6:	1c4b      	adds	r3, r1, #1
 80095d8:	e7e7      	b.n	80095aa <_printf_float+0x192>
 80095da:	2900      	cmp	r1, #0
 80095dc:	bfd4      	ite	le
 80095de:	f1c1 0202 	rsble	r2, r1, #2
 80095e2:	2201      	movgt	r2, #1
 80095e4:	4413      	add	r3, r2
 80095e6:	e7e0      	b.n	80095aa <_printf_float+0x192>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	055a      	lsls	r2, r3, #21
 80095ec:	d407      	bmi.n	80095fe <_printf_float+0x1e6>
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	4642      	mov	r2, r8
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	d12b      	bne.n	8009654 <_printf_float+0x23c>
 80095fc:	e767      	b.n	80094ce <_printf_float+0xb6>
 80095fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009602:	f240 80dd 	bls.w	80097c0 <_printf_float+0x3a8>
 8009606:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	f7f7 fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 8009612:	2800      	cmp	r0, #0
 8009614:	d033      	beq.n	800967e <_printf_float+0x266>
 8009616:	4a37      	ldr	r2, [pc, #220]	@ (80096f4 <_printf_float+0x2dc>)
 8009618:	2301      	movs	r3, #1
 800961a:	4631      	mov	r1, r6
 800961c:	4628      	mov	r0, r5
 800961e:	47b8      	blx	r7
 8009620:	3001      	adds	r0, #1
 8009622:	f43f af54 	beq.w	80094ce <_printf_float+0xb6>
 8009626:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800962a:	4543      	cmp	r3, r8
 800962c:	db02      	blt.n	8009634 <_printf_float+0x21c>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	07d8      	lsls	r0, r3, #31
 8009632:	d50f      	bpl.n	8009654 <_printf_float+0x23c>
 8009634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009638:	4631      	mov	r1, r6
 800963a:	4628      	mov	r0, r5
 800963c:	47b8      	blx	r7
 800963e:	3001      	adds	r0, #1
 8009640:	f43f af45 	beq.w	80094ce <_printf_float+0xb6>
 8009644:	f04f 0900 	mov.w	r9, #0
 8009648:	f108 38ff 	add.w	r8, r8, #4294967295
 800964c:	f104 0a1a 	add.w	sl, r4, #26
 8009650:	45c8      	cmp	r8, r9
 8009652:	dc09      	bgt.n	8009668 <_printf_float+0x250>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	079b      	lsls	r3, r3, #30
 8009658:	f100 8103 	bmi.w	8009862 <_printf_float+0x44a>
 800965c:	68e0      	ldr	r0, [r4, #12]
 800965e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009660:	4298      	cmp	r0, r3
 8009662:	bfb8      	it	lt
 8009664:	4618      	movlt	r0, r3
 8009666:	e734      	b.n	80094d2 <_printf_float+0xba>
 8009668:	2301      	movs	r3, #1
 800966a:	4652      	mov	r2, sl
 800966c:	4631      	mov	r1, r6
 800966e:	4628      	mov	r0, r5
 8009670:	47b8      	blx	r7
 8009672:	3001      	adds	r0, #1
 8009674:	f43f af2b 	beq.w	80094ce <_printf_float+0xb6>
 8009678:	f109 0901 	add.w	r9, r9, #1
 800967c:	e7e8      	b.n	8009650 <_printf_float+0x238>
 800967e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc39      	bgt.n	80096f8 <_printf_float+0x2e0>
 8009684:	4a1b      	ldr	r2, [pc, #108]	@ (80096f4 <_printf_float+0x2dc>)
 8009686:	2301      	movs	r3, #1
 8009688:	4631      	mov	r1, r6
 800968a:	4628      	mov	r0, r5
 800968c:	47b8      	blx	r7
 800968e:	3001      	adds	r0, #1
 8009690:	f43f af1d 	beq.w	80094ce <_printf_float+0xb6>
 8009694:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009698:	ea59 0303 	orrs.w	r3, r9, r3
 800969c:	d102      	bne.n	80096a4 <_printf_float+0x28c>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	07d9      	lsls	r1, r3, #31
 80096a2:	d5d7      	bpl.n	8009654 <_printf_float+0x23c>
 80096a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096a8:	4631      	mov	r1, r6
 80096aa:	4628      	mov	r0, r5
 80096ac:	47b8      	blx	r7
 80096ae:	3001      	adds	r0, #1
 80096b0:	f43f af0d 	beq.w	80094ce <_printf_float+0xb6>
 80096b4:	f04f 0a00 	mov.w	sl, #0
 80096b8:	f104 0b1a 	add.w	fp, r4, #26
 80096bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096be:	425b      	negs	r3, r3
 80096c0:	4553      	cmp	r3, sl
 80096c2:	dc01      	bgt.n	80096c8 <_printf_float+0x2b0>
 80096c4:	464b      	mov	r3, r9
 80096c6:	e793      	b.n	80095f0 <_printf_float+0x1d8>
 80096c8:	2301      	movs	r3, #1
 80096ca:	465a      	mov	r2, fp
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f aefb 	beq.w	80094ce <_printf_float+0xb6>
 80096d8:	f10a 0a01 	add.w	sl, sl, #1
 80096dc:	e7ee      	b.n	80096bc <_printf_float+0x2a4>
 80096de:	bf00      	nop
 80096e0:	7fefffff 	.word	0x7fefffff
 80096e4:	0800c0fc 	.word	0x0800c0fc
 80096e8:	0800c100 	.word	0x0800c100
 80096ec:	0800c104 	.word	0x0800c104
 80096f0:	0800c108 	.word	0x0800c108
 80096f4:	0800c10c 	.word	0x0800c10c
 80096f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80096fe:	4553      	cmp	r3, sl
 8009700:	bfa8      	it	ge
 8009702:	4653      	movge	r3, sl
 8009704:	2b00      	cmp	r3, #0
 8009706:	4699      	mov	r9, r3
 8009708:	dc36      	bgt.n	8009778 <_printf_float+0x360>
 800970a:	f04f 0b00 	mov.w	fp, #0
 800970e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009712:	f104 021a 	add.w	r2, r4, #26
 8009716:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009718:	9306      	str	r3, [sp, #24]
 800971a:	eba3 0309 	sub.w	r3, r3, r9
 800971e:	455b      	cmp	r3, fp
 8009720:	dc31      	bgt.n	8009786 <_printf_float+0x36e>
 8009722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009724:	459a      	cmp	sl, r3
 8009726:	dc3a      	bgt.n	800979e <_printf_float+0x386>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	07da      	lsls	r2, r3, #31
 800972c:	d437      	bmi.n	800979e <_printf_float+0x386>
 800972e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009730:	ebaa 0903 	sub.w	r9, sl, r3
 8009734:	9b06      	ldr	r3, [sp, #24]
 8009736:	ebaa 0303 	sub.w	r3, sl, r3
 800973a:	4599      	cmp	r9, r3
 800973c:	bfa8      	it	ge
 800973e:	4699      	movge	r9, r3
 8009740:	f1b9 0f00 	cmp.w	r9, #0
 8009744:	dc33      	bgt.n	80097ae <_printf_float+0x396>
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800974e:	f104 0b1a 	add.w	fp, r4, #26
 8009752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009754:	ebaa 0303 	sub.w	r3, sl, r3
 8009758:	eba3 0309 	sub.w	r3, r3, r9
 800975c:	4543      	cmp	r3, r8
 800975e:	f77f af79 	ble.w	8009654 <_printf_float+0x23c>
 8009762:	2301      	movs	r3, #1
 8009764:	465a      	mov	r2, fp
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	f43f aeae 	beq.w	80094ce <_printf_float+0xb6>
 8009772:	f108 0801 	add.w	r8, r8, #1
 8009776:	e7ec      	b.n	8009752 <_printf_float+0x33a>
 8009778:	4642      	mov	r2, r8
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	d1c2      	bne.n	800970a <_printf_float+0x2f2>
 8009784:	e6a3      	b.n	80094ce <_printf_float+0xb6>
 8009786:	2301      	movs	r3, #1
 8009788:	4631      	mov	r1, r6
 800978a:	4628      	mov	r0, r5
 800978c:	9206      	str	r2, [sp, #24]
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	f43f ae9c 	beq.w	80094ce <_printf_float+0xb6>
 8009796:	9a06      	ldr	r2, [sp, #24]
 8009798:	f10b 0b01 	add.w	fp, fp, #1
 800979c:	e7bb      	b.n	8009716 <_printf_float+0x2fe>
 800979e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097a2:	4631      	mov	r1, r6
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	d1c0      	bne.n	800972e <_printf_float+0x316>
 80097ac:	e68f      	b.n	80094ce <_printf_float+0xb6>
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	464b      	mov	r3, r9
 80097b2:	4442      	add	r2, r8
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	d1c3      	bne.n	8009746 <_printf_float+0x32e>
 80097be:	e686      	b.n	80094ce <_printf_float+0xb6>
 80097c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097c4:	f1ba 0f01 	cmp.w	sl, #1
 80097c8:	dc01      	bgt.n	80097ce <_printf_float+0x3b6>
 80097ca:	07db      	lsls	r3, r3, #31
 80097cc:	d536      	bpl.n	800983c <_printf_float+0x424>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4642      	mov	r2, r8
 80097d2:	4631      	mov	r1, r6
 80097d4:	4628      	mov	r0, r5
 80097d6:	47b8      	blx	r7
 80097d8:	3001      	adds	r0, #1
 80097da:	f43f ae78 	beq.w	80094ce <_printf_float+0xb6>
 80097de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e2:	4631      	mov	r1, r6
 80097e4:	4628      	mov	r0, r5
 80097e6:	47b8      	blx	r7
 80097e8:	3001      	adds	r0, #1
 80097ea:	f43f ae70 	beq.w	80094ce <_printf_float+0xb6>
 80097ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097f2:	2200      	movs	r2, #0
 80097f4:	2300      	movs	r3, #0
 80097f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097fa:	f7f7 f985 	bl	8000b08 <__aeabi_dcmpeq>
 80097fe:	b9c0      	cbnz	r0, 8009832 <_printf_float+0x41a>
 8009800:	4653      	mov	r3, sl
 8009802:	f108 0201 	add.w	r2, r8, #1
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	d10c      	bne.n	800982a <_printf_float+0x412>
 8009810:	e65d      	b.n	80094ce <_printf_float+0xb6>
 8009812:	2301      	movs	r3, #1
 8009814:	465a      	mov	r2, fp
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47b8      	blx	r7
 800981c:	3001      	adds	r0, #1
 800981e:	f43f ae56 	beq.w	80094ce <_printf_float+0xb6>
 8009822:	f108 0801 	add.w	r8, r8, #1
 8009826:	45d0      	cmp	r8, sl
 8009828:	dbf3      	blt.n	8009812 <_printf_float+0x3fa>
 800982a:	464b      	mov	r3, r9
 800982c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009830:	e6df      	b.n	80095f2 <_printf_float+0x1da>
 8009832:	f04f 0800 	mov.w	r8, #0
 8009836:	f104 0b1a 	add.w	fp, r4, #26
 800983a:	e7f4      	b.n	8009826 <_printf_float+0x40e>
 800983c:	2301      	movs	r3, #1
 800983e:	4642      	mov	r2, r8
 8009840:	e7e1      	b.n	8009806 <_printf_float+0x3ee>
 8009842:	2301      	movs	r3, #1
 8009844:	464a      	mov	r2, r9
 8009846:	4631      	mov	r1, r6
 8009848:	4628      	mov	r0, r5
 800984a:	47b8      	blx	r7
 800984c:	3001      	adds	r0, #1
 800984e:	f43f ae3e 	beq.w	80094ce <_printf_float+0xb6>
 8009852:	f108 0801 	add.w	r8, r8, #1
 8009856:	68e3      	ldr	r3, [r4, #12]
 8009858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800985a:	1a5b      	subs	r3, r3, r1
 800985c:	4543      	cmp	r3, r8
 800985e:	dcf0      	bgt.n	8009842 <_printf_float+0x42a>
 8009860:	e6fc      	b.n	800965c <_printf_float+0x244>
 8009862:	f04f 0800 	mov.w	r8, #0
 8009866:	f104 0919 	add.w	r9, r4, #25
 800986a:	e7f4      	b.n	8009856 <_printf_float+0x43e>

0800986c <_printf_common>:
 800986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	4616      	mov	r6, r2
 8009872:	4698      	mov	r8, r3
 8009874:	688a      	ldr	r2, [r1, #8]
 8009876:	690b      	ldr	r3, [r1, #16]
 8009878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800987c:	4293      	cmp	r3, r2
 800987e:	bfb8      	it	lt
 8009880:	4613      	movlt	r3, r2
 8009882:	6033      	str	r3, [r6, #0]
 8009884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009888:	4607      	mov	r7, r0
 800988a:	460c      	mov	r4, r1
 800988c:	b10a      	cbz	r2, 8009892 <_printf_common+0x26>
 800988e:	3301      	adds	r3, #1
 8009890:	6033      	str	r3, [r6, #0]
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	0699      	lsls	r1, r3, #26
 8009896:	bf42      	ittt	mi
 8009898:	6833      	ldrmi	r3, [r6, #0]
 800989a:	3302      	addmi	r3, #2
 800989c:	6033      	strmi	r3, [r6, #0]
 800989e:	6825      	ldr	r5, [r4, #0]
 80098a0:	f015 0506 	ands.w	r5, r5, #6
 80098a4:	d106      	bne.n	80098b4 <_printf_common+0x48>
 80098a6:	f104 0a19 	add.w	sl, r4, #25
 80098aa:	68e3      	ldr	r3, [r4, #12]
 80098ac:	6832      	ldr	r2, [r6, #0]
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	dc26      	bgt.n	8009902 <_printf_common+0x96>
 80098b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098b8:	6822      	ldr	r2, [r4, #0]
 80098ba:	3b00      	subs	r3, #0
 80098bc:	bf18      	it	ne
 80098be:	2301      	movne	r3, #1
 80098c0:	0692      	lsls	r2, r2, #26
 80098c2:	d42b      	bmi.n	800991c <_printf_common+0xb0>
 80098c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098c8:	4641      	mov	r1, r8
 80098ca:	4638      	mov	r0, r7
 80098cc:	47c8      	blx	r9
 80098ce:	3001      	adds	r0, #1
 80098d0:	d01e      	beq.n	8009910 <_printf_common+0xa4>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	f003 0306 	and.w	r3, r3, #6
 80098da:	2b04      	cmp	r3, #4
 80098dc:	bf02      	ittt	eq
 80098de:	68e5      	ldreq	r5, [r4, #12]
 80098e0:	6833      	ldreq	r3, [r6, #0]
 80098e2:	1aed      	subeq	r5, r5, r3
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	bf0c      	ite	eq
 80098e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098ec:	2500      	movne	r5, #0
 80098ee:	4293      	cmp	r3, r2
 80098f0:	bfc4      	itt	gt
 80098f2:	1a9b      	subgt	r3, r3, r2
 80098f4:	18ed      	addgt	r5, r5, r3
 80098f6:	2600      	movs	r6, #0
 80098f8:	341a      	adds	r4, #26
 80098fa:	42b5      	cmp	r5, r6
 80098fc:	d11a      	bne.n	8009934 <_printf_common+0xc8>
 80098fe:	2000      	movs	r0, #0
 8009900:	e008      	b.n	8009914 <_printf_common+0xa8>
 8009902:	2301      	movs	r3, #1
 8009904:	4652      	mov	r2, sl
 8009906:	4641      	mov	r1, r8
 8009908:	4638      	mov	r0, r7
 800990a:	47c8      	blx	r9
 800990c:	3001      	adds	r0, #1
 800990e:	d103      	bne.n	8009918 <_printf_common+0xac>
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009918:	3501      	adds	r5, #1
 800991a:	e7c6      	b.n	80098aa <_printf_common+0x3e>
 800991c:	18e1      	adds	r1, r4, r3
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	2030      	movs	r0, #48	@ 0x30
 8009922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009926:	4422      	add	r2, r4
 8009928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800992c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009930:	3302      	adds	r3, #2
 8009932:	e7c7      	b.n	80098c4 <_printf_common+0x58>
 8009934:	2301      	movs	r3, #1
 8009936:	4622      	mov	r2, r4
 8009938:	4641      	mov	r1, r8
 800993a:	4638      	mov	r0, r7
 800993c:	47c8      	blx	r9
 800993e:	3001      	adds	r0, #1
 8009940:	d0e6      	beq.n	8009910 <_printf_common+0xa4>
 8009942:	3601      	adds	r6, #1
 8009944:	e7d9      	b.n	80098fa <_printf_common+0x8e>
	...

08009948 <_printf_i>:
 8009948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800994c:	7e0f      	ldrb	r7, [r1, #24]
 800994e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009950:	2f78      	cmp	r7, #120	@ 0x78
 8009952:	4691      	mov	r9, r2
 8009954:	4680      	mov	r8, r0
 8009956:	460c      	mov	r4, r1
 8009958:	469a      	mov	sl, r3
 800995a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800995e:	d807      	bhi.n	8009970 <_printf_i+0x28>
 8009960:	2f62      	cmp	r7, #98	@ 0x62
 8009962:	d80a      	bhi.n	800997a <_printf_i+0x32>
 8009964:	2f00      	cmp	r7, #0
 8009966:	f000 80d2 	beq.w	8009b0e <_printf_i+0x1c6>
 800996a:	2f58      	cmp	r7, #88	@ 0x58
 800996c:	f000 80b9 	beq.w	8009ae2 <_printf_i+0x19a>
 8009970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009978:	e03a      	b.n	80099f0 <_printf_i+0xa8>
 800997a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800997e:	2b15      	cmp	r3, #21
 8009980:	d8f6      	bhi.n	8009970 <_printf_i+0x28>
 8009982:	a101      	add	r1, pc, #4	@ (adr r1, 8009988 <_printf_i+0x40>)
 8009984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099f5 	.word	0x080099f5
 8009990:	08009971 	.word	0x08009971
 8009994:	08009971 	.word	0x08009971
 8009998:	08009971 	.word	0x08009971
 800999c:	08009971 	.word	0x08009971
 80099a0:	080099f5 	.word	0x080099f5
 80099a4:	08009971 	.word	0x08009971
 80099a8:	08009971 	.word	0x08009971
 80099ac:	08009971 	.word	0x08009971
 80099b0:	08009971 	.word	0x08009971
 80099b4:	08009af5 	.word	0x08009af5
 80099b8:	08009a1f 	.word	0x08009a1f
 80099bc:	08009aaf 	.word	0x08009aaf
 80099c0:	08009971 	.word	0x08009971
 80099c4:	08009971 	.word	0x08009971
 80099c8:	08009b17 	.word	0x08009b17
 80099cc:	08009971 	.word	0x08009971
 80099d0:	08009a1f 	.word	0x08009a1f
 80099d4:	08009971 	.word	0x08009971
 80099d8:	08009971 	.word	0x08009971
 80099dc:	08009ab7 	.word	0x08009ab7
 80099e0:	6833      	ldr	r3, [r6, #0]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6032      	str	r2, [r6, #0]
 80099e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099f0:	2301      	movs	r3, #1
 80099f2:	e09d      	b.n	8009b30 <_printf_i+0x1e8>
 80099f4:	6833      	ldr	r3, [r6, #0]
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	1d19      	adds	r1, r3, #4
 80099fa:	6031      	str	r1, [r6, #0]
 80099fc:	0606      	lsls	r6, r0, #24
 80099fe:	d501      	bpl.n	8009a04 <_printf_i+0xbc>
 8009a00:	681d      	ldr	r5, [r3, #0]
 8009a02:	e003      	b.n	8009a0c <_printf_i+0xc4>
 8009a04:	0645      	lsls	r5, r0, #25
 8009a06:	d5fb      	bpl.n	8009a00 <_printf_i+0xb8>
 8009a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	da03      	bge.n	8009a18 <_printf_i+0xd0>
 8009a10:	232d      	movs	r3, #45	@ 0x2d
 8009a12:	426d      	negs	r5, r5
 8009a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a18:	4859      	ldr	r0, [pc, #356]	@ (8009b80 <_printf_i+0x238>)
 8009a1a:	230a      	movs	r3, #10
 8009a1c:	e011      	b.n	8009a42 <_printf_i+0xfa>
 8009a1e:	6821      	ldr	r1, [r4, #0]
 8009a20:	6833      	ldr	r3, [r6, #0]
 8009a22:	0608      	lsls	r0, r1, #24
 8009a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a28:	d402      	bmi.n	8009a30 <_printf_i+0xe8>
 8009a2a:	0649      	lsls	r1, r1, #25
 8009a2c:	bf48      	it	mi
 8009a2e:	b2ad      	uxthmi	r5, r5
 8009a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a32:	4853      	ldr	r0, [pc, #332]	@ (8009b80 <_printf_i+0x238>)
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	bf14      	ite	ne
 8009a38:	230a      	movne	r3, #10
 8009a3a:	2308      	moveq	r3, #8
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a42:	6866      	ldr	r6, [r4, #4]
 8009a44:	60a6      	str	r6, [r4, #8]
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	bfa2      	ittt	ge
 8009a4a:	6821      	ldrge	r1, [r4, #0]
 8009a4c:	f021 0104 	bicge.w	r1, r1, #4
 8009a50:	6021      	strge	r1, [r4, #0]
 8009a52:	b90d      	cbnz	r5, 8009a58 <_printf_i+0x110>
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	d04b      	beq.n	8009af0 <_printf_i+0x1a8>
 8009a58:	4616      	mov	r6, r2
 8009a5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009a62:	5dc7      	ldrb	r7, [r0, r7]
 8009a64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a68:	462f      	mov	r7, r5
 8009a6a:	42bb      	cmp	r3, r7
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	d9f4      	bls.n	8009a5a <_printf_i+0x112>
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d10b      	bne.n	8009a8c <_printf_i+0x144>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	07df      	lsls	r7, r3, #31
 8009a78:	d508      	bpl.n	8009a8c <_printf_i+0x144>
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	6861      	ldr	r1, [r4, #4]
 8009a7e:	4299      	cmp	r1, r3
 8009a80:	bfde      	ittt	le
 8009a82:	2330      	movle	r3, #48	@ 0x30
 8009a84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a8c:	1b92      	subs	r2, r2, r6
 8009a8e:	6122      	str	r2, [r4, #16]
 8009a90:	f8cd a000 	str.w	sl, [sp]
 8009a94:	464b      	mov	r3, r9
 8009a96:	aa03      	add	r2, sp, #12
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7ff fee6 	bl	800986c <_printf_common>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d14a      	bne.n	8009b3a <_printf_i+0x1f2>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b004      	add	sp, #16
 8009aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	f043 0320 	orr.w	r3, r3, #32
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	4833      	ldr	r0, [pc, #204]	@ (8009b84 <_printf_i+0x23c>)
 8009ab8:	2778      	movs	r7, #120	@ 0x78
 8009aba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	6831      	ldr	r1, [r6, #0]
 8009ac2:	061f      	lsls	r7, r3, #24
 8009ac4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ac8:	d402      	bmi.n	8009ad0 <_printf_i+0x188>
 8009aca:	065f      	lsls	r7, r3, #25
 8009acc:	bf48      	it	mi
 8009ace:	b2ad      	uxthmi	r5, r5
 8009ad0:	6031      	str	r1, [r6, #0]
 8009ad2:	07d9      	lsls	r1, r3, #31
 8009ad4:	bf44      	itt	mi
 8009ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8009ada:	6023      	strmi	r3, [r4, #0]
 8009adc:	b11d      	cbz	r5, 8009ae6 <_printf_i+0x19e>
 8009ade:	2310      	movs	r3, #16
 8009ae0:	e7ac      	b.n	8009a3c <_printf_i+0xf4>
 8009ae2:	4827      	ldr	r0, [pc, #156]	@ (8009b80 <_printf_i+0x238>)
 8009ae4:	e7e9      	b.n	8009aba <_printf_i+0x172>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f023 0320 	bic.w	r3, r3, #32
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	e7f6      	b.n	8009ade <_printf_i+0x196>
 8009af0:	4616      	mov	r6, r2
 8009af2:	e7bd      	b.n	8009a70 <_printf_i+0x128>
 8009af4:	6833      	ldr	r3, [r6, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	6961      	ldr	r1, [r4, #20]
 8009afa:	1d18      	adds	r0, r3, #4
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	062e      	lsls	r6, r5, #24
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	d501      	bpl.n	8009b08 <_printf_i+0x1c0>
 8009b04:	6019      	str	r1, [r3, #0]
 8009b06:	e002      	b.n	8009b0e <_printf_i+0x1c6>
 8009b08:	0668      	lsls	r0, r5, #25
 8009b0a:	d5fb      	bpl.n	8009b04 <_printf_i+0x1bc>
 8009b0c:	8019      	strh	r1, [r3, #0]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	4616      	mov	r6, r2
 8009b14:	e7bc      	b.n	8009a90 <_printf_i+0x148>
 8009b16:	6833      	ldr	r3, [r6, #0]
 8009b18:	1d1a      	adds	r2, r3, #4
 8009b1a:	6032      	str	r2, [r6, #0]
 8009b1c:	681e      	ldr	r6, [r3, #0]
 8009b1e:	6862      	ldr	r2, [r4, #4]
 8009b20:	2100      	movs	r1, #0
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7f6 fb74 	bl	8000210 <memchr>
 8009b28:	b108      	cbz	r0, 8009b2e <_printf_i+0x1e6>
 8009b2a:	1b80      	subs	r0, r0, r6
 8009b2c:	6060      	str	r0, [r4, #4]
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	2300      	movs	r3, #0
 8009b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b38:	e7aa      	b.n	8009a90 <_printf_i+0x148>
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	4649      	mov	r1, r9
 8009b40:	4640      	mov	r0, r8
 8009b42:	47d0      	blx	sl
 8009b44:	3001      	adds	r0, #1
 8009b46:	d0ad      	beq.n	8009aa4 <_printf_i+0x15c>
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	079b      	lsls	r3, r3, #30
 8009b4c:	d413      	bmi.n	8009b76 <_printf_i+0x22e>
 8009b4e:	68e0      	ldr	r0, [r4, #12]
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	4298      	cmp	r0, r3
 8009b54:	bfb8      	it	lt
 8009b56:	4618      	movlt	r0, r3
 8009b58:	e7a6      	b.n	8009aa8 <_printf_i+0x160>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	4649      	mov	r1, r9
 8009b60:	4640      	mov	r0, r8
 8009b62:	47d0      	blx	sl
 8009b64:	3001      	adds	r0, #1
 8009b66:	d09d      	beq.n	8009aa4 <_printf_i+0x15c>
 8009b68:	3501      	adds	r5, #1
 8009b6a:	68e3      	ldr	r3, [r4, #12]
 8009b6c:	9903      	ldr	r1, [sp, #12]
 8009b6e:	1a5b      	subs	r3, r3, r1
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	dcf2      	bgt.n	8009b5a <_printf_i+0x212>
 8009b74:	e7eb      	b.n	8009b4e <_printf_i+0x206>
 8009b76:	2500      	movs	r5, #0
 8009b78:	f104 0619 	add.w	r6, r4, #25
 8009b7c:	e7f5      	b.n	8009b6a <_printf_i+0x222>
 8009b7e:	bf00      	nop
 8009b80:	0800c10e 	.word	0x0800c10e
 8009b84:	0800c11f 	.word	0x0800c11f

08009b88 <std>:
 8009b88:	2300      	movs	r3, #0
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b96:	6083      	str	r3, [r0, #8]
 8009b98:	8181      	strh	r1, [r0, #12]
 8009b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b9c:	81c2      	strh	r2, [r0, #14]
 8009b9e:	6183      	str	r3, [r0, #24]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	2208      	movs	r2, #8
 8009ba4:	305c      	adds	r0, #92	@ 0x5c
 8009ba6:	f000 f914 	bl	8009dd2 <memset>
 8009baa:	4b0d      	ldr	r3, [pc, #52]	@ (8009be0 <std+0x58>)
 8009bac:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bae:	4b0d      	ldr	r3, [pc, #52]	@ (8009be4 <std+0x5c>)
 8009bb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <std+0x60>)
 8009bb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bec <std+0x64>)
 8009bb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bba:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf0 <std+0x68>)
 8009bbc:	6224      	str	r4, [r4, #32]
 8009bbe:	429c      	cmp	r4, r3
 8009bc0:	d006      	beq.n	8009bd0 <std+0x48>
 8009bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bc6:	4294      	cmp	r4, r2
 8009bc8:	d002      	beq.n	8009bd0 <std+0x48>
 8009bca:	33d0      	adds	r3, #208	@ 0xd0
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d105      	bne.n	8009bdc <std+0x54>
 8009bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd8:	f000 b978 	b.w	8009ecc <__retarget_lock_init_recursive>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	bf00      	nop
 8009be0:	08009d4d 	.word	0x08009d4d
 8009be4:	08009d6f 	.word	0x08009d6f
 8009be8:	08009da7 	.word	0x08009da7
 8009bec:	08009dcb 	.word	0x08009dcb
 8009bf0:	20004e1c 	.word	0x20004e1c

08009bf4 <stdio_exit_handler>:
 8009bf4:	4a02      	ldr	r2, [pc, #8]	@ (8009c00 <stdio_exit_handler+0xc>)
 8009bf6:	4903      	ldr	r1, [pc, #12]	@ (8009c04 <stdio_exit_handler+0x10>)
 8009bf8:	4803      	ldr	r0, [pc, #12]	@ (8009c08 <stdio_exit_handler+0x14>)
 8009bfa:	f000 b869 	b.w	8009cd0 <_fwalk_sglue>
 8009bfe:	bf00      	nop
 8009c00:	20000014 	.word	0x20000014
 8009c04:	0800b845 	.word	0x0800b845
 8009c08:	20000024 	.word	0x20000024

08009c0c <cleanup_stdio>:
 8009c0c:	6841      	ldr	r1, [r0, #4]
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c40 <cleanup_stdio+0x34>)
 8009c10:	4299      	cmp	r1, r3
 8009c12:	b510      	push	{r4, lr}
 8009c14:	4604      	mov	r4, r0
 8009c16:	d001      	beq.n	8009c1c <cleanup_stdio+0x10>
 8009c18:	f001 fe14 	bl	800b844 <_fflush_r>
 8009c1c:	68a1      	ldr	r1, [r4, #8]
 8009c1e:	4b09      	ldr	r3, [pc, #36]	@ (8009c44 <cleanup_stdio+0x38>)
 8009c20:	4299      	cmp	r1, r3
 8009c22:	d002      	beq.n	8009c2a <cleanup_stdio+0x1e>
 8009c24:	4620      	mov	r0, r4
 8009c26:	f001 fe0d 	bl	800b844 <_fflush_r>
 8009c2a:	68e1      	ldr	r1, [r4, #12]
 8009c2c:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <cleanup_stdio+0x3c>)
 8009c2e:	4299      	cmp	r1, r3
 8009c30:	d004      	beq.n	8009c3c <cleanup_stdio+0x30>
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c38:	f001 be04 	b.w	800b844 <_fflush_r>
 8009c3c:	bd10      	pop	{r4, pc}
 8009c3e:	bf00      	nop
 8009c40:	20004e1c 	.word	0x20004e1c
 8009c44:	20004e84 	.word	0x20004e84
 8009c48:	20004eec 	.word	0x20004eec

08009c4c <global_stdio_init.part.0>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c7c <global_stdio_init.part.0+0x30>)
 8009c50:	4c0b      	ldr	r4, [pc, #44]	@ (8009c80 <global_stdio_init.part.0+0x34>)
 8009c52:	4a0c      	ldr	r2, [pc, #48]	@ (8009c84 <global_stdio_init.part.0+0x38>)
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	4620      	mov	r0, r4
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2104      	movs	r1, #4
 8009c5c:	f7ff ff94 	bl	8009b88 <std>
 8009c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c64:	2201      	movs	r2, #1
 8009c66:	2109      	movs	r1, #9
 8009c68:	f7ff ff8e 	bl	8009b88 <std>
 8009c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c70:	2202      	movs	r2, #2
 8009c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c76:	2112      	movs	r1, #18
 8009c78:	f7ff bf86 	b.w	8009b88 <std>
 8009c7c:	20004f54 	.word	0x20004f54
 8009c80:	20004e1c 	.word	0x20004e1c
 8009c84:	08009bf5 	.word	0x08009bf5

08009c88 <__sfp_lock_acquire>:
 8009c88:	4801      	ldr	r0, [pc, #4]	@ (8009c90 <__sfp_lock_acquire+0x8>)
 8009c8a:	f000 b920 	b.w	8009ece <__retarget_lock_acquire_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20004f5d 	.word	0x20004f5d

08009c94 <__sfp_lock_release>:
 8009c94:	4801      	ldr	r0, [pc, #4]	@ (8009c9c <__sfp_lock_release+0x8>)
 8009c96:	f000 b91b 	b.w	8009ed0 <__retarget_lock_release_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20004f5d 	.word	0x20004f5d

08009ca0 <__sinit>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	f7ff fff0 	bl	8009c88 <__sfp_lock_acquire>
 8009ca8:	6a23      	ldr	r3, [r4, #32]
 8009caa:	b11b      	cbz	r3, 8009cb4 <__sinit+0x14>
 8009cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb0:	f7ff bff0 	b.w	8009c94 <__sfp_lock_release>
 8009cb4:	4b04      	ldr	r3, [pc, #16]	@ (8009cc8 <__sinit+0x28>)
 8009cb6:	6223      	str	r3, [r4, #32]
 8009cb8:	4b04      	ldr	r3, [pc, #16]	@ (8009ccc <__sinit+0x2c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1f5      	bne.n	8009cac <__sinit+0xc>
 8009cc0:	f7ff ffc4 	bl	8009c4c <global_stdio_init.part.0>
 8009cc4:	e7f2      	b.n	8009cac <__sinit+0xc>
 8009cc6:	bf00      	nop
 8009cc8:	08009c0d 	.word	0x08009c0d
 8009ccc:	20004f54 	.word	0x20004f54

08009cd0 <_fwalk_sglue>:
 8009cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	4688      	mov	r8, r1
 8009cd8:	4614      	mov	r4, r2
 8009cda:	2600      	movs	r6, #0
 8009cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8009ce4:	d505      	bpl.n	8009cf2 <_fwalk_sglue+0x22>
 8009ce6:	6824      	ldr	r4, [r4, #0]
 8009ce8:	2c00      	cmp	r4, #0
 8009cea:	d1f7      	bne.n	8009cdc <_fwalk_sglue+0xc>
 8009cec:	4630      	mov	r0, r6
 8009cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf2:	89ab      	ldrh	r3, [r5, #12]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d907      	bls.n	8009d08 <_fwalk_sglue+0x38>
 8009cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	d003      	beq.n	8009d08 <_fwalk_sglue+0x38>
 8009d00:	4629      	mov	r1, r5
 8009d02:	4638      	mov	r0, r7
 8009d04:	47c0      	blx	r8
 8009d06:	4306      	orrs	r6, r0
 8009d08:	3568      	adds	r5, #104	@ 0x68
 8009d0a:	e7e9      	b.n	8009ce0 <_fwalk_sglue+0x10>

08009d0c <siprintf>:
 8009d0c:	b40e      	push	{r1, r2, r3}
 8009d0e:	b500      	push	{lr}
 8009d10:	b09c      	sub	sp, #112	@ 0x70
 8009d12:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d14:	9002      	str	r0, [sp, #8]
 8009d16:	9006      	str	r0, [sp, #24]
 8009d18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d1c:	4809      	ldr	r0, [pc, #36]	@ (8009d44 <siprintf+0x38>)
 8009d1e:	9107      	str	r1, [sp, #28]
 8009d20:	9104      	str	r1, [sp, #16]
 8009d22:	4909      	ldr	r1, [pc, #36]	@ (8009d48 <siprintf+0x3c>)
 8009d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d28:	9105      	str	r1, [sp, #20]
 8009d2a:	6800      	ldr	r0, [r0, #0]
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	a902      	add	r1, sp, #8
 8009d30:	f001 fc08 	bl	800b544 <_svfiprintf_r>
 8009d34:	9b02      	ldr	r3, [sp, #8]
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	b01c      	add	sp, #112	@ 0x70
 8009d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d40:	b003      	add	sp, #12
 8009d42:	4770      	bx	lr
 8009d44:	20000020 	.word	0x20000020
 8009d48:	ffff0208 	.word	0xffff0208

08009d4c <__sread>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	460c      	mov	r4, r1
 8009d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d54:	f000 f86c 	bl	8009e30 <_read_r>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	bfab      	itete	ge
 8009d5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d60:	181b      	addge	r3, r3, r0
 8009d62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d66:	bfac      	ite	ge
 8009d68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d6a:	81a3      	strhlt	r3, [r4, #12]
 8009d6c:	bd10      	pop	{r4, pc}

08009d6e <__swrite>:
 8009d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d72:	461f      	mov	r7, r3
 8009d74:	898b      	ldrh	r3, [r1, #12]
 8009d76:	05db      	lsls	r3, r3, #23
 8009d78:	4605      	mov	r5, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	4616      	mov	r6, r2
 8009d7e:	d505      	bpl.n	8009d8c <__swrite+0x1e>
 8009d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d84:	2302      	movs	r3, #2
 8009d86:	2200      	movs	r2, #0
 8009d88:	f000 f840 	bl	8009e0c <_lseek_r>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	4632      	mov	r2, r6
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da2:	f000 b857 	b.w	8009e54 <_write_r>

08009da6 <__sseek>:
 8009da6:	b510      	push	{r4, lr}
 8009da8:	460c      	mov	r4, r1
 8009daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dae:	f000 f82d 	bl	8009e0c <_lseek_r>
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	bf15      	itete	ne
 8009db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dc2:	81a3      	strheq	r3, [r4, #12]
 8009dc4:	bf18      	it	ne
 8009dc6:	81a3      	strhne	r3, [r4, #12]
 8009dc8:	bd10      	pop	{r4, pc}

08009dca <__sclose>:
 8009dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dce:	f000 b80d 	b.w	8009dec <_close_r>

08009dd2 <memset>:
 8009dd2:	4402      	add	r2, r0
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d100      	bne.n	8009ddc <memset+0xa>
 8009dda:	4770      	bx	lr
 8009ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8009de0:	e7f9      	b.n	8009dd6 <memset+0x4>
	...

08009de4 <_localeconv_r>:
 8009de4:	4800      	ldr	r0, [pc, #0]	@ (8009de8 <_localeconv_r+0x4>)
 8009de6:	4770      	bx	lr
 8009de8:	20000160 	.word	0x20000160

08009dec <_close_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d06      	ldr	r5, [pc, #24]	@ (8009e08 <_close_r+0x1c>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	f7f8 f966 	bl	80020c8 <_close>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_close_r+0x1a>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_close_r+0x1a>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	20004f58 	.word	0x20004f58

08009e0c <_lseek_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d07      	ldr	r5, [pc, #28]	@ (8009e2c <_lseek_r+0x20>)
 8009e10:	4604      	mov	r4, r0
 8009e12:	4608      	mov	r0, r1
 8009e14:	4611      	mov	r1, r2
 8009e16:	2200      	movs	r2, #0
 8009e18:	602a      	str	r2, [r5, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f7f8 f97b 	bl	8002116 <_lseek>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_lseek_r+0x1e>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_lseek_r+0x1e>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	20004f58 	.word	0x20004f58

08009e30 <_read_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d07      	ldr	r5, [pc, #28]	@ (8009e50 <_read_r+0x20>)
 8009e34:	4604      	mov	r4, r0
 8009e36:	4608      	mov	r0, r1
 8009e38:	4611      	mov	r1, r2
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	602a      	str	r2, [r5, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	f7f8 f909 	bl	8002056 <_read>
 8009e44:	1c43      	adds	r3, r0, #1
 8009e46:	d102      	bne.n	8009e4e <_read_r+0x1e>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	b103      	cbz	r3, 8009e4e <_read_r+0x1e>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	20004f58 	.word	0x20004f58

08009e54 <_write_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	@ (8009e74 <_write_r+0x20>)
 8009e58:	4604      	mov	r4, r0
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	602a      	str	r2, [r5, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f7f8 f914 	bl	8002090 <_write>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_write_r+0x1e>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_write_r+0x1e>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20004f58 	.word	0x20004f58

08009e78 <__errno>:
 8009e78:	4b01      	ldr	r3, [pc, #4]	@ (8009e80 <__errno+0x8>)
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	20000020 	.word	0x20000020

08009e84 <__libc_init_array>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	4d0d      	ldr	r5, [pc, #52]	@ (8009ebc <__libc_init_array+0x38>)
 8009e88:	4c0d      	ldr	r4, [pc, #52]	@ (8009ec0 <__libc_init_array+0x3c>)
 8009e8a:	1b64      	subs	r4, r4, r5
 8009e8c:	10a4      	asrs	r4, r4, #2
 8009e8e:	2600      	movs	r6, #0
 8009e90:	42a6      	cmp	r6, r4
 8009e92:	d109      	bne.n	8009ea8 <__libc_init_array+0x24>
 8009e94:	4d0b      	ldr	r5, [pc, #44]	@ (8009ec4 <__libc_init_array+0x40>)
 8009e96:	4c0c      	ldr	r4, [pc, #48]	@ (8009ec8 <__libc_init_array+0x44>)
 8009e98:	f002 f864 	bl	800bf64 <_init>
 8009e9c:	1b64      	subs	r4, r4, r5
 8009e9e:	10a4      	asrs	r4, r4, #2
 8009ea0:	2600      	movs	r6, #0
 8009ea2:	42a6      	cmp	r6, r4
 8009ea4:	d105      	bne.n	8009eb2 <__libc_init_array+0x2e>
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eac:	4798      	blx	r3
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7ee      	b.n	8009e90 <__libc_init_array+0xc>
 8009eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb6:	4798      	blx	r3
 8009eb8:	3601      	adds	r6, #1
 8009eba:	e7f2      	b.n	8009ea2 <__libc_init_array+0x1e>
 8009ebc:	0800c478 	.word	0x0800c478
 8009ec0:	0800c478 	.word	0x0800c478
 8009ec4:	0800c478 	.word	0x0800c478
 8009ec8:	0800c47c 	.word	0x0800c47c

08009ecc <__retarget_lock_init_recursive>:
 8009ecc:	4770      	bx	lr

08009ece <__retarget_lock_acquire_recursive>:
 8009ece:	4770      	bx	lr

08009ed0 <__retarget_lock_release_recursive>:
 8009ed0:	4770      	bx	lr

08009ed2 <memcpy>:
 8009ed2:	440a      	add	r2, r1
 8009ed4:	4291      	cmp	r1, r2
 8009ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eda:	d100      	bne.n	8009ede <memcpy+0xc>
 8009edc:	4770      	bx	lr
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee8:	4291      	cmp	r1, r2
 8009eea:	d1f9      	bne.n	8009ee0 <memcpy+0xe>
 8009eec:	bd10      	pop	{r4, pc}

08009eee <quorem>:
 8009eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef2:	6903      	ldr	r3, [r0, #16]
 8009ef4:	690c      	ldr	r4, [r1, #16]
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	4607      	mov	r7, r0
 8009efa:	db7e      	blt.n	8009ffa <quorem+0x10c>
 8009efc:	3c01      	subs	r4, #1
 8009efe:	f101 0814 	add.w	r8, r1, #20
 8009f02:	00a3      	lsls	r3, r4, #2
 8009f04:	f100 0514 	add.w	r5, r0, #20
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f20:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f24:	d32e      	bcc.n	8009f84 <quorem+0x96>
 8009f26:	f04f 0a00 	mov.w	sl, #0
 8009f2a:	46c4      	mov	ip, r8
 8009f2c:	46ae      	mov	lr, r5
 8009f2e:	46d3      	mov	fp, sl
 8009f30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f34:	b298      	uxth	r0, r3
 8009f36:	fb06 a000 	mla	r0, r6, r0, sl
 8009f3a:	0c02      	lsrs	r2, r0, #16
 8009f3c:	0c1b      	lsrs	r3, r3, #16
 8009f3e:	fb06 2303 	mla	r3, r6, r3, r2
 8009f42:	f8de 2000 	ldr.w	r2, [lr]
 8009f46:	b280      	uxth	r0, r0
 8009f48:	b292      	uxth	r2, r2
 8009f4a:	1a12      	subs	r2, r2, r0
 8009f4c:	445a      	add	r2, fp
 8009f4e:	f8de 0000 	ldr.w	r0, [lr]
 8009f52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f60:	b292      	uxth	r2, r2
 8009f62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f66:	45e1      	cmp	r9, ip
 8009f68:	f84e 2b04 	str.w	r2, [lr], #4
 8009f6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f70:	d2de      	bcs.n	8009f30 <quorem+0x42>
 8009f72:	9b00      	ldr	r3, [sp, #0]
 8009f74:	58eb      	ldr	r3, [r5, r3]
 8009f76:	b92b      	cbnz	r3, 8009f84 <quorem+0x96>
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	3b04      	subs	r3, #4
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	d32f      	bcc.n	8009fe2 <quorem+0xf4>
 8009f82:	613c      	str	r4, [r7, #16]
 8009f84:	4638      	mov	r0, r7
 8009f86:	f001 f979 	bl	800b27c <__mcmp>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	db25      	blt.n	8009fda <quorem+0xec>
 8009f8e:	4629      	mov	r1, r5
 8009f90:	2000      	movs	r0, #0
 8009f92:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f96:	f8d1 c000 	ldr.w	ip, [r1]
 8009f9a:	fa1f fe82 	uxth.w	lr, r2
 8009f9e:	fa1f f38c 	uxth.w	r3, ip
 8009fa2:	eba3 030e 	sub.w	r3, r3, lr
 8009fa6:	4403      	add	r3, r0
 8009fa8:	0c12      	lsrs	r2, r2, #16
 8009faa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fb8:	45c1      	cmp	r9, r8
 8009fba:	f841 3b04 	str.w	r3, [r1], #4
 8009fbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fc2:	d2e6      	bcs.n	8009f92 <quorem+0xa4>
 8009fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fcc:	b922      	cbnz	r2, 8009fd8 <quorem+0xea>
 8009fce:	3b04      	subs	r3, #4
 8009fd0:	429d      	cmp	r5, r3
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	d30b      	bcc.n	8009fee <quorem+0x100>
 8009fd6:	613c      	str	r4, [r7, #16]
 8009fd8:	3601      	adds	r6, #1
 8009fda:	4630      	mov	r0, r6
 8009fdc:	b003      	add	sp, #12
 8009fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe2:	6812      	ldr	r2, [r2, #0]
 8009fe4:	3b04      	subs	r3, #4
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d1cb      	bne.n	8009f82 <quorem+0x94>
 8009fea:	3c01      	subs	r4, #1
 8009fec:	e7c6      	b.n	8009f7c <quorem+0x8e>
 8009fee:	6812      	ldr	r2, [r2, #0]
 8009ff0:	3b04      	subs	r3, #4
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	d1ef      	bne.n	8009fd6 <quorem+0xe8>
 8009ff6:	3c01      	subs	r4, #1
 8009ff8:	e7ea      	b.n	8009fd0 <quorem+0xe2>
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	e7ee      	b.n	8009fdc <quorem+0xee>
	...

0800a000 <_dtoa_r>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	69c7      	ldr	r7, [r0, #28]
 800a006:	b099      	sub	sp, #100	@ 0x64
 800a008:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a00c:	ec55 4b10 	vmov	r4, r5, d0
 800a010:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a012:	9109      	str	r1, [sp, #36]	@ 0x24
 800a014:	4683      	mov	fp, r0
 800a016:	920e      	str	r2, [sp, #56]	@ 0x38
 800a018:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a01a:	b97f      	cbnz	r7, 800a03c <_dtoa_r+0x3c>
 800a01c:	2010      	movs	r0, #16
 800a01e:	f000 fdfd 	bl	800ac1c <malloc>
 800a022:	4602      	mov	r2, r0
 800a024:	f8cb 001c 	str.w	r0, [fp, #28]
 800a028:	b920      	cbnz	r0, 800a034 <_dtoa_r+0x34>
 800a02a:	4ba7      	ldr	r3, [pc, #668]	@ (800a2c8 <_dtoa_r+0x2c8>)
 800a02c:	21ef      	movs	r1, #239	@ 0xef
 800a02e:	48a7      	ldr	r0, [pc, #668]	@ (800a2cc <_dtoa_r+0x2cc>)
 800a030:	f001 fc5a 	bl	800b8e8 <__assert_func>
 800a034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a038:	6007      	str	r7, [r0, #0]
 800a03a:	60c7      	str	r7, [r0, #12]
 800a03c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a040:	6819      	ldr	r1, [r3, #0]
 800a042:	b159      	cbz	r1, 800a05c <_dtoa_r+0x5c>
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	604a      	str	r2, [r1, #4]
 800a048:	2301      	movs	r3, #1
 800a04a:	4093      	lsls	r3, r2
 800a04c:	608b      	str	r3, [r1, #8]
 800a04e:	4658      	mov	r0, fp
 800a050:	f000 feda 	bl	800ae08 <_Bfree>
 800a054:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	1e2b      	subs	r3, r5, #0
 800a05e:	bfb9      	ittee	lt
 800a060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a064:	9303      	strlt	r3, [sp, #12]
 800a066:	2300      	movge	r3, #0
 800a068:	6033      	strge	r3, [r6, #0]
 800a06a:	9f03      	ldr	r7, [sp, #12]
 800a06c:	4b98      	ldr	r3, [pc, #608]	@ (800a2d0 <_dtoa_r+0x2d0>)
 800a06e:	bfbc      	itt	lt
 800a070:	2201      	movlt	r2, #1
 800a072:	6032      	strlt	r2, [r6, #0]
 800a074:	43bb      	bics	r3, r7
 800a076:	d112      	bne.n	800a09e <_dtoa_r+0x9e>
 800a078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a07a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a084:	4323      	orrs	r3, r4
 800a086:	f000 854d 	beq.w	800ab24 <_dtoa_r+0xb24>
 800a08a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a08c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a2e4 <_dtoa_r+0x2e4>
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 854f 	beq.w	800ab34 <_dtoa_r+0xb34>
 800a096:	f10a 0303 	add.w	r3, sl, #3
 800a09a:	f000 bd49 	b.w	800ab30 <_dtoa_r+0xb30>
 800a09e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	ec51 0b17 	vmov	r0, r1, d7
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a0ae:	f7f6 fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	b158      	cbz	r0, 800a0ce <_dtoa_r+0xce>
 800a0b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0be:	b113      	cbz	r3, 800a0c6 <_dtoa_r+0xc6>
 800a0c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a0c2:	4b84      	ldr	r3, [pc, #528]	@ (800a2d4 <_dtoa_r+0x2d4>)
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a2e8 <_dtoa_r+0x2e8>
 800a0ca:	f000 bd33 	b.w	800ab34 <_dtoa_r+0xb34>
 800a0ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0d2:	aa16      	add	r2, sp, #88	@ 0x58
 800a0d4:	a917      	add	r1, sp, #92	@ 0x5c
 800a0d6:	4658      	mov	r0, fp
 800a0d8:	f001 f980 	bl	800b3dc <__d2b>
 800a0dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a0e0:	4681      	mov	r9, r0
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	d077      	beq.n	800a1d6 <_dtoa_r+0x1d6>
 800a0e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a0f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a0fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a100:	4619      	mov	r1, r3
 800a102:	2200      	movs	r2, #0
 800a104:	4b74      	ldr	r3, [pc, #464]	@ (800a2d8 <_dtoa_r+0x2d8>)
 800a106:	f7f6 f8df 	bl	80002c8 <__aeabi_dsub>
 800a10a:	a369      	add	r3, pc, #420	@ (adr r3, 800a2b0 <_dtoa_r+0x2b0>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 fa92 	bl	8000638 <__aeabi_dmul>
 800a114:	a368      	add	r3, pc, #416	@ (adr r3, 800a2b8 <_dtoa_r+0x2b8>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 f8d7 	bl	80002cc <__adddf3>
 800a11e:	4604      	mov	r4, r0
 800a120:	4630      	mov	r0, r6
 800a122:	460d      	mov	r5, r1
 800a124:	f7f6 fa1e 	bl	8000564 <__aeabi_i2d>
 800a128:	a365      	add	r3, pc, #404	@ (adr r3, 800a2c0 <_dtoa_r+0x2c0>)
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	f7f6 fa83 	bl	8000638 <__aeabi_dmul>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4620      	mov	r0, r4
 800a138:	4629      	mov	r1, r5
 800a13a:	f7f6 f8c7 	bl	80002cc <__adddf3>
 800a13e:	4604      	mov	r4, r0
 800a140:	460d      	mov	r5, r1
 800a142:	f7f6 fd29 	bl	8000b98 <__aeabi_d2iz>
 800a146:	2200      	movs	r2, #0
 800a148:	4607      	mov	r7, r0
 800a14a:	2300      	movs	r3, #0
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	f7f6 fce4 	bl	8000b1c <__aeabi_dcmplt>
 800a154:	b140      	cbz	r0, 800a168 <_dtoa_r+0x168>
 800a156:	4638      	mov	r0, r7
 800a158:	f7f6 fa04 	bl	8000564 <__aeabi_i2d>
 800a15c:	4622      	mov	r2, r4
 800a15e:	462b      	mov	r3, r5
 800a160:	f7f6 fcd2 	bl	8000b08 <__aeabi_dcmpeq>
 800a164:	b900      	cbnz	r0, 800a168 <_dtoa_r+0x168>
 800a166:	3f01      	subs	r7, #1
 800a168:	2f16      	cmp	r7, #22
 800a16a:	d851      	bhi.n	800a210 <_dtoa_r+0x210>
 800a16c:	4b5b      	ldr	r3, [pc, #364]	@ (800a2dc <_dtoa_r+0x2dc>)
 800a16e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a17a:	f7f6 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d048      	beq.n	800a214 <_dtoa_r+0x214>
 800a182:	3f01      	subs	r7, #1
 800a184:	2300      	movs	r3, #0
 800a186:	9312      	str	r3, [sp, #72]	@ 0x48
 800a188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a18a:	1b9b      	subs	r3, r3, r6
 800a18c:	1e5a      	subs	r2, r3, #1
 800a18e:	bf44      	itt	mi
 800a190:	f1c3 0801 	rsbmi	r8, r3, #1
 800a194:	2300      	movmi	r3, #0
 800a196:	9208      	str	r2, [sp, #32]
 800a198:	bf54      	ite	pl
 800a19a:	f04f 0800 	movpl.w	r8, #0
 800a19e:	9308      	strmi	r3, [sp, #32]
 800a1a0:	2f00      	cmp	r7, #0
 800a1a2:	db39      	blt.n	800a218 <_dtoa_r+0x218>
 800a1a4:	9b08      	ldr	r3, [sp, #32]
 800a1a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a1a8:	443b      	add	r3, r7
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b2:	2b09      	cmp	r3, #9
 800a1b4:	d864      	bhi.n	800a280 <_dtoa_r+0x280>
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	bfc4      	itt	gt
 800a1ba:	3b04      	subgt	r3, #4
 800a1bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c0:	f1a3 0302 	sub.w	r3, r3, #2
 800a1c4:	bfcc      	ite	gt
 800a1c6:	2400      	movgt	r4, #0
 800a1c8:	2401      	movle	r4, #1
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d863      	bhi.n	800a296 <_dtoa_r+0x296>
 800a1ce:	e8df f003 	tbb	[pc, r3]
 800a1d2:	372a      	.short	0x372a
 800a1d4:	5535      	.short	0x5535
 800a1d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a1da:	441e      	add	r6, r3
 800a1dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a1e0:	2b20      	cmp	r3, #32
 800a1e2:	bfc1      	itttt	gt
 800a1e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a1e8:	409f      	lslgt	r7, r3
 800a1ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a1f2:	bfd6      	itet	le
 800a1f4:	f1c3 0320 	rsble	r3, r3, #32
 800a1f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a1fc:	fa04 f003 	lslle.w	r0, r4, r3
 800a200:	f7f6 f9a0 	bl	8000544 <__aeabi_ui2d>
 800a204:	2201      	movs	r2, #1
 800a206:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a20a:	3e01      	subs	r6, #1
 800a20c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a20e:	e777      	b.n	800a100 <_dtoa_r+0x100>
 800a210:	2301      	movs	r3, #1
 800a212:	e7b8      	b.n	800a186 <_dtoa_r+0x186>
 800a214:	9012      	str	r0, [sp, #72]	@ 0x48
 800a216:	e7b7      	b.n	800a188 <_dtoa_r+0x188>
 800a218:	427b      	negs	r3, r7
 800a21a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a21c:	2300      	movs	r3, #0
 800a21e:	eba8 0807 	sub.w	r8, r8, r7
 800a222:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a224:	e7c4      	b.n	800a1b0 <_dtoa_r+0x1b0>
 800a226:	2300      	movs	r3, #0
 800a228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dc35      	bgt.n	800a29c <_dtoa_r+0x29c>
 800a230:	2301      	movs	r3, #1
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	9307      	str	r3, [sp, #28]
 800a236:	461a      	mov	r2, r3
 800a238:	920e      	str	r2, [sp, #56]	@ 0x38
 800a23a:	e00b      	b.n	800a254 <_dtoa_r+0x254>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e7f3      	b.n	800a228 <_dtoa_r+0x228>
 800a240:	2300      	movs	r3, #0
 800a242:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a246:	18fb      	adds	r3, r7, r3
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	bfb8      	it	lt
 800a252:	2301      	movlt	r3, #1
 800a254:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a258:	2100      	movs	r1, #0
 800a25a:	2204      	movs	r2, #4
 800a25c:	f102 0514 	add.w	r5, r2, #20
 800a260:	429d      	cmp	r5, r3
 800a262:	d91f      	bls.n	800a2a4 <_dtoa_r+0x2a4>
 800a264:	6041      	str	r1, [r0, #4]
 800a266:	4658      	mov	r0, fp
 800a268:	f000 fd8e 	bl	800ad88 <_Balloc>
 800a26c:	4682      	mov	sl, r0
 800a26e:	2800      	cmp	r0, #0
 800a270:	d13c      	bne.n	800a2ec <_dtoa_r+0x2ec>
 800a272:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e0 <_dtoa_r+0x2e0>)
 800a274:	4602      	mov	r2, r0
 800a276:	f240 11af 	movw	r1, #431	@ 0x1af
 800a27a:	e6d8      	b.n	800a02e <_dtoa_r+0x2e>
 800a27c:	2301      	movs	r3, #1
 800a27e:	e7e0      	b.n	800a242 <_dtoa_r+0x242>
 800a280:	2401      	movs	r4, #1
 800a282:	2300      	movs	r3, #0
 800a284:	9309      	str	r3, [sp, #36]	@ 0x24
 800a286:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a288:	f04f 33ff 	mov.w	r3, #4294967295
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	9307      	str	r3, [sp, #28]
 800a290:	2200      	movs	r2, #0
 800a292:	2312      	movs	r3, #18
 800a294:	e7d0      	b.n	800a238 <_dtoa_r+0x238>
 800a296:	2301      	movs	r3, #1
 800a298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a29a:	e7f5      	b.n	800a288 <_dtoa_r+0x288>
 800a29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	9307      	str	r3, [sp, #28]
 800a2a2:	e7d7      	b.n	800a254 <_dtoa_r+0x254>
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	0052      	lsls	r2, r2, #1
 800a2a8:	e7d8      	b.n	800a25c <_dtoa_r+0x25c>
 800a2aa:	bf00      	nop
 800a2ac:	f3af 8000 	nop.w
 800a2b0:	636f4361 	.word	0x636f4361
 800a2b4:	3fd287a7 	.word	0x3fd287a7
 800a2b8:	8b60c8b3 	.word	0x8b60c8b3
 800a2bc:	3fc68a28 	.word	0x3fc68a28
 800a2c0:	509f79fb 	.word	0x509f79fb
 800a2c4:	3fd34413 	.word	0x3fd34413
 800a2c8:	0800c13d 	.word	0x0800c13d
 800a2cc:	0800c154 	.word	0x0800c154
 800a2d0:	7ff00000 	.word	0x7ff00000
 800a2d4:	0800c10d 	.word	0x0800c10d
 800a2d8:	3ff80000 	.word	0x3ff80000
 800a2dc:	0800c250 	.word	0x0800c250
 800a2e0:	0800c1ac 	.word	0x0800c1ac
 800a2e4:	0800c139 	.word	0x0800c139
 800a2e8:	0800c10c 	.word	0x0800c10c
 800a2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2f0:	6018      	str	r0, [r3, #0]
 800a2f2:	9b07      	ldr	r3, [sp, #28]
 800a2f4:	2b0e      	cmp	r3, #14
 800a2f6:	f200 80a4 	bhi.w	800a442 <_dtoa_r+0x442>
 800a2fa:	2c00      	cmp	r4, #0
 800a2fc:	f000 80a1 	beq.w	800a442 <_dtoa_r+0x442>
 800a300:	2f00      	cmp	r7, #0
 800a302:	dd33      	ble.n	800a36c <_dtoa_r+0x36c>
 800a304:	4bad      	ldr	r3, [pc, #692]	@ (800a5bc <_dtoa_r+0x5bc>)
 800a306:	f007 020f 	and.w	r2, r7, #15
 800a30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a30e:	ed93 7b00 	vldr	d7, [r3]
 800a312:	05f8      	lsls	r0, r7, #23
 800a314:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a318:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a31c:	d516      	bpl.n	800a34c <_dtoa_r+0x34c>
 800a31e:	4ba8      	ldr	r3, [pc, #672]	@ (800a5c0 <_dtoa_r+0x5c0>)
 800a320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a328:	f7f6 fab0 	bl	800088c <__aeabi_ddiv>
 800a32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a330:	f004 040f 	and.w	r4, r4, #15
 800a334:	2603      	movs	r6, #3
 800a336:	4da2      	ldr	r5, [pc, #648]	@ (800a5c0 <_dtoa_r+0x5c0>)
 800a338:	b954      	cbnz	r4, 800a350 <_dtoa_r+0x350>
 800a33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a342:	f7f6 faa3 	bl	800088c <__aeabi_ddiv>
 800a346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a34a:	e028      	b.n	800a39e <_dtoa_r+0x39e>
 800a34c:	2602      	movs	r6, #2
 800a34e:	e7f2      	b.n	800a336 <_dtoa_r+0x336>
 800a350:	07e1      	lsls	r1, r4, #31
 800a352:	d508      	bpl.n	800a366 <_dtoa_r+0x366>
 800a354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a358:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a35c:	f7f6 f96c 	bl	8000638 <__aeabi_dmul>
 800a360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a364:	3601      	adds	r6, #1
 800a366:	1064      	asrs	r4, r4, #1
 800a368:	3508      	adds	r5, #8
 800a36a:	e7e5      	b.n	800a338 <_dtoa_r+0x338>
 800a36c:	f000 80d2 	beq.w	800a514 <_dtoa_r+0x514>
 800a370:	427c      	negs	r4, r7
 800a372:	4b92      	ldr	r3, [pc, #584]	@ (800a5bc <_dtoa_r+0x5bc>)
 800a374:	4d92      	ldr	r5, [pc, #584]	@ (800a5c0 <_dtoa_r+0x5c0>)
 800a376:	f004 020f 	and.w	r2, r4, #15
 800a37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a386:	f7f6 f957 	bl	8000638 <__aeabi_dmul>
 800a38a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a38e:	1124      	asrs	r4, r4, #4
 800a390:	2300      	movs	r3, #0
 800a392:	2602      	movs	r6, #2
 800a394:	2c00      	cmp	r4, #0
 800a396:	f040 80b2 	bne.w	800a4fe <_dtoa_r+0x4fe>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1d3      	bne.n	800a346 <_dtoa_r+0x346>
 800a39e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80b7 	beq.w	800a518 <_dtoa_r+0x518>
 800a3aa:	4b86      	ldr	r3, [pc, #536]	@ (800a5c4 <_dtoa_r+0x5c4>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f000 80ae 	beq.w	800a518 <_dtoa_r+0x518>
 800a3bc:	9b07      	ldr	r3, [sp, #28]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 80aa 	beq.w	800a518 <_dtoa_r+0x518>
 800a3c4:	9b00      	ldr	r3, [sp, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dd37      	ble.n	800a43a <_dtoa_r+0x43a>
 800a3ca:	1e7b      	subs	r3, r7, #1
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4b7d      	ldr	r3, [pc, #500]	@ (800a5c8 <_dtoa_r+0x5c8>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7f6 f92f 	bl	8000638 <__aeabi_dmul>
 800a3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3de:	9c00      	ldr	r4, [sp, #0]
 800a3e0:	3601      	adds	r6, #1
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7f6 f8be 	bl	8000564 <__aeabi_i2d>
 800a3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ec:	f7f6 f924 	bl	8000638 <__aeabi_dmul>
 800a3f0:	4b76      	ldr	r3, [pc, #472]	@ (800a5cc <_dtoa_r+0x5cc>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f7f5 ff6a 	bl	80002cc <__adddf3>
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	f040 808d 	bne.w	800a51e <_dtoa_r+0x51e>
 800a404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a408:	4b71      	ldr	r3, [pc, #452]	@ (800a5d0 <_dtoa_r+0x5d0>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	f7f5 ff5c 	bl	80002c8 <__aeabi_dsub>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a418:	462a      	mov	r2, r5
 800a41a:	4633      	mov	r3, r6
 800a41c:	f7f6 fb9c 	bl	8000b58 <__aeabi_dcmpgt>
 800a420:	2800      	cmp	r0, #0
 800a422:	f040 828b 	bne.w	800a93c <_dtoa_r+0x93c>
 800a426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42a:	462a      	mov	r2, r5
 800a42c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a430:	f7f6 fb74 	bl	8000b1c <__aeabi_dcmplt>
 800a434:	2800      	cmp	r0, #0
 800a436:	f040 8128 	bne.w	800a68a <_dtoa_r+0x68a>
 800a43a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a43e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a444:	2b00      	cmp	r3, #0
 800a446:	f2c0 815a 	blt.w	800a6fe <_dtoa_r+0x6fe>
 800a44a:	2f0e      	cmp	r7, #14
 800a44c:	f300 8157 	bgt.w	800a6fe <_dtoa_r+0x6fe>
 800a450:	4b5a      	ldr	r3, [pc, #360]	@ (800a5bc <_dtoa_r+0x5bc>)
 800a452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a456:	ed93 7b00 	vldr	d7, [r3]
 800a45a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	ed8d 7b00 	vstr	d7, [sp]
 800a462:	da03      	bge.n	800a46c <_dtoa_r+0x46c>
 800a464:	9b07      	ldr	r3, [sp, #28]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f340 8101 	ble.w	800a66e <_dtoa_r+0x66e>
 800a46c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a470:	4656      	mov	r6, sl
 800a472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a476:	4620      	mov	r0, r4
 800a478:	4629      	mov	r1, r5
 800a47a:	f7f6 fa07 	bl	800088c <__aeabi_ddiv>
 800a47e:	f7f6 fb8b 	bl	8000b98 <__aeabi_d2iz>
 800a482:	4680      	mov	r8, r0
 800a484:	f7f6 f86e 	bl	8000564 <__aeabi_i2d>
 800a488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a48c:	f7f6 f8d4 	bl	8000638 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4620      	mov	r0, r4
 800a496:	4629      	mov	r1, r5
 800a498:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a49c:	f7f5 ff14 	bl	80002c8 <__aeabi_dsub>
 800a4a0:	f806 4b01 	strb.w	r4, [r6], #1
 800a4a4:	9d07      	ldr	r5, [sp, #28]
 800a4a6:	eba6 040a 	sub.w	r4, r6, sl
 800a4aa:	42a5      	cmp	r5, r4
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	f040 8117 	bne.w	800a6e2 <_dtoa_r+0x6e2>
 800a4b4:	f7f5 ff0a 	bl	80002cc <__adddf3>
 800a4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4bc:	4604      	mov	r4, r0
 800a4be:	460d      	mov	r5, r1
 800a4c0:	f7f6 fb4a 	bl	8000b58 <__aeabi_dcmpgt>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f040 80f9 	bne.w	800a6bc <_dtoa_r+0x6bc>
 800a4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f6 fb19 	bl	8000b08 <__aeabi_dcmpeq>
 800a4d6:	b118      	cbz	r0, 800a4e0 <_dtoa_r+0x4e0>
 800a4d8:	f018 0f01 	tst.w	r8, #1
 800a4dc:	f040 80ee 	bne.w	800a6bc <_dtoa_r+0x6bc>
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	4658      	mov	r0, fp
 800a4e4:	f000 fc90 	bl	800ae08 <_Bfree>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	7033      	strb	r3, [r6, #0]
 800a4ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4ee:	3701      	adds	r7, #1
 800a4f0:	601f      	str	r7, [r3, #0]
 800a4f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 831d 	beq.w	800ab34 <_dtoa_r+0xb34>
 800a4fa:	601e      	str	r6, [r3, #0]
 800a4fc:	e31a      	b.n	800ab34 <_dtoa_r+0xb34>
 800a4fe:	07e2      	lsls	r2, r4, #31
 800a500:	d505      	bpl.n	800a50e <_dtoa_r+0x50e>
 800a502:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a506:	f7f6 f897 	bl	8000638 <__aeabi_dmul>
 800a50a:	3601      	adds	r6, #1
 800a50c:	2301      	movs	r3, #1
 800a50e:	1064      	asrs	r4, r4, #1
 800a510:	3508      	adds	r5, #8
 800a512:	e73f      	b.n	800a394 <_dtoa_r+0x394>
 800a514:	2602      	movs	r6, #2
 800a516:	e742      	b.n	800a39e <_dtoa_r+0x39e>
 800a518:	9c07      	ldr	r4, [sp, #28]
 800a51a:	9704      	str	r7, [sp, #16]
 800a51c:	e761      	b.n	800a3e2 <_dtoa_r+0x3e2>
 800a51e:	4b27      	ldr	r3, [pc, #156]	@ (800a5bc <_dtoa_r+0x5bc>)
 800a520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a526:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a52a:	4454      	add	r4, sl
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d053      	beq.n	800a5d8 <_dtoa_r+0x5d8>
 800a530:	4928      	ldr	r1, [pc, #160]	@ (800a5d4 <_dtoa_r+0x5d4>)
 800a532:	2000      	movs	r0, #0
 800a534:	f7f6 f9aa 	bl	800088c <__aeabi_ddiv>
 800a538:	4633      	mov	r3, r6
 800a53a:	462a      	mov	r2, r5
 800a53c:	f7f5 fec4 	bl	80002c8 <__aeabi_dsub>
 800a540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a544:	4656      	mov	r6, sl
 800a546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a54a:	f7f6 fb25 	bl	8000b98 <__aeabi_d2iz>
 800a54e:	4605      	mov	r5, r0
 800a550:	f7f6 f808 	bl	8000564 <__aeabi_i2d>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a55c:	f7f5 feb4 	bl	80002c8 <__aeabi_dsub>
 800a560:	3530      	adds	r5, #48	@ 0x30
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a56a:	f806 5b01 	strb.w	r5, [r6], #1
 800a56e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a572:	f7f6 fad3 	bl	8000b1c <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	d171      	bne.n	800a65e <_dtoa_r+0x65e>
 800a57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a57e:	4911      	ldr	r1, [pc, #68]	@ (800a5c4 <_dtoa_r+0x5c4>)
 800a580:	2000      	movs	r0, #0
 800a582:	f7f5 fea1 	bl	80002c8 <__aeabi_dsub>
 800a586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a58a:	f7f6 fac7 	bl	8000b1c <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f040 8095 	bne.w	800a6be <_dtoa_r+0x6be>
 800a594:	42a6      	cmp	r6, r4
 800a596:	f43f af50 	beq.w	800a43a <_dtoa_r+0x43a>
 800a59a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a59e:	4b0a      	ldr	r3, [pc, #40]	@ (800a5c8 <_dtoa_r+0x5c8>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7f6 f849 	bl	8000638 <__aeabi_dmul>
 800a5a6:	4b08      	ldr	r3, [pc, #32]	@ (800a5c8 <_dtoa_r+0x5c8>)
 800a5a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b2:	f7f6 f841 	bl	8000638 <__aeabi_dmul>
 800a5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ba:	e7c4      	b.n	800a546 <_dtoa_r+0x546>
 800a5bc:	0800c250 	.word	0x0800c250
 800a5c0:	0800c228 	.word	0x0800c228
 800a5c4:	3ff00000 	.word	0x3ff00000
 800a5c8:	40240000 	.word	0x40240000
 800a5cc:	401c0000 	.word	0x401c0000
 800a5d0:	40140000 	.word	0x40140000
 800a5d4:	3fe00000 	.word	0x3fe00000
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a5e6:	4656      	mov	r6, sl
 800a5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ec:	f7f6 fad4 	bl	8000b98 <__aeabi_d2iz>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	f7f5 ffb7 	bl	8000564 <__aeabi_i2d>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5fe:	f7f5 fe63 	bl	80002c8 <__aeabi_dsub>
 800a602:	3530      	adds	r5, #48	@ 0x30
 800a604:	f806 5b01 	strb.w	r5, [r6], #1
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	42a6      	cmp	r6, r4
 800a60e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a612:	f04f 0200 	mov.w	r2, #0
 800a616:	d124      	bne.n	800a662 <_dtoa_r+0x662>
 800a618:	4bac      	ldr	r3, [pc, #688]	@ (800a8cc <_dtoa_r+0x8cc>)
 800a61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a61e:	f7f5 fe55 	bl	80002cc <__adddf3>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62a:	f7f6 fa95 	bl	8000b58 <__aeabi_dcmpgt>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d145      	bne.n	800a6be <_dtoa_r+0x6be>
 800a632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a636:	49a5      	ldr	r1, [pc, #660]	@ (800a8cc <_dtoa_r+0x8cc>)
 800a638:	2000      	movs	r0, #0
 800a63a:	f7f5 fe45 	bl	80002c8 <__aeabi_dsub>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a646:	f7f6 fa69 	bl	8000b1c <__aeabi_dcmplt>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f43f aef5 	beq.w	800a43a <_dtoa_r+0x43a>
 800a650:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a652:	1e73      	subs	r3, r6, #1
 800a654:	9315      	str	r3, [sp, #84]	@ 0x54
 800a656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a65a:	2b30      	cmp	r3, #48	@ 0x30
 800a65c:	d0f8      	beq.n	800a650 <_dtoa_r+0x650>
 800a65e:	9f04      	ldr	r7, [sp, #16]
 800a660:	e73e      	b.n	800a4e0 <_dtoa_r+0x4e0>
 800a662:	4b9b      	ldr	r3, [pc, #620]	@ (800a8d0 <_dtoa_r+0x8d0>)
 800a664:	f7f5 ffe8 	bl	8000638 <__aeabi_dmul>
 800a668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a66c:	e7bc      	b.n	800a5e8 <_dtoa_r+0x5e8>
 800a66e:	d10c      	bne.n	800a68a <_dtoa_r+0x68a>
 800a670:	4b98      	ldr	r3, [pc, #608]	@ (800a8d4 <_dtoa_r+0x8d4>)
 800a672:	2200      	movs	r2, #0
 800a674:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a678:	f7f5 ffde 	bl	8000638 <__aeabi_dmul>
 800a67c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a680:	f7f6 fa60 	bl	8000b44 <__aeabi_dcmpge>
 800a684:	2800      	cmp	r0, #0
 800a686:	f000 8157 	beq.w	800a938 <_dtoa_r+0x938>
 800a68a:	2400      	movs	r4, #0
 800a68c:	4625      	mov	r5, r4
 800a68e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a690:	43db      	mvns	r3, r3
 800a692:	9304      	str	r3, [sp, #16]
 800a694:	4656      	mov	r6, sl
 800a696:	2700      	movs	r7, #0
 800a698:	4621      	mov	r1, r4
 800a69a:	4658      	mov	r0, fp
 800a69c:	f000 fbb4 	bl	800ae08 <_Bfree>
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	d0dc      	beq.n	800a65e <_dtoa_r+0x65e>
 800a6a4:	b12f      	cbz	r7, 800a6b2 <_dtoa_r+0x6b2>
 800a6a6:	42af      	cmp	r7, r5
 800a6a8:	d003      	beq.n	800a6b2 <_dtoa_r+0x6b2>
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	4658      	mov	r0, fp
 800a6ae:	f000 fbab 	bl	800ae08 <_Bfree>
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4658      	mov	r0, fp
 800a6b6:	f000 fba7 	bl	800ae08 <_Bfree>
 800a6ba:	e7d0      	b.n	800a65e <_dtoa_r+0x65e>
 800a6bc:	9704      	str	r7, [sp, #16]
 800a6be:	4633      	mov	r3, r6
 800a6c0:	461e      	mov	r6, r3
 800a6c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6c6:	2a39      	cmp	r2, #57	@ 0x39
 800a6c8:	d107      	bne.n	800a6da <_dtoa_r+0x6da>
 800a6ca:	459a      	cmp	sl, r3
 800a6cc:	d1f8      	bne.n	800a6c0 <_dtoa_r+0x6c0>
 800a6ce:	9a04      	ldr	r2, [sp, #16]
 800a6d0:	3201      	adds	r2, #1
 800a6d2:	9204      	str	r2, [sp, #16]
 800a6d4:	2230      	movs	r2, #48	@ 0x30
 800a6d6:	f88a 2000 	strb.w	r2, [sl]
 800a6da:	781a      	ldrb	r2, [r3, #0]
 800a6dc:	3201      	adds	r2, #1
 800a6de:	701a      	strb	r2, [r3, #0]
 800a6e0:	e7bd      	b.n	800a65e <_dtoa_r+0x65e>
 800a6e2:	4b7b      	ldr	r3, [pc, #492]	@ (800a8d0 <_dtoa_r+0x8d0>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f7f5 ffa7 	bl	8000638 <__aeabi_dmul>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	460d      	mov	r5, r1
 800a6f2:	f7f6 fa09 	bl	8000b08 <__aeabi_dcmpeq>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f43f aebb 	beq.w	800a472 <_dtoa_r+0x472>
 800a6fc:	e6f0      	b.n	800a4e0 <_dtoa_r+0x4e0>
 800a6fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a700:	2a00      	cmp	r2, #0
 800a702:	f000 80db 	beq.w	800a8bc <_dtoa_r+0x8bc>
 800a706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a708:	2a01      	cmp	r2, #1
 800a70a:	f300 80bf 	bgt.w	800a88c <_dtoa_r+0x88c>
 800a70e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a710:	2a00      	cmp	r2, #0
 800a712:	f000 80b7 	beq.w	800a884 <_dtoa_r+0x884>
 800a716:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a71a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a71c:	4646      	mov	r6, r8
 800a71e:	9a08      	ldr	r2, [sp, #32]
 800a720:	2101      	movs	r1, #1
 800a722:	441a      	add	r2, r3
 800a724:	4658      	mov	r0, fp
 800a726:	4498      	add	r8, r3
 800a728:	9208      	str	r2, [sp, #32]
 800a72a:	f000 fc21 	bl	800af70 <__i2b>
 800a72e:	4605      	mov	r5, r0
 800a730:	b15e      	cbz	r6, 800a74a <_dtoa_r+0x74a>
 800a732:	9b08      	ldr	r3, [sp, #32]
 800a734:	2b00      	cmp	r3, #0
 800a736:	dd08      	ble.n	800a74a <_dtoa_r+0x74a>
 800a738:	42b3      	cmp	r3, r6
 800a73a:	9a08      	ldr	r2, [sp, #32]
 800a73c:	bfa8      	it	ge
 800a73e:	4633      	movge	r3, r6
 800a740:	eba8 0803 	sub.w	r8, r8, r3
 800a744:	1af6      	subs	r6, r6, r3
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	9308      	str	r3, [sp, #32]
 800a74a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a74c:	b1f3      	cbz	r3, 800a78c <_dtoa_r+0x78c>
 800a74e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80b7 	beq.w	800a8c4 <_dtoa_r+0x8c4>
 800a756:	b18c      	cbz	r4, 800a77c <_dtoa_r+0x77c>
 800a758:	4629      	mov	r1, r5
 800a75a:	4622      	mov	r2, r4
 800a75c:	4658      	mov	r0, fp
 800a75e:	f000 fcc7 	bl	800b0f0 <__pow5mult>
 800a762:	464a      	mov	r2, r9
 800a764:	4601      	mov	r1, r0
 800a766:	4605      	mov	r5, r0
 800a768:	4658      	mov	r0, fp
 800a76a:	f000 fc17 	bl	800af9c <__multiply>
 800a76e:	4649      	mov	r1, r9
 800a770:	9004      	str	r0, [sp, #16]
 800a772:	4658      	mov	r0, fp
 800a774:	f000 fb48 	bl	800ae08 <_Bfree>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	4699      	mov	r9, r3
 800a77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a77e:	1b1a      	subs	r2, r3, r4
 800a780:	d004      	beq.n	800a78c <_dtoa_r+0x78c>
 800a782:	4649      	mov	r1, r9
 800a784:	4658      	mov	r0, fp
 800a786:	f000 fcb3 	bl	800b0f0 <__pow5mult>
 800a78a:	4681      	mov	r9, r0
 800a78c:	2101      	movs	r1, #1
 800a78e:	4658      	mov	r0, fp
 800a790:	f000 fbee 	bl	800af70 <__i2b>
 800a794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a796:	4604      	mov	r4, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 81cf 	beq.w	800ab3c <_dtoa_r+0xb3c>
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	4658      	mov	r0, fp
 800a7a4:	f000 fca4 	bl	800b0f0 <__pow5mult>
 800a7a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	f300 8095 	bgt.w	800a8dc <_dtoa_r+0x8dc>
 800a7b2:	9b02      	ldr	r3, [sp, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f040 8087 	bne.w	800a8c8 <_dtoa_r+0x8c8>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 8089 	bne.w	800a8d8 <_dtoa_r+0x8d8>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7cc:	0d1b      	lsrs	r3, r3, #20
 800a7ce:	051b      	lsls	r3, r3, #20
 800a7d0:	b12b      	cbz	r3, 800a7de <_dtoa_r+0x7de>
 800a7d2:	9b08      	ldr	r3, [sp, #32]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	9308      	str	r3, [sp, #32]
 800a7d8:	f108 0801 	add.w	r8, r8, #1
 800a7dc:	2301      	movs	r3, #1
 800a7de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 81b0 	beq.w	800ab48 <_dtoa_r+0xb48>
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7ee:	6918      	ldr	r0, [r3, #16]
 800a7f0:	f000 fb72 	bl	800aed8 <__hi0bits>
 800a7f4:	f1c0 0020 	rsb	r0, r0, #32
 800a7f8:	9b08      	ldr	r3, [sp, #32]
 800a7fa:	4418      	add	r0, r3
 800a7fc:	f010 001f 	ands.w	r0, r0, #31
 800a800:	d077      	beq.n	800a8f2 <_dtoa_r+0x8f2>
 800a802:	f1c0 0320 	rsb	r3, r0, #32
 800a806:	2b04      	cmp	r3, #4
 800a808:	dd6b      	ble.n	800a8e2 <_dtoa_r+0x8e2>
 800a80a:	9b08      	ldr	r3, [sp, #32]
 800a80c:	f1c0 001c 	rsb	r0, r0, #28
 800a810:	4403      	add	r3, r0
 800a812:	4480      	add	r8, r0
 800a814:	4406      	add	r6, r0
 800a816:	9308      	str	r3, [sp, #32]
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	dd05      	ble.n	800a82a <_dtoa_r+0x82a>
 800a81e:	4649      	mov	r1, r9
 800a820:	4642      	mov	r2, r8
 800a822:	4658      	mov	r0, fp
 800a824:	f000 fcbe 	bl	800b1a4 <__lshift>
 800a828:	4681      	mov	r9, r0
 800a82a:	9b08      	ldr	r3, [sp, #32]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dd05      	ble.n	800a83c <_dtoa_r+0x83c>
 800a830:	4621      	mov	r1, r4
 800a832:	461a      	mov	r2, r3
 800a834:	4658      	mov	r0, fp
 800a836:	f000 fcb5 	bl	800b1a4 <__lshift>
 800a83a:	4604      	mov	r4, r0
 800a83c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d059      	beq.n	800a8f6 <_dtoa_r+0x8f6>
 800a842:	4621      	mov	r1, r4
 800a844:	4648      	mov	r0, r9
 800a846:	f000 fd19 	bl	800b27c <__mcmp>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	da53      	bge.n	800a8f6 <_dtoa_r+0x8f6>
 800a84e:	1e7b      	subs	r3, r7, #1
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	4649      	mov	r1, r9
 800a854:	2300      	movs	r3, #0
 800a856:	220a      	movs	r2, #10
 800a858:	4658      	mov	r0, fp
 800a85a:	f000 faf7 	bl	800ae4c <__multadd>
 800a85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a860:	4681      	mov	r9, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 8172 	beq.w	800ab4c <_dtoa_r+0xb4c>
 800a868:	2300      	movs	r3, #0
 800a86a:	4629      	mov	r1, r5
 800a86c:	220a      	movs	r2, #10
 800a86e:	4658      	mov	r0, fp
 800a870:	f000 faec 	bl	800ae4c <__multadd>
 800a874:	9b00      	ldr	r3, [sp, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	4605      	mov	r5, r0
 800a87a:	dc67      	bgt.n	800a94c <_dtoa_r+0x94c>
 800a87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87e:	2b02      	cmp	r3, #2
 800a880:	dc41      	bgt.n	800a906 <_dtoa_r+0x906>
 800a882:	e063      	b.n	800a94c <_dtoa_r+0x94c>
 800a884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a88a:	e746      	b.n	800a71a <_dtoa_r+0x71a>
 800a88c:	9b07      	ldr	r3, [sp, #28]
 800a88e:	1e5c      	subs	r4, r3, #1
 800a890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a892:	42a3      	cmp	r3, r4
 800a894:	bfbf      	itttt	lt
 800a896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a898:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a89a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a89c:	1ae3      	sublt	r3, r4, r3
 800a89e:	bfb4      	ite	lt
 800a8a0:	18d2      	addlt	r2, r2, r3
 800a8a2:	1b1c      	subge	r4, r3, r4
 800a8a4:	9b07      	ldr	r3, [sp, #28]
 800a8a6:	bfbc      	itt	lt
 800a8a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a8aa:	2400      	movlt	r4, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	bfb5      	itete	lt
 800a8b0:	eba8 0603 	sublt.w	r6, r8, r3
 800a8b4:	9b07      	ldrge	r3, [sp, #28]
 800a8b6:	2300      	movlt	r3, #0
 800a8b8:	4646      	movge	r6, r8
 800a8ba:	e730      	b.n	800a71e <_dtoa_r+0x71e>
 800a8bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a8c0:	4646      	mov	r6, r8
 800a8c2:	e735      	b.n	800a730 <_dtoa_r+0x730>
 800a8c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8c6:	e75c      	b.n	800a782 <_dtoa_r+0x782>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e788      	b.n	800a7de <_dtoa_r+0x7de>
 800a8cc:	3fe00000 	.word	0x3fe00000
 800a8d0:	40240000 	.word	0x40240000
 800a8d4:	40140000 	.word	0x40140000
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	e780      	b.n	800a7de <_dtoa_r+0x7de>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8e0:	e782      	b.n	800a7e8 <_dtoa_r+0x7e8>
 800a8e2:	d099      	beq.n	800a818 <_dtoa_r+0x818>
 800a8e4:	9a08      	ldr	r2, [sp, #32]
 800a8e6:	331c      	adds	r3, #28
 800a8e8:	441a      	add	r2, r3
 800a8ea:	4498      	add	r8, r3
 800a8ec:	441e      	add	r6, r3
 800a8ee:	9208      	str	r2, [sp, #32]
 800a8f0:	e792      	b.n	800a818 <_dtoa_r+0x818>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	e7f6      	b.n	800a8e4 <_dtoa_r+0x8e4>
 800a8f6:	9b07      	ldr	r3, [sp, #28]
 800a8f8:	9704      	str	r7, [sp, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dc20      	bgt.n	800a940 <_dtoa_r+0x940>
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a902:	2b02      	cmp	r3, #2
 800a904:	dd1e      	ble.n	800a944 <_dtoa_r+0x944>
 800a906:	9b00      	ldr	r3, [sp, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f47f aec0 	bne.w	800a68e <_dtoa_r+0x68e>
 800a90e:	4621      	mov	r1, r4
 800a910:	2205      	movs	r2, #5
 800a912:	4658      	mov	r0, fp
 800a914:	f000 fa9a 	bl	800ae4c <__multadd>
 800a918:	4601      	mov	r1, r0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4648      	mov	r0, r9
 800a91e:	f000 fcad 	bl	800b27c <__mcmp>
 800a922:	2800      	cmp	r0, #0
 800a924:	f77f aeb3 	ble.w	800a68e <_dtoa_r+0x68e>
 800a928:	4656      	mov	r6, sl
 800a92a:	2331      	movs	r3, #49	@ 0x31
 800a92c:	f806 3b01 	strb.w	r3, [r6], #1
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	9304      	str	r3, [sp, #16]
 800a936:	e6ae      	b.n	800a696 <_dtoa_r+0x696>
 800a938:	9c07      	ldr	r4, [sp, #28]
 800a93a:	9704      	str	r7, [sp, #16]
 800a93c:	4625      	mov	r5, r4
 800a93e:	e7f3      	b.n	800a928 <_dtoa_r+0x928>
 800a940:	9b07      	ldr	r3, [sp, #28]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 8104 	beq.w	800ab54 <_dtoa_r+0xb54>
 800a94c:	2e00      	cmp	r6, #0
 800a94e:	dd05      	ble.n	800a95c <_dtoa_r+0x95c>
 800a950:	4629      	mov	r1, r5
 800a952:	4632      	mov	r2, r6
 800a954:	4658      	mov	r0, fp
 800a956:	f000 fc25 	bl	800b1a4 <__lshift>
 800a95a:	4605      	mov	r5, r0
 800a95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d05a      	beq.n	800aa18 <_dtoa_r+0xa18>
 800a962:	6869      	ldr	r1, [r5, #4]
 800a964:	4658      	mov	r0, fp
 800a966:	f000 fa0f 	bl	800ad88 <_Balloc>
 800a96a:	4606      	mov	r6, r0
 800a96c:	b928      	cbnz	r0, 800a97a <_dtoa_r+0x97a>
 800a96e:	4b84      	ldr	r3, [pc, #528]	@ (800ab80 <_dtoa_r+0xb80>)
 800a970:	4602      	mov	r2, r0
 800a972:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a976:	f7ff bb5a 	b.w	800a02e <_dtoa_r+0x2e>
 800a97a:	692a      	ldr	r2, [r5, #16]
 800a97c:	3202      	adds	r2, #2
 800a97e:	0092      	lsls	r2, r2, #2
 800a980:	f105 010c 	add.w	r1, r5, #12
 800a984:	300c      	adds	r0, #12
 800a986:	f7ff faa4 	bl	8009ed2 <memcpy>
 800a98a:	2201      	movs	r2, #1
 800a98c:	4631      	mov	r1, r6
 800a98e:	4658      	mov	r0, fp
 800a990:	f000 fc08 	bl	800b1a4 <__lshift>
 800a994:	f10a 0301 	add.w	r3, sl, #1
 800a998:	9307      	str	r3, [sp, #28]
 800a99a:	9b00      	ldr	r3, [sp, #0]
 800a99c:	4453      	add	r3, sl
 800a99e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9a0:	9b02      	ldr	r3, [sp, #8]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	462f      	mov	r7, r5
 800a9a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4648      	mov	r0, r9
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	f7ff fa9a 	bl	8009eee <quorem>
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	9002      	str	r0, [sp, #8]
 800a9be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9c2:	4648      	mov	r0, r9
 800a9c4:	f000 fc5a 	bl	800b27c <__mcmp>
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	9008      	str	r0, [sp, #32]
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4658      	mov	r0, fp
 800a9d0:	f000 fc70 	bl	800b2b4 <__mdiff>
 800a9d4:	68c2      	ldr	r2, [r0, #12]
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	bb02      	cbnz	r2, 800aa1c <_dtoa_r+0xa1c>
 800a9da:	4601      	mov	r1, r0
 800a9dc:	4648      	mov	r0, r9
 800a9de:	f000 fc4d 	bl	800b27c <__mcmp>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9ea:	f000 fa0d 	bl	800ae08 <_Bfree>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9f2:	9e07      	ldr	r6, [sp, #28]
 800a9f4:	ea43 0102 	orr.w	r1, r3, r2
 800a9f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9fa:	4319      	orrs	r1, r3
 800a9fc:	d110      	bne.n	800aa20 <_dtoa_r+0xa20>
 800a9fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa02:	d029      	beq.n	800aa58 <_dtoa_r+0xa58>
 800aa04:	9b08      	ldr	r3, [sp, #32]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dd02      	ble.n	800aa10 <_dtoa_r+0xa10>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aa10:	9b00      	ldr	r3, [sp, #0]
 800aa12:	f883 8000 	strb.w	r8, [r3]
 800aa16:	e63f      	b.n	800a698 <_dtoa_r+0x698>
 800aa18:	4628      	mov	r0, r5
 800aa1a:	e7bb      	b.n	800a994 <_dtoa_r+0x994>
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	e7e1      	b.n	800a9e4 <_dtoa_r+0x9e4>
 800aa20:	9b08      	ldr	r3, [sp, #32]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	db04      	blt.n	800aa30 <_dtoa_r+0xa30>
 800aa26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	d120      	bne.n	800aa72 <_dtoa_r+0xa72>
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	dded      	ble.n	800aa10 <_dtoa_r+0xa10>
 800aa34:	4649      	mov	r1, r9
 800aa36:	2201      	movs	r2, #1
 800aa38:	4658      	mov	r0, fp
 800aa3a:	f000 fbb3 	bl	800b1a4 <__lshift>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4681      	mov	r9, r0
 800aa42:	f000 fc1b 	bl	800b27c <__mcmp>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	dc03      	bgt.n	800aa52 <_dtoa_r+0xa52>
 800aa4a:	d1e1      	bne.n	800aa10 <_dtoa_r+0xa10>
 800aa4c:	f018 0f01 	tst.w	r8, #1
 800aa50:	d0de      	beq.n	800aa10 <_dtoa_r+0xa10>
 800aa52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa56:	d1d8      	bne.n	800aa0a <_dtoa_r+0xa0a>
 800aa58:	9a00      	ldr	r2, [sp, #0]
 800aa5a:	2339      	movs	r3, #57	@ 0x39
 800aa5c:	7013      	strb	r3, [r2, #0]
 800aa5e:	4633      	mov	r3, r6
 800aa60:	461e      	mov	r6, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa68:	2a39      	cmp	r2, #57	@ 0x39
 800aa6a:	d052      	beq.n	800ab12 <_dtoa_r+0xb12>
 800aa6c:	3201      	adds	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	e612      	b.n	800a698 <_dtoa_r+0x698>
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	dd07      	ble.n	800aa86 <_dtoa_r+0xa86>
 800aa76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa7a:	d0ed      	beq.n	800aa58 <_dtoa_r+0xa58>
 800aa7c:	9a00      	ldr	r2, [sp, #0]
 800aa7e:	f108 0301 	add.w	r3, r8, #1
 800aa82:	7013      	strb	r3, [r2, #0]
 800aa84:	e608      	b.n	800a698 <_dtoa_r+0x698>
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	9a07      	ldr	r2, [sp, #28]
 800aa8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aa8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d028      	beq.n	800aae6 <_dtoa_r+0xae6>
 800aa94:	4649      	mov	r1, r9
 800aa96:	2300      	movs	r3, #0
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4658      	mov	r0, fp
 800aa9c:	f000 f9d6 	bl	800ae4c <__multadd>
 800aaa0:	42af      	cmp	r7, r5
 800aaa2:	4681      	mov	r9, r0
 800aaa4:	f04f 0300 	mov.w	r3, #0
 800aaa8:	f04f 020a 	mov.w	r2, #10
 800aaac:	4639      	mov	r1, r7
 800aaae:	4658      	mov	r0, fp
 800aab0:	d107      	bne.n	800aac2 <_dtoa_r+0xac2>
 800aab2:	f000 f9cb 	bl	800ae4c <__multadd>
 800aab6:	4607      	mov	r7, r0
 800aab8:	4605      	mov	r5, r0
 800aaba:	9b07      	ldr	r3, [sp, #28]
 800aabc:	3301      	adds	r3, #1
 800aabe:	9307      	str	r3, [sp, #28]
 800aac0:	e774      	b.n	800a9ac <_dtoa_r+0x9ac>
 800aac2:	f000 f9c3 	bl	800ae4c <__multadd>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4607      	mov	r7, r0
 800aaca:	2300      	movs	r3, #0
 800aacc:	220a      	movs	r2, #10
 800aace:	4658      	mov	r0, fp
 800aad0:	f000 f9bc 	bl	800ae4c <__multadd>
 800aad4:	4605      	mov	r5, r0
 800aad6:	e7f0      	b.n	800aaba <_dtoa_r+0xaba>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfcc      	ite	gt
 800aade:	461e      	movgt	r6, r3
 800aae0:	2601      	movle	r6, #1
 800aae2:	4456      	add	r6, sl
 800aae4:	2700      	movs	r7, #0
 800aae6:	4649      	mov	r1, r9
 800aae8:	2201      	movs	r2, #1
 800aaea:	4658      	mov	r0, fp
 800aaec:	f000 fb5a 	bl	800b1a4 <__lshift>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4681      	mov	r9, r0
 800aaf4:	f000 fbc2 	bl	800b27c <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	dcb0      	bgt.n	800aa5e <_dtoa_r+0xa5e>
 800aafc:	d102      	bne.n	800ab04 <_dtoa_r+0xb04>
 800aafe:	f018 0f01 	tst.w	r8, #1
 800ab02:	d1ac      	bne.n	800aa5e <_dtoa_r+0xa5e>
 800ab04:	4633      	mov	r3, r6
 800ab06:	461e      	mov	r6, r3
 800ab08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab0c:	2a30      	cmp	r2, #48	@ 0x30
 800ab0e:	d0fa      	beq.n	800ab06 <_dtoa_r+0xb06>
 800ab10:	e5c2      	b.n	800a698 <_dtoa_r+0x698>
 800ab12:	459a      	cmp	sl, r3
 800ab14:	d1a4      	bne.n	800aa60 <_dtoa_r+0xa60>
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	2331      	movs	r3, #49	@ 0x31
 800ab1e:	f88a 3000 	strb.w	r3, [sl]
 800ab22:	e5b9      	b.n	800a698 <_dtoa_r+0x698>
 800ab24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ab84 <_dtoa_r+0xb84>
 800ab2a:	b11b      	cbz	r3, 800ab34 <_dtoa_r+0xb34>
 800ab2c:	f10a 0308 	add.w	r3, sl, #8
 800ab30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	4650      	mov	r0, sl
 800ab36:	b019      	add	sp, #100	@ 0x64
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	f77f ae37 	ble.w	800a7b2 <_dtoa_r+0x7b2>
 800ab44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab48:	2001      	movs	r0, #1
 800ab4a:	e655      	b.n	800a7f8 <_dtoa_r+0x7f8>
 800ab4c:	9b00      	ldr	r3, [sp, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f77f aed6 	ble.w	800a900 <_dtoa_r+0x900>
 800ab54:	4656      	mov	r6, sl
 800ab56:	4621      	mov	r1, r4
 800ab58:	4648      	mov	r0, r9
 800ab5a:	f7ff f9c8 	bl	8009eee <quorem>
 800ab5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab62:	f806 8b01 	strb.w	r8, [r6], #1
 800ab66:	9b00      	ldr	r3, [sp, #0]
 800ab68:	eba6 020a 	sub.w	r2, r6, sl
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	ddb3      	ble.n	800aad8 <_dtoa_r+0xad8>
 800ab70:	4649      	mov	r1, r9
 800ab72:	2300      	movs	r3, #0
 800ab74:	220a      	movs	r2, #10
 800ab76:	4658      	mov	r0, fp
 800ab78:	f000 f968 	bl	800ae4c <__multadd>
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	e7ea      	b.n	800ab56 <_dtoa_r+0xb56>
 800ab80:	0800c1ac 	.word	0x0800c1ac
 800ab84:	0800c130 	.word	0x0800c130

0800ab88 <_free_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	d041      	beq.n	800ac14 <_free_r+0x8c>
 800ab90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab94:	1f0c      	subs	r4, r1, #4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfb8      	it	lt
 800ab9a:	18e4      	addlt	r4, r4, r3
 800ab9c:	f000 f8e8 	bl	800ad70 <__malloc_lock>
 800aba0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac18 <_free_r+0x90>)
 800aba2:	6813      	ldr	r3, [r2, #0]
 800aba4:	b933      	cbnz	r3, 800abb4 <_free_r+0x2c>
 800aba6:	6063      	str	r3, [r4, #4]
 800aba8:	6014      	str	r4, [r2, #0]
 800abaa:	4628      	mov	r0, r5
 800abac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb0:	f000 b8e4 	b.w	800ad7c <__malloc_unlock>
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	d908      	bls.n	800abca <_free_r+0x42>
 800abb8:	6820      	ldr	r0, [r4, #0]
 800abba:	1821      	adds	r1, r4, r0
 800abbc:	428b      	cmp	r3, r1
 800abbe:	bf01      	itttt	eq
 800abc0:	6819      	ldreq	r1, [r3, #0]
 800abc2:	685b      	ldreq	r3, [r3, #4]
 800abc4:	1809      	addeq	r1, r1, r0
 800abc6:	6021      	streq	r1, [r4, #0]
 800abc8:	e7ed      	b.n	800aba6 <_free_r+0x1e>
 800abca:	461a      	mov	r2, r3
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	b10b      	cbz	r3, 800abd4 <_free_r+0x4c>
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d9fa      	bls.n	800abca <_free_r+0x42>
 800abd4:	6811      	ldr	r1, [r2, #0]
 800abd6:	1850      	adds	r0, r2, r1
 800abd8:	42a0      	cmp	r0, r4
 800abda:	d10b      	bne.n	800abf4 <_free_r+0x6c>
 800abdc:	6820      	ldr	r0, [r4, #0]
 800abde:	4401      	add	r1, r0
 800abe0:	1850      	adds	r0, r2, r1
 800abe2:	4283      	cmp	r3, r0
 800abe4:	6011      	str	r1, [r2, #0]
 800abe6:	d1e0      	bne.n	800abaa <_free_r+0x22>
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	6053      	str	r3, [r2, #4]
 800abee:	4408      	add	r0, r1
 800abf0:	6010      	str	r0, [r2, #0]
 800abf2:	e7da      	b.n	800abaa <_free_r+0x22>
 800abf4:	d902      	bls.n	800abfc <_free_r+0x74>
 800abf6:	230c      	movs	r3, #12
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	e7d6      	b.n	800abaa <_free_r+0x22>
 800abfc:	6820      	ldr	r0, [r4, #0]
 800abfe:	1821      	adds	r1, r4, r0
 800ac00:	428b      	cmp	r3, r1
 800ac02:	bf04      	itt	eq
 800ac04:	6819      	ldreq	r1, [r3, #0]
 800ac06:	685b      	ldreq	r3, [r3, #4]
 800ac08:	6063      	str	r3, [r4, #4]
 800ac0a:	bf04      	itt	eq
 800ac0c:	1809      	addeq	r1, r1, r0
 800ac0e:	6021      	streq	r1, [r4, #0]
 800ac10:	6054      	str	r4, [r2, #4]
 800ac12:	e7ca      	b.n	800abaa <_free_r+0x22>
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	bf00      	nop
 800ac18:	20004f64 	.word	0x20004f64

0800ac1c <malloc>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <malloc+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f000 b825 	b.w	800ac70 <_malloc_r>
 800ac26:	bf00      	nop
 800ac28:	20000020 	.word	0x20000020

0800ac2c <sbrk_aligned>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4e0f      	ldr	r6, [pc, #60]	@ (800ac6c <sbrk_aligned+0x40>)
 800ac30:	460c      	mov	r4, r1
 800ac32:	6831      	ldr	r1, [r6, #0]
 800ac34:	4605      	mov	r5, r0
 800ac36:	b911      	cbnz	r1, 800ac3e <sbrk_aligned+0x12>
 800ac38:	f000 fe46 	bl	800b8c8 <_sbrk_r>
 800ac3c:	6030      	str	r0, [r6, #0]
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	f000 fe41 	bl	800b8c8 <_sbrk_r>
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	d103      	bne.n	800ac52 <sbrk_aligned+0x26>
 800ac4a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac4e:	4620      	mov	r0, r4
 800ac50:	bd70      	pop	{r4, r5, r6, pc}
 800ac52:	1cc4      	adds	r4, r0, #3
 800ac54:	f024 0403 	bic.w	r4, r4, #3
 800ac58:	42a0      	cmp	r0, r4
 800ac5a:	d0f8      	beq.n	800ac4e <sbrk_aligned+0x22>
 800ac5c:	1a21      	subs	r1, r4, r0
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 fe32 	bl	800b8c8 <_sbrk_r>
 800ac64:	3001      	adds	r0, #1
 800ac66:	d1f2      	bne.n	800ac4e <sbrk_aligned+0x22>
 800ac68:	e7ef      	b.n	800ac4a <sbrk_aligned+0x1e>
 800ac6a:	bf00      	nop
 800ac6c:	20004f60 	.word	0x20004f60

0800ac70 <_malloc_r>:
 800ac70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac74:	1ccd      	adds	r5, r1, #3
 800ac76:	f025 0503 	bic.w	r5, r5, #3
 800ac7a:	3508      	adds	r5, #8
 800ac7c:	2d0c      	cmp	r5, #12
 800ac7e:	bf38      	it	cc
 800ac80:	250c      	movcc	r5, #12
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	4606      	mov	r6, r0
 800ac86:	db01      	blt.n	800ac8c <_malloc_r+0x1c>
 800ac88:	42a9      	cmp	r1, r5
 800ac8a:	d904      	bls.n	800ac96 <_malloc_r+0x26>
 800ac8c:	230c      	movs	r3, #12
 800ac8e:	6033      	str	r3, [r6, #0]
 800ac90:	2000      	movs	r0, #0
 800ac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad6c <_malloc_r+0xfc>
 800ac9a:	f000 f869 	bl	800ad70 <__malloc_lock>
 800ac9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aca2:	461c      	mov	r4, r3
 800aca4:	bb44      	cbnz	r4, 800acf8 <_malloc_r+0x88>
 800aca6:	4629      	mov	r1, r5
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7ff ffbf 	bl	800ac2c <sbrk_aligned>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	4604      	mov	r4, r0
 800acb2:	d158      	bne.n	800ad66 <_malloc_r+0xf6>
 800acb4:	f8d8 4000 	ldr.w	r4, [r8]
 800acb8:	4627      	mov	r7, r4
 800acba:	2f00      	cmp	r7, #0
 800acbc:	d143      	bne.n	800ad46 <_malloc_r+0xd6>
 800acbe:	2c00      	cmp	r4, #0
 800acc0:	d04b      	beq.n	800ad5a <_malloc_r+0xea>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	4639      	mov	r1, r7
 800acc6:	4630      	mov	r0, r6
 800acc8:	eb04 0903 	add.w	r9, r4, r3
 800accc:	f000 fdfc 	bl	800b8c8 <_sbrk_r>
 800acd0:	4581      	cmp	r9, r0
 800acd2:	d142      	bne.n	800ad5a <_malloc_r+0xea>
 800acd4:	6821      	ldr	r1, [r4, #0]
 800acd6:	1a6d      	subs	r5, r5, r1
 800acd8:	4629      	mov	r1, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	f7ff ffa6 	bl	800ac2c <sbrk_aligned>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d03a      	beq.n	800ad5a <_malloc_r+0xea>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	442b      	add	r3, r5
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	f8d8 3000 	ldr.w	r3, [r8]
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	bb62      	cbnz	r2, 800ad4c <_malloc_r+0xdc>
 800acf2:	f8c8 7000 	str.w	r7, [r8]
 800acf6:	e00f      	b.n	800ad18 <_malloc_r+0xa8>
 800acf8:	6822      	ldr	r2, [r4, #0]
 800acfa:	1b52      	subs	r2, r2, r5
 800acfc:	d420      	bmi.n	800ad40 <_malloc_r+0xd0>
 800acfe:	2a0b      	cmp	r2, #11
 800ad00:	d917      	bls.n	800ad32 <_malloc_r+0xc2>
 800ad02:	1961      	adds	r1, r4, r5
 800ad04:	42a3      	cmp	r3, r4
 800ad06:	6025      	str	r5, [r4, #0]
 800ad08:	bf18      	it	ne
 800ad0a:	6059      	strne	r1, [r3, #4]
 800ad0c:	6863      	ldr	r3, [r4, #4]
 800ad0e:	bf08      	it	eq
 800ad10:	f8c8 1000 	streq.w	r1, [r8]
 800ad14:	5162      	str	r2, [r4, r5]
 800ad16:	604b      	str	r3, [r1, #4]
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f000 f82f 	bl	800ad7c <__malloc_unlock>
 800ad1e:	f104 000b 	add.w	r0, r4, #11
 800ad22:	1d23      	adds	r3, r4, #4
 800ad24:	f020 0007 	bic.w	r0, r0, #7
 800ad28:	1ac2      	subs	r2, r0, r3
 800ad2a:	bf1c      	itt	ne
 800ad2c:	1a1b      	subne	r3, r3, r0
 800ad2e:	50a3      	strne	r3, [r4, r2]
 800ad30:	e7af      	b.n	800ac92 <_malloc_r+0x22>
 800ad32:	6862      	ldr	r2, [r4, #4]
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	bf0c      	ite	eq
 800ad38:	f8c8 2000 	streq.w	r2, [r8]
 800ad3c:	605a      	strne	r2, [r3, #4]
 800ad3e:	e7eb      	b.n	800ad18 <_malloc_r+0xa8>
 800ad40:	4623      	mov	r3, r4
 800ad42:	6864      	ldr	r4, [r4, #4]
 800ad44:	e7ae      	b.n	800aca4 <_malloc_r+0x34>
 800ad46:	463c      	mov	r4, r7
 800ad48:	687f      	ldr	r7, [r7, #4]
 800ad4a:	e7b6      	b.n	800acba <_malloc_r+0x4a>
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	42a3      	cmp	r3, r4
 800ad52:	d1fb      	bne.n	800ad4c <_malloc_r+0xdc>
 800ad54:	2300      	movs	r3, #0
 800ad56:	6053      	str	r3, [r2, #4]
 800ad58:	e7de      	b.n	800ad18 <_malloc_r+0xa8>
 800ad5a:	230c      	movs	r3, #12
 800ad5c:	6033      	str	r3, [r6, #0]
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f000 f80c 	bl	800ad7c <__malloc_unlock>
 800ad64:	e794      	b.n	800ac90 <_malloc_r+0x20>
 800ad66:	6005      	str	r5, [r0, #0]
 800ad68:	e7d6      	b.n	800ad18 <_malloc_r+0xa8>
 800ad6a:	bf00      	nop
 800ad6c:	20004f64 	.word	0x20004f64

0800ad70 <__malloc_lock>:
 800ad70:	4801      	ldr	r0, [pc, #4]	@ (800ad78 <__malloc_lock+0x8>)
 800ad72:	f7ff b8ac 	b.w	8009ece <__retarget_lock_acquire_recursive>
 800ad76:	bf00      	nop
 800ad78:	20004f5c 	.word	0x20004f5c

0800ad7c <__malloc_unlock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	@ (800ad84 <__malloc_unlock+0x8>)
 800ad7e:	f7ff b8a7 	b.w	8009ed0 <__retarget_lock_release_recursive>
 800ad82:	bf00      	nop
 800ad84:	20004f5c 	.word	0x20004f5c

0800ad88 <_Balloc>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	69c6      	ldr	r6, [r0, #28]
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	460d      	mov	r5, r1
 800ad90:	b976      	cbnz	r6, 800adb0 <_Balloc+0x28>
 800ad92:	2010      	movs	r0, #16
 800ad94:	f7ff ff42 	bl	800ac1c <malloc>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	61e0      	str	r0, [r4, #28]
 800ad9c:	b920      	cbnz	r0, 800ada8 <_Balloc+0x20>
 800ad9e:	4b18      	ldr	r3, [pc, #96]	@ (800ae00 <_Balloc+0x78>)
 800ada0:	4818      	ldr	r0, [pc, #96]	@ (800ae04 <_Balloc+0x7c>)
 800ada2:	216b      	movs	r1, #107	@ 0x6b
 800ada4:	f000 fda0 	bl	800b8e8 <__assert_func>
 800ada8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adac:	6006      	str	r6, [r0, #0]
 800adae:	60c6      	str	r6, [r0, #12]
 800adb0:	69e6      	ldr	r6, [r4, #28]
 800adb2:	68f3      	ldr	r3, [r6, #12]
 800adb4:	b183      	cbz	r3, 800add8 <_Balloc+0x50>
 800adb6:	69e3      	ldr	r3, [r4, #28]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adbe:	b9b8      	cbnz	r0, 800adf0 <_Balloc+0x68>
 800adc0:	2101      	movs	r1, #1
 800adc2:	fa01 f605 	lsl.w	r6, r1, r5
 800adc6:	1d72      	adds	r2, r6, #5
 800adc8:	0092      	lsls	r2, r2, #2
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fdaa 	bl	800b924 <_calloc_r>
 800add0:	b160      	cbz	r0, 800adec <_Balloc+0x64>
 800add2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800add6:	e00e      	b.n	800adf6 <_Balloc+0x6e>
 800add8:	2221      	movs	r2, #33	@ 0x21
 800adda:	2104      	movs	r1, #4
 800addc:	4620      	mov	r0, r4
 800adde:	f000 fda1 	bl	800b924 <_calloc_r>
 800ade2:	69e3      	ldr	r3, [r4, #28]
 800ade4:	60f0      	str	r0, [r6, #12]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e4      	bne.n	800adb6 <_Balloc+0x2e>
 800adec:	2000      	movs	r0, #0
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	6802      	ldr	r2, [r0, #0]
 800adf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adf6:	2300      	movs	r3, #0
 800adf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adfc:	e7f7      	b.n	800adee <_Balloc+0x66>
 800adfe:	bf00      	nop
 800ae00:	0800c13d 	.word	0x0800c13d
 800ae04:	0800c1bd 	.word	0x0800c1bd

0800ae08 <_Bfree>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	69c6      	ldr	r6, [r0, #28]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	b976      	cbnz	r6, 800ae30 <_Bfree+0x28>
 800ae12:	2010      	movs	r0, #16
 800ae14:	f7ff ff02 	bl	800ac1c <malloc>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	61e8      	str	r0, [r5, #28]
 800ae1c:	b920      	cbnz	r0, 800ae28 <_Bfree+0x20>
 800ae1e:	4b09      	ldr	r3, [pc, #36]	@ (800ae44 <_Bfree+0x3c>)
 800ae20:	4809      	ldr	r0, [pc, #36]	@ (800ae48 <_Bfree+0x40>)
 800ae22:	218f      	movs	r1, #143	@ 0x8f
 800ae24:	f000 fd60 	bl	800b8e8 <__assert_func>
 800ae28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae2c:	6006      	str	r6, [r0, #0]
 800ae2e:	60c6      	str	r6, [r0, #12]
 800ae30:	b13c      	cbz	r4, 800ae42 <_Bfree+0x3a>
 800ae32:	69eb      	ldr	r3, [r5, #28]
 800ae34:	6862      	ldr	r2, [r4, #4]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae3c:	6021      	str	r1, [r4, #0]
 800ae3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	0800c13d 	.word	0x0800c13d
 800ae48:	0800c1bd 	.word	0x0800c1bd

0800ae4c <__multadd>:
 800ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae50:	690d      	ldr	r5, [r1, #16]
 800ae52:	4607      	mov	r7, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	461e      	mov	r6, r3
 800ae58:	f101 0c14 	add.w	ip, r1, #20
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae62:	b299      	uxth	r1, r3
 800ae64:	fb02 6101 	mla	r1, r2, r1, r6
 800ae68:	0c1e      	lsrs	r6, r3, #16
 800ae6a:	0c0b      	lsrs	r3, r1, #16
 800ae6c:	fb02 3306 	mla	r3, r2, r6, r3
 800ae70:	b289      	uxth	r1, r1
 800ae72:	3001      	adds	r0, #1
 800ae74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae78:	4285      	cmp	r5, r0
 800ae7a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae82:	dcec      	bgt.n	800ae5e <__multadd+0x12>
 800ae84:	b30e      	cbz	r6, 800aeca <__multadd+0x7e>
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	dc19      	bgt.n	800aec0 <__multadd+0x74>
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	4638      	mov	r0, r7
 800ae90:	3101      	adds	r1, #1
 800ae92:	f7ff ff79 	bl	800ad88 <_Balloc>
 800ae96:	4680      	mov	r8, r0
 800ae98:	b928      	cbnz	r0, 800aea6 <__multadd+0x5a>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	4b0c      	ldr	r3, [pc, #48]	@ (800aed0 <__multadd+0x84>)
 800ae9e:	480d      	ldr	r0, [pc, #52]	@ (800aed4 <__multadd+0x88>)
 800aea0:	21ba      	movs	r1, #186	@ 0xba
 800aea2:	f000 fd21 	bl	800b8e8 <__assert_func>
 800aea6:	6922      	ldr	r2, [r4, #16]
 800aea8:	3202      	adds	r2, #2
 800aeaa:	f104 010c 	add.w	r1, r4, #12
 800aeae:	0092      	lsls	r2, r2, #2
 800aeb0:	300c      	adds	r0, #12
 800aeb2:	f7ff f80e 	bl	8009ed2 <memcpy>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4638      	mov	r0, r7
 800aeba:	f7ff ffa5 	bl	800ae08 <_Bfree>
 800aebe:	4644      	mov	r4, r8
 800aec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aec4:	3501      	adds	r5, #1
 800aec6:	615e      	str	r6, [r3, #20]
 800aec8:	6125      	str	r5, [r4, #16]
 800aeca:	4620      	mov	r0, r4
 800aecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed0:	0800c1ac 	.word	0x0800c1ac
 800aed4:	0800c1bd 	.word	0x0800c1bd

0800aed8 <__hi0bits>:
 800aed8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aedc:	4603      	mov	r3, r0
 800aede:	bf36      	itet	cc
 800aee0:	0403      	lslcc	r3, r0, #16
 800aee2:	2000      	movcs	r0, #0
 800aee4:	2010      	movcc	r0, #16
 800aee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aeea:	bf3c      	itt	cc
 800aeec:	021b      	lslcc	r3, r3, #8
 800aeee:	3008      	addcc	r0, #8
 800aef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aef4:	bf3c      	itt	cc
 800aef6:	011b      	lslcc	r3, r3, #4
 800aef8:	3004      	addcc	r0, #4
 800aefa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aefe:	bf3c      	itt	cc
 800af00:	009b      	lslcc	r3, r3, #2
 800af02:	3002      	addcc	r0, #2
 800af04:	2b00      	cmp	r3, #0
 800af06:	db05      	blt.n	800af14 <__hi0bits+0x3c>
 800af08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af0c:	f100 0001 	add.w	r0, r0, #1
 800af10:	bf08      	it	eq
 800af12:	2020      	moveq	r0, #32
 800af14:	4770      	bx	lr

0800af16 <__lo0bits>:
 800af16:	6803      	ldr	r3, [r0, #0]
 800af18:	4602      	mov	r2, r0
 800af1a:	f013 0007 	ands.w	r0, r3, #7
 800af1e:	d00b      	beq.n	800af38 <__lo0bits+0x22>
 800af20:	07d9      	lsls	r1, r3, #31
 800af22:	d421      	bmi.n	800af68 <__lo0bits+0x52>
 800af24:	0798      	lsls	r0, r3, #30
 800af26:	bf49      	itett	mi
 800af28:	085b      	lsrmi	r3, r3, #1
 800af2a:	089b      	lsrpl	r3, r3, #2
 800af2c:	2001      	movmi	r0, #1
 800af2e:	6013      	strmi	r3, [r2, #0]
 800af30:	bf5c      	itt	pl
 800af32:	6013      	strpl	r3, [r2, #0]
 800af34:	2002      	movpl	r0, #2
 800af36:	4770      	bx	lr
 800af38:	b299      	uxth	r1, r3
 800af3a:	b909      	cbnz	r1, 800af40 <__lo0bits+0x2a>
 800af3c:	0c1b      	lsrs	r3, r3, #16
 800af3e:	2010      	movs	r0, #16
 800af40:	b2d9      	uxtb	r1, r3
 800af42:	b909      	cbnz	r1, 800af48 <__lo0bits+0x32>
 800af44:	3008      	adds	r0, #8
 800af46:	0a1b      	lsrs	r3, r3, #8
 800af48:	0719      	lsls	r1, r3, #28
 800af4a:	bf04      	itt	eq
 800af4c:	091b      	lsreq	r3, r3, #4
 800af4e:	3004      	addeq	r0, #4
 800af50:	0799      	lsls	r1, r3, #30
 800af52:	bf04      	itt	eq
 800af54:	089b      	lsreq	r3, r3, #2
 800af56:	3002      	addeq	r0, #2
 800af58:	07d9      	lsls	r1, r3, #31
 800af5a:	d403      	bmi.n	800af64 <__lo0bits+0x4e>
 800af5c:	085b      	lsrs	r3, r3, #1
 800af5e:	f100 0001 	add.w	r0, r0, #1
 800af62:	d003      	beq.n	800af6c <__lo0bits+0x56>
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	4770      	bx	lr
 800af68:	2000      	movs	r0, #0
 800af6a:	4770      	bx	lr
 800af6c:	2020      	movs	r0, #32
 800af6e:	4770      	bx	lr

0800af70 <__i2b>:
 800af70:	b510      	push	{r4, lr}
 800af72:	460c      	mov	r4, r1
 800af74:	2101      	movs	r1, #1
 800af76:	f7ff ff07 	bl	800ad88 <_Balloc>
 800af7a:	4602      	mov	r2, r0
 800af7c:	b928      	cbnz	r0, 800af8a <__i2b+0x1a>
 800af7e:	4b05      	ldr	r3, [pc, #20]	@ (800af94 <__i2b+0x24>)
 800af80:	4805      	ldr	r0, [pc, #20]	@ (800af98 <__i2b+0x28>)
 800af82:	f240 1145 	movw	r1, #325	@ 0x145
 800af86:	f000 fcaf 	bl	800b8e8 <__assert_func>
 800af8a:	2301      	movs	r3, #1
 800af8c:	6144      	str	r4, [r0, #20]
 800af8e:	6103      	str	r3, [r0, #16]
 800af90:	bd10      	pop	{r4, pc}
 800af92:	bf00      	nop
 800af94:	0800c1ac 	.word	0x0800c1ac
 800af98:	0800c1bd 	.word	0x0800c1bd

0800af9c <__multiply>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	4614      	mov	r4, r2
 800afa2:	690a      	ldr	r2, [r1, #16]
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	bfa8      	it	ge
 800afaa:	4623      	movge	r3, r4
 800afac:	460f      	mov	r7, r1
 800afae:	bfa4      	itt	ge
 800afb0:	460c      	movge	r4, r1
 800afb2:	461f      	movge	r7, r3
 800afb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800afb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	6861      	ldr	r1, [r4, #4]
 800afc0:	eb0a 0609 	add.w	r6, sl, r9
 800afc4:	42b3      	cmp	r3, r6
 800afc6:	b085      	sub	sp, #20
 800afc8:	bfb8      	it	lt
 800afca:	3101      	addlt	r1, #1
 800afcc:	f7ff fedc 	bl	800ad88 <_Balloc>
 800afd0:	b930      	cbnz	r0, 800afe0 <__multiply+0x44>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4b44      	ldr	r3, [pc, #272]	@ (800b0e8 <__multiply+0x14c>)
 800afd6:	4845      	ldr	r0, [pc, #276]	@ (800b0ec <__multiply+0x150>)
 800afd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800afdc:	f000 fc84 	bl	800b8e8 <__assert_func>
 800afe0:	f100 0514 	add.w	r5, r0, #20
 800afe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800afe8:	462b      	mov	r3, r5
 800afea:	2200      	movs	r2, #0
 800afec:	4543      	cmp	r3, r8
 800afee:	d321      	bcc.n	800b034 <__multiply+0x98>
 800aff0:	f107 0114 	add.w	r1, r7, #20
 800aff4:	f104 0214 	add.w	r2, r4, #20
 800aff8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800affc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b000:	9302      	str	r3, [sp, #8]
 800b002:	1b13      	subs	r3, r2, r4
 800b004:	3b15      	subs	r3, #21
 800b006:	f023 0303 	bic.w	r3, r3, #3
 800b00a:	3304      	adds	r3, #4
 800b00c:	f104 0715 	add.w	r7, r4, #21
 800b010:	42ba      	cmp	r2, r7
 800b012:	bf38      	it	cc
 800b014:	2304      	movcc	r3, #4
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	9b02      	ldr	r3, [sp, #8]
 800b01a:	9103      	str	r1, [sp, #12]
 800b01c:	428b      	cmp	r3, r1
 800b01e:	d80c      	bhi.n	800b03a <__multiply+0x9e>
 800b020:	2e00      	cmp	r6, #0
 800b022:	dd03      	ble.n	800b02c <__multiply+0x90>
 800b024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d05b      	beq.n	800b0e4 <__multiply+0x148>
 800b02c:	6106      	str	r6, [r0, #16]
 800b02e:	b005      	add	sp, #20
 800b030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b034:	f843 2b04 	str.w	r2, [r3], #4
 800b038:	e7d8      	b.n	800afec <__multiply+0x50>
 800b03a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b03e:	f1ba 0f00 	cmp.w	sl, #0
 800b042:	d024      	beq.n	800b08e <__multiply+0xf2>
 800b044:	f104 0e14 	add.w	lr, r4, #20
 800b048:	46a9      	mov	r9, r5
 800b04a:	f04f 0c00 	mov.w	ip, #0
 800b04e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b052:	f8d9 3000 	ldr.w	r3, [r9]
 800b056:	fa1f fb87 	uxth.w	fp, r7
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b060:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b064:	f8d9 7000 	ldr.w	r7, [r9]
 800b068:	4463      	add	r3, ip
 800b06a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b06e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b072:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b076:	b29b      	uxth	r3, r3
 800b078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b07c:	4572      	cmp	r2, lr
 800b07e:	f849 3b04 	str.w	r3, [r9], #4
 800b082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b086:	d8e2      	bhi.n	800b04e <__multiply+0xb2>
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	f845 c003 	str.w	ip, [r5, r3]
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b094:	3104      	adds	r1, #4
 800b096:	f1b9 0f00 	cmp.w	r9, #0
 800b09a:	d021      	beq.n	800b0e0 <__multiply+0x144>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	f104 0c14 	add.w	ip, r4, #20
 800b0a2:	46ae      	mov	lr, r5
 800b0a4:	f04f 0a00 	mov.w	sl, #0
 800b0a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b0ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b0b0:	fb09 770b 	mla	r7, r9, fp, r7
 800b0b4:	4457      	add	r7, sl
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0bc:	f84e 3b04 	str.w	r3, [lr], #4
 800b0c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0c8:	f8be 3000 	ldrh.w	r3, [lr]
 800b0cc:	fb09 330a 	mla	r3, r9, sl, r3
 800b0d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b0d4:	4562      	cmp	r2, ip
 800b0d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0da:	d8e5      	bhi.n	800b0a8 <__multiply+0x10c>
 800b0dc:	9f01      	ldr	r7, [sp, #4]
 800b0de:	51eb      	str	r3, [r5, r7]
 800b0e0:	3504      	adds	r5, #4
 800b0e2:	e799      	b.n	800b018 <__multiply+0x7c>
 800b0e4:	3e01      	subs	r6, #1
 800b0e6:	e79b      	b.n	800b020 <__multiply+0x84>
 800b0e8:	0800c1ac 	.word	0x0800c1ac
 800b0ec:	0800c1bd 	.word	0x0800c1bd

0800b0f0 <__pow5mult>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	4615      	mov	r5, r2
 800b0f6:	f012 0203 	ands.w	r2, r2, #3
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	460e      	mov	r6, r1
 800b0fe:	d007      	beq.n	800b110 <__pow5mult+0x20>
 800b100:	4c25      	ldr	r4, [pc, #148]	@ (800b198 <__pow5mult+0xa8>)
 800b102:	3a01      	subs	r2, #1
 800b104:	2300      	movs	r3, #0
 800b106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b10a:	f7ff fe9f 	bl	800ae4c <__multadd>
 800b10e:	4606      	mov	r6, r0
 800b110:	10ad      	asrs	r5, r5, #2
 800b112:	d03d      	beq.n	800b190 <__pow5mult+0xa0>
 800b114:	69fc      	ldr	r4, [r7, #28]
 800b116:	b97c      	cbnz	r4, 800b138 <__pow5mult+0x48>
 800b118:	2010      	movs	r0, #16
 800b11a:	f7ff fd7f 	bl	800ac1c <malloc>
 800b11e:	4602      	mov	r2, r0
 800b120:	61f8      	str	r0, [r7, #28]
 800b122:	b928      	cbnz	r0, 800b130 <__pow5mult+0x40>
 800b124:	4b1d      	ldr	r3, [pc, #116]	@ (800b19c <__pow5mult+0xac>)
 800b126:	481e      	ldr	r0, [pc, #120]	@ (800b1a0 <__pow5mult+0xb0>)
 800b128:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b12c:	f000 fbdc 	bl	800b8e8 <__assert_func>
 800b130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b134:	6004      	str	r4, [r0, #0]
 800b136:	60c4      	str	r4, [r0, #12]
 800b138:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b140:	b94c      	cbnz	r4, 800b156 <__pow5mult+0x66>
 800b142:	f240 2171 	movw	r1, #625	@ 0x271
 800b146:	4638      	mov	r0, r7
 800b148:	f7ff ff12 	bl	800af70 <__i2b>
 800b14c:	2300      	movs	r3, #0
 800b14e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b152:	4604      	mov	r4, r0
 800b154:	6003      	str	r3, [r0, #0]
 800b156:	f04f 0900 	mov.w	r9, #0
 800b15a:	07eb      	lsls	r3, r5, #31
 800b15c:	d50a      	bpl.n	800b174 <__pow5mult+0x84>
 800b15e:	4631      	mov	r1, r6
 800b160:	4622      	mov	r2, r4
 800b162:	4638      	mov	r0, r7
 800b164:	f7ff ff1a 	bl	800af9c <__multiply>
 800b168:	4631      	mov	r1, r6
 800b16a:	4680      	mov	r8, r0
 800b16c:	4638      	mov	r0, r7
 800b16e:	f7ff fe4b 	bl	800ae08 <_Bfree>
 800b172:	4646      	mov	r6, r8
 800b174:	106d      	asrs	r5, r5, #1
 800b176:	d00b      	beq.n	800b190 <__pow5mult+0xa0>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	b938      	cbnz	r0, 800b18c <__pow5mult+0x9c>
 800b17c:	4622      	mov	r2, r4
 800b17e:	4621      	mov	r1, r4
 800b180:	4638      	mov	r0, r7
 800b182:	f7ff ff0b 	bl	800af9c <__multiply>
 800b186:	6020      	str	r0, [r4, #0]
 800b188:	f8c0 9000 	str.w	r9, [r0]
 800b18c:	4604      	mov	r4, r0
 800b18e:	e7e4      	b.n	800b15a <__pow5mult+0x6a>
 800b190:	4630      	mov	r0, r6
 800b192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b196:	bf00      	nop
 800b198:	0800c218 	.word	0x0800c218
 800b19c:	0800c13d 	.word	0x0800c13d
 800b1a0:	0800c1bd 	.word	0x0800c1bd

0800b1a4 <__lshift>:
 800b1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	6849      	ldr	r1, [r1, #4]
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1b2:	68a3      	ldr	r3, [r4, #8]
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	4691      	mov	r9, r2
 800b1b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1bc:	f108 0601 	add.w	r6, r8, #1
 800b1c0:	42b3      	cmp	r3, r6
 800b1c2:	db0b      	blt.n	800b1dc <__lshift+0x38>
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f7ff fddf 	bl	800ad88 <_Balloc>
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	b948      	cbnz	r0, 800b1e2 <__lshift+0x3e>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	4b28      	ldr	r3, [pc, #160]	@ (800b274 <__lshift+0xd0>)
 800b1d2:	4829      	ldr	r0, [pc, #164]	@ (800b278 <__lshift+0xd4>)
 800b1d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b1d8:	f000 fb86 	bl	800b8e8 <__assert_func>
 800b1dc:	3101      	adds	r1, #1
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	e7ee      	b.n	800b1c0 <__lshift+0x1c>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f100 0114 	add.w	r1, r0, #20
 800b1e8:	f100 0210 	add.w	r2, r0, #16
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	4553      	cmp	r3, sl
 800b1f0:	db33      	blt.n	800b25a <__lshift+0xb6>
 800b1f2:	6920      	ldr	r0, [r4, #16]
 800b1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1f8:	f104 0314 	add.w	r3, r4, #20
 800b1fc:	f019 091f 	ands.w	r9, r9, #31
 800b200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b208:	d02b      	beq.n	800b262 <__lshift+0xbe>
 800b20a:	f1c9 0e20 	rsb	lr, r9, #32
 800b20e:	468a      	mov	sl, r1
 800b210:	2200      	movs	r2, #0
 800b212:	6818      	ldr	r0, [r3, #0]
 800b214:	fa00 f009 	lsl.w	r0, r0, r9
 800b218:	4310      	orrs	r0, r2
 800b21a:	f84a 0b04 	str.w	r0, [sl], #4
 800b21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b222:	459c      	cmp	ip, r3
 800b224:	fa22 f20e 	lsr.w	r2, r2, lr
 800b228:	d8f3      	bhi.n	800b212 <__lshift+0x6e>
 800b22a:	ebac 0304 	sub.w	r3, ip, r4
 800b22e:	3b15      	subs	r3, #21
 800b230:	f023 0303 	bic.w	r3, r3, #3
 800b234:	3304      	adds	r3, #4
 800b236:	f104 0015 	add.w	r0, r4, #21
 800b23a:	4584      	cmp	ip, r0
 800b23c:	bf38      	it	cc
 800b23e:	2304      	movcc	r3, #4
 800b240:	50ca      	str	r2, [r1, r3]
 800b242:	b10a      	cbz	r2, 800b248 <__lshift+0xa4>
 800b244:	f108 0602 	add.w	r6, r8, #2
 800b248:	3e01      	subs	r6, #1
 800b24a:	4638      	mov	r0, r7
 800b24c:	612e      	str	r6, [r5, #16]
 800b24e:	4621      	mov	r1, r4
 800b250:	f7ff fdda 	bl	800ae08 <_Bfree>
 800b254:	4628      	mov	r0, r5
 800b256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b25a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b25e:	3301      	adds	r3, #1
 800b260:	e7c5      	b.n	800b1ee <__lshift+0x4a>
 800b262:	3904      	subs	r1, #4
 800b264:	f853 2b04 	ldr.w	r2, [r3], #4
 800b268:	f841 2f04 	str.w	r2, [r1, #4]!
 800b26c:	459c      	cmp	ip, r3
 800b26e:	d8f9      	bhi.n	800b264 <__lshift+0xc0>
 800b270:	e7ea      	b.n	800b248 <__lshift+0xa4>
 800b272:	bf00      	nop
 800b274:	0800c1ac 	.word	0x0800c1ac
 800b278:	0800c1bd 	.word	0x0800c1bd

0800b27c <__mcmp>:
 800b27c:	690a      	ldr	r2, [r1, #16]
 800b27e:	4603      	mov	r3, r0
 800b280:	6900      	ldr	r0, [r0, #16]
 800b282:	1a80      	subs	r0, r0, r2
 800b284:	b530      	push	{r4, r5, lr}
 800b286:	d10e      	bne.n	800b2a6 <__mcmp+0x2a>
 800b288:	3314      	adds	r3, #20
 800b28a:	3114      	adds	r1, #20
 800b28c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b290:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b29c:	4295      	cmp	r5, r2
 800b29e:	d003      	beq.n	800b2a8 <__mcmp+0x2c>
 800b2a0:	d205      	bcs.n	800b2ae <__mcmp+0x32>
 800b2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a6:	bd30      	pop	{r4, r5, pc}
 800b2a8:	42a3      	cmp	r3, r4
 800b2aa:	d3f3      	bcc.n	800b294 <__mcmp+0x18>
 800b2ac:	e7fb      	b.n	800b2a6 <__mcmp+0x2a>
 800b2ae:	2001      	movs	r0, #1
 800b2b0:	e7f9      	b.n	800b2a6 <__mcmp+0x2a>
	...

0800b2b4 <__mdiff>:
 800b2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	4689      	mov	r9, r1
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	4611      	mov	r1, r2
 800b2be:	4648      	mov	r0, r9
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	f7ff ffdb 	bl	800b27c <__mcmp>
 800b2c6:	1e05      	subs	r5, r0, #0
 800b2c8:	d112      	bne.n	800b2f0 <__mdiff+0x3c>
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff fd5b 	bl	800ad88 <_Balloc>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	b928      	cbnz	r0, 800b2e2 <__mdiff+0x2e>
 800b2d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b3d4 <__mdiff+0x120>)
 800b2d8:	f240 2137 	movw	r1, #567	@ 0x237
 800b2dc:	483e      	ldr	r0, [pc, #248]	@ (800b3d8 <__mdiff+0x124>)
 800b2de:	f000 fb03 	bl	800b8e8 <__assert_func>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	b003      	add	sp, #12
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	bfbc      	itt	lt
 800b2f2:	464b      	movlt	r3, r9
 800b2f4:	46a1      	movlt	r9, r4
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b2fc:	bfba      	itte	lt
 800b2fe:	461c      	movlt	r4, r3
 800b300:	2501      	movlt	r5, #1
 800b302:	2500      	movge	r5, #0
 800b304:	f7ff fd40 	bl	800ad88 <_Balloc>
 800b308:	4602      	mov	r2, r0
 800b30a:	b918      	cbnz	r0, 800b314 <__mdiff+0x60>
 800b30c:	4b31      	ldr	r3, [pc, #196]	@ (800b3d4 <__mdiff+0x120>)
 800b30e:	f240 2145 	movw	r1, #581	@ 0x245
 800b312:	e7e3      	b.n	800b2dc <__mdiff+0x28>
 800b314:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b318:	6926      	ldr	r6, [r4, #16]
 800b31a:	60c5      	str	r5, [r0, #12]
 800b31c:	f109 0310 	add.w	r3, r9, #16
 800b320:	f109 0514 	add.w	r5, r9, #20
 800b324:	f104 0e14 	add.w	lr, r4, #20
 800b328:	f100 0b14 	add.w	fp, r0, #20
 800b32c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b330:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	46d9      	mov	r9, fp
 800b338:	f04f 0c00 	mov.w	ip, #0
 800b33c:	9b01      	ldr	r3, [sp, #4]
 800b33e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b342:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	fa1f f38a 	uxth.w	r3, sl
 800b34c:	4619      	mov	r1, r3
 800b34e:	b283      	uxth	r3, r0
 800b350:	1acb      	subs	r3, r1, r3
 800b352:	0c00      	lsrs	r0, r0, #16
 800b354:	4463      	add	r3, ip
 800b356:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b35a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b35e:	b29b      	uxth	r3, r3
 800b360:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b364:	4576      	cmp	r6, lr
 800b366:	f849 3b04 	str.w	r3, [r9], #4
 800b36a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b36e:	d8e5      	bhi.n	800b33c <__mdiff+0x88>
 800b370:	1b33      	subs	r3, r6, r4
 800b372:	3b15      	subs	r3, #21
 800b374:	f023 0303 	bic.w	r3, r3, #3
 800b378:	3415      	adds	r4, #21
 800b37a:	3304      	adds	r3, #4
 800b37c:	42a6      	cmp	r6, r4
 800b37e:	bf38      	it	cc
 800b380:	2304      	movcc	r3, #4
 800b382:	441d      	add	r5, r3
 800b384:	445b      	add	r3, fp
 800b386:	461e      	mov	r6, r3
 800b388:	462c      	mov	r4, r5
 800b38a:	4544      	cmp	r4, r8
 800b38c:	d30e      	bcc.n	800b3ac <__mdiff+0xf8>
 800b38e:	f108 0103 	add.w	r1, r8, #3
 800b392:	1b49      	subs	r1, r1, r5
 800b394:	f021 0103 	bic.w	r1, r1, #3
 800b398:	3d03      	subs	r5, #3
 800b39a:	45a8      	cmp	r8, r5
 800b39c:	bf38      	it	cc
 800b39e:	2100      	movcc	r1, #0
 800b3a0:	440b      	add	r3, r1
 800b3a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3a6:	b191      	cbz	r1, 800b3ce <__mdiff+0x11a>
 800b3a8:	6117      	str	r7, [r2, #16]
 800b3aa:	e79d      	b.n	800b2e8 <__mdiff+0x34>
 800b3ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800b3b0:	46e6      	mov	lr, ip
 800b3b2:	0c08      	lsrs	r0, r1, #16
 800b3b4:	fa1c fc81 	uxtah	ip, ip, r1
 800b3b8:	4471      	add	r1, lr
 800b3ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b3be:	b289      	uxth	r1, r1
 800b3c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b3c4:	f846 1b04 	str.w	r1, [r6], #4
 800b3c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3cc:	e7dd      	b.n	800b38a <__mdiff+0xd6>
 800b3ce:	3f01      	subs	r7, #1
 800b3d0:	e7e7      	b.n	800b3a2 <__mdiff+0xee>
 800b3d2:	bf00      	nop
 800b3d4:	0800c1ac 	.word	0x0800c1ac
 800b3d8:	0800c1bd 	.word	0x0800c1bd

0800b3dc <__d2b>:
 800b3dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3e0:	460f      	mov	r7, r1
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	ec59 8b10 	vmov	r8, r9, d0
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	f7ff fccd 	bl	800ad88 <_Balloc>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	b930      	cbnz	r0, 800b400 <__d2b+0x24>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	4b23      	ldr	r3, [pc, #140]	@ (800b484 <__d2b+0xa8>)
 800b3f6:	4824      	ldr	r0, [pc, #144]	@ (800b488 <__d2b+0xac>)
 800b3f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3fc:	f000 fa74 	bl	800b8e8 <__assert_func>
 800b400:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b408:	b10d      	cbz	r5, 800b40e <__d2b+0x32>
 800b40a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	f1b8 0300 	subs.w	r3, r8, #0
 800b414:	d023      	beq.n	800b45e <__d2b+0x82>
 800b416:	4668      	mov	r0, sp
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	f7ff fd7c 	bl	800af16 <__lo0bits>
 800b41e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b422:	b1d0      	cbz	r0, 800b45a <__d2b+0x7e>
 800b424:	f1c0 0320 	rsb	r3, r0, #32
 800b428:	fa02 f303 	lsl.w	r3, r2, r3
 800b42c:	430b      	orrs	r3, r1
 800b42e:	40c2      	lsrs	r2, r0
 800b430:	6163      	str	r3, [r4, #20]
 800b432:	9201      	str	r2, [sp, #4]
 800b434:	9b01      	ldr	r3, [sp, #4]
 800b436:	61a3      	str	r3, [r4, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bf0c      	ite	eq
 800b43c:	2201      	moveq	r2, #1
 800b43e:	2202      	movne	r2, #2
 800b440:	6122      	str	r2, [r4, #16]
 800b442:	b1a5      	cbz	r5, 800b46e <__d2b+0x92>
 800b444:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b448:	4405      	add	r5, r0
 800b44a:	603d      	str	r5, [r7, #0]
 800b44c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b450:	6030      	str	r0, [r6, #0]
 800b452:	4620      	mov	r0, r4
 800b454:	b003      	add	sp, #12
 800b456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b45a:	6161      	str	r1, [r4, #20]
 800b45c:	e7ea      	b.n	800b434 <__d2b+0x58>
 800b45e:	a801      	add	r0, sp, #4
 800b460:	f7ff fd59 	bl	800af16 <__lo0bits>
 800b464:	9b01      	ldr	r3, [sp, #4]
 800b466:	6163      	str	r3, [r4, #20]
 800b468:	3020      	adds	r0, #32
 800b46a:	2201      	movs	r2, #1
 800b46c:	e7e8      	b.n	800b440 <__d2b+0x64>
 800b46e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b472:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b476:	6038      	str	r0, [r7, #0]
 800b478:	6918      	ldr	r0, [r3, #16]
 800b47a:	f7ff fd2d 	bl	800aed8 <__hi0bits>
 800b47e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b482:	e7e5      	b.n	800b450 <__d2b+0x74>
 800b484:	0800c1ac 	.word	0x0800c1ac
 800b488:	0800c1bd 	.word	0x0800c1bd

0800b48c <__ssputs_r>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	688e      	ldr	r6, [r1, #8]
 800b492:	461f      	mov	r7, r3
 800b494:	42be      	cmp	r6, r7
 800b496:	680b      	ldr	r3, [r1, #0]
 800b498:	4682      	mov	sl, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4690      	mov	r8, r2
 800b49e:	d82d      	bhi.n	800b4fc <__ssputs_r+0x70>
 800b4a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4a8:	d026      	beq.n	800b4f8 <__ssputs_r+0x6c>
 800b4aa:	6965      	ldr	r5, [r4, #20]
 800b4ac:	6909      	ldr	r1, [r1, #16]
 800b4ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4b2:	eba3 0901 	sub.w	r9, r3, r1
 800b4b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4ba:	1c7b      	adds	r3, r7, #1
 800b4bc:	444b      	add	r3, r9
 800b4be:	106d      	asrs	r5, r5, #1
 800b4c0:	429d      	cmp	r5, r3
 800b4c2:	bf38      	it	cc
 800b4c4:	461d      	movcc	r5, r3
 800b4c6:	0553      	lsls	r3, r2, #21
 800b4c8:	d527      	bpl.n	800b51a <__ssputs_r+0x8e>
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	f7ff fbd0 	bl	800ac70 <_malloc_r>
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	b360      	cbz	r0, 800b52e <__ssputs_r+0xa2>
 800b4d4:	6921      	ldr	r1, [r4, #16]
 800b4d6:	464a      	mov	r2, r9
 800b4d8:	f7fe fcfb 	bl	8009ed2 <memcpy>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	6126      	str	r6, [r4, #16]
 800b4ea:	6165      	str	r5, [r4, #20]
 800b4ec:	444e      	add	r6, r9
 800b4ee:	eba5 0509 	sub.w	r5, r5, r9
 800b4f2:	6026      	str	r6, [r4, #0]
 800b4f4:	60a5      	str	r5, [r4, #8]
 800b4f6:	463e      	mov	r6, r7
 800b4f8:	42be      	cmp	r6, r7
 800b4fa:	d900      	bls.n	800b4fe <__ssputs_r+0x72>
 800b4fc:	463e      	mov	r6, r7
 800b4fe:	6820      	ldr	r0, [r4, #0]
 800b500:	4632      	mov	r2, r6
 800b502:	4641      	mov	r1, r8
 800b504:	f000 f9c6 	bl	800b894 <memmove>
 800b508:	68a3      	ldr	r3, [r4, #8]
 800b50a:	1b9b      	subs	r3, r3, r6
 800b50c:	60a3      	str	r3, [r4, #8]
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	4433      	add	r3, r6
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	2000      	movs	r0, #0
 800b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51a:	462a      	mov	r2, r5
 800b51c:	f000 fa28 	bl	800b970 <_realloc_r>
 800b520:	4606      	mov	r6, r0
 800b522:	2800      	cmp	r0, #0
 800b524:	d1e0      	bne.n	800b4e8 <__ssputs_r+0x5c>
 800b526:	6921      	ldr	r1, [r4, #16]
 800b528:	4650      	mov	r0, sl
 800b52a:	f7ff fb2d 	bl	800ab88 <_free_r>
 800b52e:	230c      	movs	r3, #12
 800b530:	f8ca 3000 	str.w	r3, [sl]
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295
 800b540:	e7e9      	b.n	800b516 <__ssputs_r+0x8a>
	...

0800b544 <_svfiprintf_r>:
 800b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	4698      	mov	r8, r3
 800b54a:	898b      	ldrh	r3, [r1, #12]
 800b54c:	061b      	lsls	r3, r3, #24
 800b54e:	b09d      	sub	sp, #116	@ 0x74
 800b550:	4607      	mov	r7, r0
 800b552:	460d      	mov	r5, r1
 800b554:	4614      	mov	r4, r2
 800b556:	d510      	bpl.n	800b57a <_svfiprintf_r+0x36>
 800b558:	690b      	ldr	r3, [r1, #16]
 800b55a:	b973      	cbnz	r3, 800b57a <_svfiprintf_r+0x36>
 800b55c:	2140      	movs	r1, #64	@ 0x40
 800b55e:	f7ff fb87 	bl	800ac70 <_malloc_r>
 800b562:	6028      	str	r0, [r5, #0]
 800b564:	6128      	str	r0, [r5, #16]
 800b566:	b930      	cbnz	r0, 800b576 <_svfiprintf_r+0x32>
 800b568:	230c      	movs	r3, #12
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	b01d      	add	sp, #116	@ 0x74
 800b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b576:	2340      	movs	r3, #64	@ 0x40
 800b578:	616b      	str	r3, [r5, #20]
 800b57a:	2300      	movs	r3, #0
 800b57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b57e:	2320      	movs	r3, #32
 800b580:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b584:	f8cd 800c 	str.w	r8, [sp, #12]
 800b588:	2330      	movs	r3, #48	@ 0x30
 800b58a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b728 <_svfiprintf_r+0x1e4>
 800b58e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b592:	f04f 0901 	mov.w	r9, #1
 800b596:	4623      	mov	r3, r4
 800b598:	469a      	mov	sl, r3
 800b59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b59e:	b10a      	cbz	r2, 800b5a4 <_svfiprintf_r+0x60>
 800b5a0:	2a25      	cmp	r2, #37	@ 0x25
 800b5a2:	d1f9      	bne.n	800b598 <_svfiprintf_r+0x54>
 800b5a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a8:	d00b      	beq.n	800b5c2 <_svfiprintf_r+0x7e>
 800b5aa:	465b      	mov	r3, fp
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff ff6b 	bl	800b48c <__ssputs_r>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f000 80a7 	beq.w	800b70a <_svfiprintf_r+0x1c6>
 800b5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5be:	445a      	add	r2, fp
 800b5c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 809f 	beq.w	800b70a <_svfiprintf_r+0x1c6>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d6:	f10a 0a01 	add.w	sl, sl, #1
 800b5da:	9304      	str	r3, [sp, #16]
 800b5dc:	9307      	str	r3, [sp, #28]
 800b5de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5e4:	4654      	mov	r4, sl
 800b5e6:	2205      	movs	r2, #5
 800b5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ec:	484e      	ldr	r0, [pc, #312]	@ (800b728 <_svfiprintf_r+0x1e4>)
 800b5ee:	f7f4 fe0f 	bl	8000210 <memchr>
 800b5f2:	9a04      	ldr	r2, [sp, #16]
 800b5f4:	b9d8      	cbnz	r0, 800b62e <_svfiprintf_r+0xea>
 800b5f6:	06d0      	lsls	r0, r2, #27
 800b5f8:	bf44      	itt	mi
 800b5fa:	2320      	movmi	r3, #32
 800b5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b600:	0711      	lsls	r1, r2, #28
 800b602:	bf44      	itt	mi
 800b604:	232b      	movmi	r3, #43	@ 0x2b
 800b606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b60a:	f89a 3000 	ldrb.w	r3, [sl]
 800b60e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b610:	d015      	beq.n	800b63e <_svfiprintf_r+0xfa>
 800b612:	9a07      	ldr	r2, [sp, #28]
 800b614:	4654      	mov	r4, sl
 800b616:	2000      	movs	r0, #0
 800b618:	f04f 0c0a 	mov.w	ip, #10
 800b61c:	4621      	mov	r1, r4
 800b61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b622:	3b30      	subs	r3, #48	@ 0x30
 800b624:	2b09      	cmp	r3, #9
 800b626:	d94b      	bls.n	800b6c0 <_svfiprintf_r+0x17c>
 800b628:	b1b0      	cbz	r0, 800b658 <_svfiprintf_r+0x114>
 800b62a:	9207      	str	r2, [sp, #28]
 800b62c:	e014      	b.n	800b658 <_svfiprintf_r+0x114>
 800b62e:	eba0 0308 	sub.w	r3, r0, r8
 800b632:	fa09 f303 	lsl.w	r3, r9, r3
 800b636:	4313      	orrs	r3, r2
 800b638:	9304      	str	r3, [sp, #16]
 800b63a:	46a2      	mov	sl, r4
 800b63c:	e7d2      	b.n	800b5e4 <_svfiprintf_r+0xa0>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	1d19      	adds	r1, r3, #4
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	9103      	str	r1, [sp, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	bfbb      	ittet	lt
 800b64a:	425b      	neglt	r3, r3
 800b64c:	f042 0202 	orrlt.w	r2, r2, #2
 800b650:	9307      	strge	r3, [sp, #28]
 800b652:	9307      	strlt	r3, [sp, #28]
 800b654:	bfb8      	it	lt
 800b656:	9204      	strlt	r2, [sp, #16]
 800b658:	7823      	ldrb	r3, [r4, #0]
 800b65a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b65c:	d10a      	bne.n	800b674 <_svfiprintf_r+0x130>
 800b65e:	7863      	ldrb	r3, [r4, #1]
 800b660:	2b2a      	cmp	r3, #42	@ 0x2a
 800b662:	d132      	bne.n	800b6ca <_svfiprintf_r+0x186>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	1d1a      	adds	r2, r3, #4
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	9203      	str	r2, [sp, #12]
 800b66c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b670:	3402      	adds	r4, #2
 800b672:	9305      	str	r3, [sp, #20]
 800b674:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b738 <_svfiprintf_r+0x1f4>
 800b678:	7821      	ldrb	r1, [r4, #0]
 800b67a:	2203      	movs	r2, #3
 800b67c:	4650      	mov	r0, sl
 800b67e:	f7f4 fdc7 	bl	8000210 <memchr>
 800b682:	b138      	cbz	r0, 800b694 <_svfiprintf_r+0x150>
 800b684:	9b04      	ldr	r3, [sp, #16]
 800b686:	eba0 000a 	sub.w	r0, r0, sl
 800b68a:	2240      	movs	r2, #64	@ 0x40
 800b68c:	4082      	lsls	r2, r0
 800b68e:	4313      	orrs	r3, r2
 800b690:	3401      	adds	r4, #1
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b698:	4824      	ldr	r0, [pc, #144]	@ (800b72c <_svfiprintf_r+0x1e8>)
 800b69a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b69e:	2206      	movs	r2, #6
 800b6a0:	f7f4 fdb6 	bl	8000210 <memchr>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d036      	beq.n	800b716 <_svfiprintf_r+0x1d2>
 800b6a8:	4b21      	ldr	r3, [pc, #132]	@ (800b730 <_svfiprintf_r+0x1ec>)
 800b6aa:	bb1b      	cbnz	r3, 800b6f4 <_svfiprintf_r+0x1b0>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	3307      	adds	r3, #7
 800b6b0:	f023 0307 	bic.w	r3, r3, #7
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ba:	4433      	add	r3, r6
 800b6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6be:	e76a      	b.n	800b596 <_svfiprintf_r+0x52>
 800b6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	e7a8      	b.n	800b61c <_svfiprintf_r+0xd8>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	3401      	adds	r4, #1
 800b6ce:	9305      	str	r3, [sp, #20]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f04f 0c0a 	mov.w	ip, #10
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6dc:	3a30      	subs	r2, #48	@ 0x30
 800b6de:	2a09      	cmp	r2, #9
 800b6e0:	d903      	bls.n	800b6ea <_svfiprintf_r+0x1a6>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0c6      	beq.n	800b674 <_svfiprintf_r+0x130>
 800b6e6:	9105      	str	r1, [sp, #20]
 800b6e8:	e7c4      	b.n	800b674 <_svfiprintf_r+0x130>
 800b6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e7f0      	b.n	800b6d6 <_svfiprintf_r+0x192>
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b734 <_svfiprintf_r+0x1f0>)
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	4638      	mov	r0, r7
 800b700:	f7fd fe8a 	bl	8009418 <_printf_float>
 800b704:	1c42      	adds	r2, r0, #1
 800b706:	4606      	mov	r6, r0
 800b708:	d1d6      	bne.n	800b6b8 <_svfiprintf_r+0x174>
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	065b      	lsls	r3, r3, #25
 800b70e:	f53f af2d 	bmi.w	800b56c <_svfiprintf_r+0x28>
 800b712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b714:	e72c      	b.n	800b570 <_svfiprintf_r+0x2c>
 800b716:	ab03      	add	r3, sp, #12
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	462a      	mov	r2, r5
 800b71c:	4b05      	ldr	r3, [pc, #20]	@ (800b734 <_svfiprintf_r+0x1f0>)
 800b71e:	a904      	add	r1, sp, #16
 800b720:	4638      	mov	r0, r7
 800b722:	f7fe f911 	bl	8009948 <_printf_i>
 800b726:	e7ed      	b.n	800b704 <_svfiprintf_r+0x1c0>
 800b728:	0800c318 	.word	0x0800c318
 800b72c:	0800c322 	.word	0x0800c322
 800b730:	08009419 	.word	0x08009419
 800b734:	0800b48d 	.word	0x0800b48d
 800b738:	0800c31e 	.word	0x0800c31e

0800b73c <__sflush_r>:
 800b73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b744:	0716      	lsls	r6, r2, #28
 800b746:	4605      	mov	r5, r0
 800b748:	460c      	mov	r4, r1
 800b74a:	d454      	bmi.n	800b7f6 <__sflush_r+0xba>
 800b74c:	684b      	ldr	r3, [r1, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	dc02      	bgt.n	800b758 <__sflush_r+0x1c>
 800b752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	dd48      	ble.n	800b7ea <__sflush_r+0xae>
 800b758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b75a:	2e00      	cmp	r6, #0
 800b75c:	d045      	beq.n	800b7ea <__sflush_r+0xae>
 800b75e:	2300      	movs	r3, #0
 800b760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b764:	682f      	ldr	r7, [r5, #0]
 800b766:	6a21      	ldr	r1, [r4, #32]
 800b768:	602b      	str	r3, [r5, #0]
 800b76a:	d030      	beq.n	800b7ce <__sflush_r+0x92>
 800b76c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	0759      	lsls	r1, r3, #29
 800b772:	d505      	bpl.n	800b780 <__sflush_r+0x44>
 800b774:	6863      	ldr	r3, [r4, #4]
 800b776:	1ad2      	subs	r2, r2, r3
 800b778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b77a:	b10b      	cbz	r3, 800b780 <__sflush_r+0x44>
 800b77c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b77e:	1ad2      	subs	r2, r2, r3
 800b780:	2300      	movs	r3, #0
 800b782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b784:	6a21      	ldr	r1, [r4, #32]
 800b786:	4628      	mov	r0, r5
 800b788:	47b0      	blx	r6
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	d106      	bne.n	800b79e <__sflush_r+0x62>
 800b790:	6829      	ldr	r1, [r5, #0]
 800b792:	291d      	cmp	r1, #29
 800b794:	d82b      	bhi.n	800b7ee <__sflush_r+0xb2>
 800b796:	4a2a      	ldr	r2, [pc, #168]	@ (800b840 <__sflush_r+0x104>)
 800b798:	410a      	asrs	r2, r1
 800b79a:	07d6      	lsls	r6, r2, #31
 800b79c:	d427      	bmi.n	800b7ee <__sflush_r+0xb2>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	6062      	str	r2, [r4, #4]
 800b7a2:	04d9      	lsls	r1, r3, #19
 800b7a4:	6922      	ldr	r2, [r4, #16]
 800b7a6:	6022      	str	r2, [r4, #0]
 800b7a8:	d504      	bpl.n	800b7b4 <__sflush_r+0x78>
 800b7aa:	1c42      	adds	r2, r0, #1
 800b7ac:	d101      	bne.n	800b7b2 <__sflush_r+0x76>
 800b7ae:	682b      	ldr	r3, [r5, #0]
 800b7b0:	b903      	cbnz	r3, 800b7b4 <__sflush_r+0x78>
 800b7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7b6:	602f      	str	r7, [r5, #0]
 800b7b8:	b1b9      	cbz	r1, 800b7ea <__sflush_r+0xae>
 800b7ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d002      	beq.n	800b7c8 <__sflush_r+0x8c>
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7ff f9e0 	bl	800ab88 <_free_r>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7cc:	e00d      	b.n	800b7ea <__sflush_r+0xae>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	47b0      	blx	r6
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	1c50      	adds	r0, r2, #1
 800b7d8:	d1c9      	bne.n	800b76e <__sflush_r+0x32>
 800b7da:	682b      	ldr	r3, [r5, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0c6      	beq.n	800b76e <__sflush_r+0x32>
 800b7e0:	2b1d      	cmp	r3, #29
 800b7e2:	d001      	beq.n	800b7e8 <__sflush_r+0xac>
 800b7e4:	2b16      	cmp	r3, #22
 800b7e6:	d11e      	bne.n	800b826 <__sflush_r+0xea>
 800b7e8:	602f      	str	r7, [r5, #0]
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	e022      	b.n	800b834 <__sflush_r+0xf8>
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f2:	b21b      	sxth	r3, r3
 800b7f4:	e01b      	b.n	800b82e <__sflush_r+0xf2>
 800b7f6:	690f      	ldr	r7, [r1, #16]
 800b7f8:	2f00      	cmp	r7, #0
 800b7fa:	d0f6      	beq.n	800b7ea <__sflush_r+0xae>
 800b7fc:	0793      	lsls	r3, r2, #30
 800b7fe:	680e      	ldr	r6, [r1, #0]
 800b800:	bf08      	it	eq
 800b802:	694b      	ldreq	r3, [r1, #20]
 800b804:	600f      	str	r7, [r1, #0]
 800b806:	bf18      	it	ne
 800b808:	2300      	movne	r3, #0
 800b80a:	eba6 0807 	sub.w	r8, r6, r7
 800b80e:	608b      	str	r3, [r1, #8]
 800b810:	f1b8 0f00 	cmp.w	r8, #0
 800b814:	dde9      	ble.n	800b7ea <__sflush_r+0xae>
 800b816:	6a21      	ldr	r1, [r4, #32]
 800b818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b81a:	4643      	mov	r3, r8
 800b81c:	463a      	mov	r2, r7
 800b81e:	4628      	mov	r0, r5
 800b820:	47b0      	blx	r6
 800b822:	2800      	cmp	r0, #0
 800b824:	dc08      	bgt.n	800b838 <__sflush_r+0xfc>
 800b826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	4407      	add	r7, r0
 800b83a:	eba8 0800 	sub.w	r8, r8, r0
 800b83e:	e7e7      	b.n	800b810 <__sflush_r+0xd4>
 800b840:	dfbffffe 	.word	0xdfbffffe

0800b844 <_fflush_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	690b      	ldr	r3, [r1, #16]
 800b848:	4605      	mov	r5, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	b913      	cbnz	r3, 800b854 <_fflush_r+0x10>
 800b84e:	2500      	movs	r5, #0
 800b850:	4628      	mov	r0, r5
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	b118      	cbz	r0, 800b85e <_fflush_r+0x1a>
 800b856:	6a03      	ldr	r3, [r0, #32]
 800b858:	b90b      	cbnz	r3, 800b85e <_fflush_r+0x1a>
 800b85a:	f7fe fa21 	bl	8009ca0 <__sinit>
 800b85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0f3      	beq.n	800b84e <_fflush_r+0xa>
 800b866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b868:	07d0      	lsls	r0, r2, #31
 800b86a:	d404      	bmi.n	800b876 <_fflush_r+0x32>
 800b86c:	0599      	lsls	r1, r3, #22
 800b86e:	d402      	bmi.n	800b876 <_fflush_r+0x32>
 800b870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b872:	f7fe fb2c 	bl	8009ece <__retarget_lock_acquire_recursive>
 800b876:	4628      	mov	r0, r5
 800b878:	4621      	mov	r1, r4
 800b87a:	f7ff ff5f 	bl	800b73c <__sflush_r>
 800b87e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b880:	07da      	lsls	r2, r3, #31
 800b882:	4605      	mov	r5, r0
 800b884:	d4e4      	bmi.n	800b850 <_fflush_r+0xc>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	059b      	lsls	r3, r3, #22
 800b88a:	d4e1      	bmi.n	800b850 <_fflush_r+0xc>
 800b88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b88e:	f7fe fb1f 	bl	8009ed0 <__retarget_lock_release_recursive>
 800b892:	e7dd      	b.n	800b850 <_fflush_r+0xc>

0800b894 <memmove>:
 800b894:	4288      	cmp	r0, r1
 800b896:	b510      	push	{r4, lr}
 800b898:	eb01 0402 	add.w	r4, r1, r2
 800b89c:	d902      	bls.n	800b8a4 <memmove+0x10>
 800b89e:	4284      	cmp	r4, r0
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	d807      	bhi.n	800b8b4 <memmove+0x20>
 800b8a4:	1e43      	subs	r3, r0, #1
 800b8a6:	42a1      	cmp	r1, r4
 800b8a8:	d008      	beq.n	800b8bc <memmove+0x28>
 800b8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b2:	e7f8      	b.n	800b8a6 <memmove+0x12>
 800b8b4:	4402      	add	r2, r0
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	428a      	cmp	r2, r1
 800b8ba:	d100      	bne.n	800b8be <memmove+0x2a>
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8c6:	e7f7      	b.n	800b8b8 <memmove+0x24>

0800b8c8 <_sbrk_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d06      	ldr	r5, [pc, #24]	@ (800b8e4 <_sbrk_r+0x1c>)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	602b      	str	r3, [r5, #0]
 800b8d4:	f7f6 fc2c 	bl	8002130 <_sbrk>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_sbrk_r+0x1a>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_sbrk_r+0x1a>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	20004f58 	.word	0x20004f58

0800b8e8 <__assert_func>:
 800b8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4b09      	ldr	r3, [pc, #36]	@ (800b914 <__assert_func+0x2c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	68d8      	ldr	r0, [r3, #12]
 800b8f6:	b954      	cbnz	r4, 800b90e <__assert_func+0x26>
 800b8f8:	4b07      	ldr	r3, [pc, #28]	@ (800b918 <__assert_func+0x30>)
 800b8fa:	461c      	mov	r4, r3
 800b8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b900:	9100      	str	r1, [sp, #0]
 800b902:	462b      	mov	r3, r5
 800b904:	4905      	ldr	r1, [pc, #20]	@ (800b91c <__assert_func+0x34>)
 800b906:	f000 f86f 	bl	800b9e8 <fiprintf>
 800b90a:	f000 f87f 	bl	800ba0c <abort>
 800b90e:	4b04      	ldr	r3, [pc, #16]	@ (800b920 <__assert_func+0x38>)
 800b910:	e7f4      	b.n	800b8fc <__assert_func+0x14>
 800b912:	bf00      	nop
 800b914:	20000020 	.word	0x20000020
 800b918:	0800c36e 	.word	0x0800c36e
 800b91c:	0800c340 	.word	0x0800c340
 800b920:	0800c333 	.word	0x0800c333

0800b924 <_calloc_r>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	fba1 5402 	umull	r5, r4, r1, r2
 800b92a:	b93c      	cbnz	r4, 800b93c <_calloc_r+0x18>
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7ff f99f 	bl	800ac70 <_malloc_r>
 800b932:	4606      	mov	r6, r0
 800b934:	b928      	cbnz	r0, 800b942 <_calloc_r+0x1e>
 800b936:	2600      	movs	r6, #0
 800b938:	4630      	mov	r0, r6
 800b93a:	bd70      	pop	{r4, r5, r6, pc}
 800b93c:	220c      	movs	r2, #12
 800b93e:	6002      	str	r2, [r0, #0]
 800b940:	e7f9      	b.n	800b936 <_calloc_r+0x12>
 800b942:	462a      	mov	r2, r5
 800b944:	4621      	mov	r1, r4
 800b946:	f7fe fa44 	bl	8009dd2 <memset>
 800b94a:	e7f5      	b.n	800b938 <_calloc_r+0x14>

0800b94c <__ascii_mbtowc>:
 800b94c:	b082      	sub	sp, #8
 800b94e:	b901      	cbnz	r1, 800b952 <__ascii_mbtowc+0x6>
 800b950:	a901      	add	r1, sp, #4
 800b952:	b142      	cbz	r2, 800b966 <__ascii_mbtowc+0x1a>
 800b954:	b14b      	cbz	r3, 800b96a <__ascii_mbtowc+0x1e>
 800b956:	7813      	ldrb	r3, [r2, #0]
 800b958:	600b      	str	r3, [r1, #0]
 800b95a:	7812      	ldrb	r2, [r2, #0]
 800b95c:	1e10      	subs	r0, r2, #0
 800b95e:	bf18      	it	ne
 800b960:	2001      	movne	r0, #1
 800b962:	b002      	add	sp, #8
 800b964:	4770      	bx	lr
 800b966:	4610      	mov	r0, r2
 800b968:	e7fb      	b.n	800b962 <__ascii_mbtowc+0x16>
 800b96a:	f06f 0001 	mvn.w	r0, #1
 800b96e:	e7f8      	b.n	800b962 <__ascii_mbtowc+0x16>

0800b970 <_realloc_r>:
 800b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b974:	4680      	mov	r8, r0
 800b976:	4615      	mov	r5, r2
 800b978:	460c      	mov	r4, r1
 800b97a:	b921      	cbnz	r1, 800b986 <_realloc_r+0x16>
 800b97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b980:	4611      	mov	r1, r2
 800b982:	f7ff b975 	b.w	800ac70 <_malloc_r>
 800b986:	b92a      	cbnz	r2, 800b994 <_realloc_r+0x24>
 800b988:	f7ff f8fe 	bl	800ab88 <_free_r>
 800b98c:	2400      	movs	r4, #0
 800b98e:	4620      	mov	r0, r4
 800b990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b994:	f000 f841 	bl	800ba1a <_malloc_usable_size_r>
 800b998:	4285      	cmp	r5, r0
 800b99a:	4606      	mov	r6, r0
 800b99c:	d802      	bhi.n	800b9a4 <_realloc_r+0x34>
 800b99e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9a2:	d8f4      	bhi.n	800b98e <_realloc_r+0x1e>
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	f7ff f962 	bl	800ac70 <_malloc_r>
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0ec      	beq.n	800b98c <_realloc_r+0x1c>
 800b9b2:	42b5      	cmp	r5, r6
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	bf28      	it	cs
 800b9ba:	4632      	movcs	r2, r6
 800b9bc:	f7fe fa89 	bl	8009ed2 <memcpy>
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	f7ff f8e0 	bl	800ab88 <_free_r>
 800b9c8:	463c      	mov	r4, r7
 800b9ca:	e7e0      	b.n	800b98e <_realloc_r+0x1e>

0800b9cc <__ascii_wctomb>:
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	4608      	mov	r0, r1
 800b9d0:	b141      	cbz	r1, 800b9e4 <__ascii_wctomb+0x18>
 800b9d2:	2aff      	cmp	r2, #255	@ 0xff
 800b9d4:	d904      	bls.n	800b9e0 <__ascii_wctomb+0x14>
 800b9d6:	228a      	movs	r2, #138	@ 0x8a
 800b9d8:	601a      	str	r2, [r3, #0]
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	4770      	bx	lr
 800b9e0:	700a      	strb	r2, [r1, #0]
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <fiprintf>:
 800b9e8:	b40e      	push	{r1, r2, r3}
 800b9ea:	b503      	push	{r0, r1, lr}
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	ab03      	add	r3, sp, #12
 800b9f0:	4805      	ldr	r0, [pc, #20]	@ (800ba08 <fiprintf+0x20>)
 800b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f6:	6800      	ldr	r0, [r0, #0]
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	f000 f83f 	bl	800ba7c <_vfiprintf_r>
 800b9fe:	b002      	add	sp, #8
 800ba00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba04:	b003      	add	sp, #12
 800ba06:	4770      	bx	lr
 800ba08:	20000020 	.word	0x20000020

0800ba0c <abort>:
 800ba0c:	b508      	push	{r3, lr}
 800ba0e:	2006      	movs	r0, #6
 800ba10:	f000 fa08 	bl	800be24 <raise>
 800ba14:	2001      	movs	r0, #1
 800ba16:	f7f6 fb13 	bl	8002040 <_exit>

0800ba1a <_malloc_usable_size_r>:
 800ba1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1e:	1f18      	subs	r0, r3, #4
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfbc      	itt	lt
 800ba24:	580b      	ldrlt	r3, [r1, r0]
 800ba26:	18c0      	addlt	r0, r0, r3
 800ba28:	4770      	bx	lr

0800ba2a <__sfputc_r>:
 800ba2a:	6893      	ldr	r3, [r2, #8]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	b410      	push	{r4}
 800ba32:	6093      	str	r3, [r2, #8]
 800ba34:	da08      	bge.n	800ba48 <__sfputc_r+0x1e>
 800ba36:	6994      	ldr	r4, [r2, #24]
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	db01      	blt.n	800ba40 <__sfputc_r+0x16>
 800ba3c:	290a      	cmp	r1, #10
 800ba3e:	d103      	bne.n	800ba48 <__sfputc_r+0x1e>
 800ba40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba44:	f000 b932 	b.w	800bcac <__swbuf_r>
 800ba48:	6813      	ldr	r3, [r2, #0]
 800ba4a:	1c58      	adds	r0, r3, #1
 800ba4c:	6010      	str	r0, [r2, #0]
 800ba4e:	7019      	strb	r1, [r3, #0]
 800ba50:	4608      	mov	r0, r1
 800ba52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <__sfputs_r>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	460f      	mov	r7, r1
 800ba5e:	4614      	mov	r4, r2
 800ba60:	18d5      	adds	r5, r2, r3
 800ba62:	42ac      	cmp	r4, r5
 800ba64:	d101      	bne.n	800ba6a <__sfputs_r+0x12>
 800ba66:	2000      	movs	r0, #0
 800ba68:	e007      	b.n	800ba7a <__sfputs_r+0x22>
 800ba6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6e:	463a      	mov	r2, r7
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff ffda 	bl	800ba2a <__sfputc_r>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	d1f3      	bne.n	800ba62 <__sfputs_r+0xa>
 800ba7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba7c <_vfiprintf_r>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	460d      	mov	r5, r1
 800ba82:	b09d      	sub	sp, #116	@ 0x74
 800ba84:	4614      	mov	r4, r2
 800ba86:	4698      	mov	r8, r3
 800ba88:	4606      	mov	r6, r0
 800ba8a:	b118      	cbz	r0, 800ba94 <_vfiprintf_r+0x18>
 800ba8c:	6a03      	ldr	r3, [r0, #32]
 800ba8e:	b90b      	cbnz	r3, 800ba94 <_vfiprintf_r+0x18>
 800ba90:	f7fe f906 	bl	8009ca0 <__sinit>
 800ba94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	d405      	bmi.n	800baa6 <_vfiprintf_r+0x2a>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	059a      	lsls	r2, r3, #22
 800ba9e:	d402      	bmi.n	800baa6 <_vfiprintf_r+0x2a>
 800baa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baa2:	f7fe fa14 	bl	8009ece <__retarget_lock_acquire_recursive>
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	071b      	lsls	r3, r3, #28
 800baaa:	d501      	bpl.n	800bab0 <_vfiprintf_r+0x34>
 800baac:	692b      	ldr	r3, [r5, #16]
 800baae:	b99b      	cbnz	r3, 800bad8 <_vfiprintf_r+0x5c>
 800bab0:	4629      	mov	r1, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f938 	bl	800bd28 <__swsetup_r>
 800bab8:	b170      	cbz	r0, 800bad8 <_vfiprintf_r+0x5c>
 800baba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800babc:	07dc      	lsls	r4, r3, #31
 800babe:	d504      	bpl.n	800baca <_vfiprintf_r+0x4e>
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	b01d      	add	sp, #116	@ 0x74
 800bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	0598      	lsls	r0, r3, #22
 800bace:	d4f7      	bmi.n	800bac0 <_vfiprintf_r+0x44>
 800bad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bad2:	f7fe f9fd 	bl	8009ed0 <__retarget_lock_release_recursive>
 800bad6:	e7f3      	b.n	800bac0 <_vfiprintf_r+0x44>
 800bad8:	2300      	movs	r3, #0
 800bada:	9309      	str	r3, [sp, #36]	@ 0x24
 800badc:	2320      	movs	r3, #32
 800bade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bae6:	2330      	movs	r3, #48	@ 0x30
 800bae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc98 <_vfiprintf_r+0x21c>
 800baec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baf0:	f04f 0901 	mov.w	r9, #1
 800baf4:	4623      	mov	r3, r4
 800baf6:	469a      	mov	sl, r3
 800baf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafc:	b10a      	cbz	r2, 800bb02 <_vfiprintf_r+0x86>
 800bafe:	2a25      	cmp	r2, #37	@ 0x25
 800bb00:	d1f9      	bne.n	800baf6 <_vfiprintf_r+0x7a>
 800bb02:	ebba 0b04 	subs.w	fp, sl, r4
 800bb06:	d00b      	beq.n	800bb20 <_vfiprintf_r+0xa4>
 800bb08:	465b      	mov	r3, fp
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f7ff ffa2 	bl	800ba58 <__sfputs_r>
 800bb14:	3001      	adds	r0, #1
 800bb16:	f000 80a7 	beq.w	800bc68 <_vfiprintf_r+0x1ec>
 800bb1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb1c:	445a      	add	r2, fp
 800bb1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb20:	f89a 3000 	ldrb.w	r3, [sl]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 809f 	beq.w	800bc68 <_vfiprintf_r+0x1ec>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb34:	f10a 0a01 	add.w	sl, sl, #1
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	9307      	str	r3, [sp, #28]
 800bb3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb40:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb42:	4654      	mov	r4, sl
 800bb44:	2205      	movs	r2, #5
 800bb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4a:	4853      	ldr	r0, [pc, #332]	@ (800bc98 <_vfiprintf_r+0x21c>)
 800bb4c:	f7f4 fb60 	bl	8000210 <memchr>
 800bb50:	9a04      	ldr	r2, [sp, #16]
 800bb52:	b9d8      	cbnz	r0, 800bb8c <_vfiprintf_r+0x110>
 800bb54:	06d1      	lsls	r1, r2, #27
 800bb56:	bf44      	itt	mi
 800bb58:	2320      	movmi	r3, #32
 800bb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5e:	0713      	lsls	r3, r2, #28
 800bb60:	bf44      	itt	mi
 800bb62:	232b      	movmi	r3, #43	@ 0x2b
 800bb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb68:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6e:	d015      	beq.n	800bb9c <_vfiprintf_r+0x120>
 800bb70:	9a07      	ldr	r2, [sp, #28]
 800bb72:	4654      	mov	r4, sl
 800bb74:	2000      	movs	r0, #0
 800bb76:	f04f 0c0a 	mov.w	ip, #10
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb80:	3b30      	subs	r3, #48	@ 0x30
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d94b      	bls.n	800bc1e <_vfiprintf_r+0x1a2>
 800bb86:	b1b0      	cbz	r0, 800bbb6 <_vfiprintf_r+0x13a>
 800bb88:	9207      	str	r2, [sp, #28]
 800bb8a:	e014      	b.n	800bbb6 <_vfiprintf_r+0x13a>
 800bb8c:	eba0 0308 	sub.w	r3, r0, r8
 800bb90:	fa09 f303 	lsl.w	r3, r9, r3
 800bb94:	4313      	orrs	r3, r2
 800bb96:	9304      	str	r3, [sp, #16]
 800bb98:	46a2      	mov	sl, r4
 800bb9a:	e7d2      	b.n	800bb42 <_vfiprintf_r+0xc6>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	1d19      	adds	r1, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	9103      	str	r1, [sp, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bfbb      	ittet	lt
 800bba8:	425b      	neglt	r3, r3
 800bbaa:	f042 0202 	orrlt.w	r2, r2, #2
 800bbae:	9307      	strge	r3, [sp, #28]
 800bbb0:	9307      	strlt	r3, [sp, #28]
 800bbb2:	bfb8      	it	lt
 800bbb4:	9204      	strlt	r2, [sp, #16]
 800bbb6:	7823      	ldrb	r3, [r4, #0]
 800bbb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbba:	d10a      	bne.n	800bbd2 <_vfiprintf_r+0x156>
 800bbbc:	7863      	ldrb	r3, [r4, #1]
 800bbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbc0:	d132      	bne.n	800bc28 <_vfiprintf_r+0x1ac>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	1d1a      	adds	r2, r3, #4
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	9203      	str	r2, [sp, #12]
 800bbca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbce:	3402      	adds	r4, #2
 800bbd0:	9305      	str	r3, [sp, #20]
 800bbd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bca8 <_vfiprintf_r+0x22c>
 800bbd6:	7821      	ldrb	r1, [r4, #0]
 800bbd8:	2203      	movs	r2, #3
 800bbda:	4650      	mov	r0, sl
 800bbdc:	f7f4 fb18 	bl	8000210 <memchr>
 800bbe0:	b138      	cbz	r0, 800bbf2 <_vfiprintf_r+0x176>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	eba0 000a 	sub.w	r0, r0, sl
 800bbe8:	2240      	movs	r2, #64	@ 0x40
 800bbea:	4082      	lsls	r2, r0
 800bbec:	4313      	orrs	r3, r2
 800bbee:	3401      	adds	r4, #1
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf6:	4829      	ldr	r0, [pc, #164]	@ (800bc9c <_vfiprintf_r+0x220>)
 800bbf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbfc:	2206      	movs	r2, #6
 800bbfe:	f7f4 fb07 	bl	8000210 <memchr>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d03f      	beq.n	800bc86 <_vfiprintf_r+0x20a>
 800bc06:	4b26      	ldr	r3, [pc, #152]	@ (800bca0 <_vfiprintf_r+0x224>)
 800bc08:	bb1b      	cbnz	r3, 800bc52 <_vfiprintf_r+0x1d6>
 800bc0a:	9b03      	ldr	r3, [sp, #12]
 800bc0c:	3307      	adds	r3, #7
 800bc0e:	f023 0307 	bic.w	r3, r3, #7
 800bc12:	3308      	adds	r3, #8
 800bc14:	9303      	str	r3, [sp, #12]
 800bc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc18:	443b      	add	r3, r7
 800bc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1c:	e76a      	b.n	800baf4 <_vfiprintf_r+0x78>
 800bc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc22:	460c      	mov	r4, r1
 800bc24:	2001      	movs	r0, #1
 800bc26:	e7a8      	b.n	800bb7a <_vfiprintf_r+0xfe>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	f04f 0c0a 	mov.w	ip, #10
 800bc34:	4620      	mov	r0, r4
 800bc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc3a:	3a30      	subs	r2, #48	@ 0x30
 800bc3c:	2a09      	cmp	r2, #9
 800bc3e:	d903      	bls.n	800bc48 <_vfiprintf_r+0x1cc>
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d0c6      	beq.n	800bbd2 <_vfiprintf_r+0x156>
 800bc44:	9105      	str	r1, [sp, #20]
 800bc46:	e7c4      	b.n	800bbd2 <_vfiprintf_r+0x156>
 800bc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e7f0      	b.n	800bc34 <_vfiprintf_r+0x1b8>
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	462a      	mov	r2, r5
 800bc58:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <_vfiprintf_r+0x228>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fd fbdb 	bl	8009418 <_printf_float>
 800bc62:	4607      	mov	r7, r0
 800bc64:	1c78      	adds	r0, r7, #1
 800bc66:	d1d6      	bne.n	800bc16 <_vfiprintf_r+0x19a>
 800bc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6a:	07d9      	lsls	r1, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_vfiprintf_r+0x1fe>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	059a      	lsls	r2, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_vfiprintf_r+0x1fe>
 800bc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc76:	f7fe f92b 	bl	8009ed0 <__retarget_lock_release_recursive>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	065b      	lsls	r3, r3, #25
 800bc7e:	f53f af1f 	bmi.w	800bac0 <_vfiprintf_r+0x44>
 800bc82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc84:	e71e      	b.n	800bac4 <_vfiprintf_r+0x48>
 800bc86:	ab03      	add	r3, sp, #12
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	4b05      	ldr	r3, [pc, #20]	@ (800bca4 <_vfiprintf_r+0x228>)
 800bc8e:	a904      	add	r1, sp, #16
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7fd fe59 	bl	8009948 <_printf_i>
 800bc96:	e7e4      	b.n	800bc62 <_vfiprintf_r+0x1e6>
 800bc98:	0800c318 	.word	0x0800c318
 800bc9c:	0800c322 	.word	0x0800c322
 800bca0:	08009419 	.word	0x08009419
 800bca4:	0800ba59 	.word	0x0800ba59
 800bca8:	0800c31e 	.word	0x0800c31e

0800bcac <__swbuf_r>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	460e      	mov	r6, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	b118      	cbz	r0, 800bcbe <__swbuf_r+0x12>
 800bcb6:	6a03      	ldr	r3, [r0, #32]
 800bcb8:	b90b      	cbnz	r3, 800bcbe <__swbuf_r+0x12>
 800bcba:	f7fd fff1 	bl	8009ca0 <__sinit>
 800bcbe:	69a3      	ldr	r3, [r4, #24]
 800bcc0:	60a3      	str	r3, [r4, #8]
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	071a      	lsls	r2, r3, #28
 800bcc6:	d501      	bpl.n	800bccc <__swbuf_r+0x20>
 800bcc8:	6923      	ldr	r3, [r4, #16]
 800bcca:	b943      	cbnz	r3, 800bcde <__swbuf_r+0x32>
 800bccc:	4621      	mov	r1, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f000 f82a 	bl	800bd28 <__swsetup_r>
 800bcd4:	b118      	cbz	r0, 800bcde <__swbuf_r+0x32>
 800bcd6:	f04f 37ff 	mov.w	r7, #4294967295
 800bcda:	4638      	mov	r0, r7
 800bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	6922      	ldr	r2, [r4, #16]
 800bce2:	1a98      	subs	r0, r3, r2
 800bce4:	6963      	ldr	r3, [r4, #20]
 800bce6:	b2f6      	uxtb	r6, r6
 800bce8:	4283      	cmp	r3, r0
 800bcea:	4637      	mov	r7, r6
 800bcec:	dc05      	bgt.n	800bcfa <__swbuf_r+0x4e>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f7ff fda7 	bl	800b844 <_fflush_r>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d1ed      	bne.n	800bcd6 <__swbuf_r+0x2a>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	60a3      	str	r3, [r4, #8]
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	6022      	str	r2, [r4, #0]
 800bd06:	701e      	strb	r6, [r3, #0]
 800bd08:	6962      	ldr	r2, [r4, #20]
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d004      	beq.n	800bd1a <__swbuf_r+0x6e>
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	07db      	lsls	r3, r3, #31
 800bd14:	d5e1      	bpl.n	800bcda <__swbuf_r+0x2e>
 800bd16:	2e0a      	cmp	r6, #10
 800bd18:	d1df      	bne.n	800bcda <__swbuf_r+0x2e>
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f7ff fd91 	bl	800b844 <_fflush_r>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0d9      	beq.n	800bcda <__swbuf_r+0x2e>
 800bd26:	e7d6      	b.n	800bcd6 <__swbuf_r+0x2a>

0800bd28 <__swsetup_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4b29      	ldr	r3, [pc, #164]	@ (800bdd0 <__swsetup_r+0xa8>)
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	460c      	mov	r4, r1
 800bd32:	b118      	cbz	r0, 800bd3c <__swsetup_r+0x14>
 800bd34:	6a03      	ldr	r3, [r0, #32]
 800bd36:	b90b      	cbnz	r3, 800bd3c <__swsetup_r+0x14>
 800bd38:	f7fd ffb2 	bl	8009ca0 <__sinit>
 800bd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd40:	0719      	lsls	r1, r3, #28
 800bd42:	d422      	bmi.n	800bd8a <__swsetup_r+0x62>
 800bd44:	06da      	lsls	r2, r3, #27
 800bd46:	d407      	bmi.n	800bd58 <__swsetup_r+0x30>
 800bd48:	2209      	movs	r2, #9
 800bd4a:	602a      	str	r2, [r5, #0]
 800bd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	f04f 30ff 	mov.w	r0, #4294967295
 800bd56:	e033      	b.n	800bdc0 <__swsetup_r+0x98>
 800bd58:	0758      	lsls	r0, r3, #29
 800bd5a:	d512      	bpl.n	800bd82 <__swsetup_r+0x5a>
 800bd5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd5e:	b141      	cbz	r1, 800bd72 <__swsetup_r+0x4a>
 800bd60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd64:	4299      	cmp	r1, r3
 800bd66:	d002      	beq.n	800bd6e <__swsetup_r+0x46>
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f7fe ff0d 	bl	800ab88 <_free_r>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd78:	81a3      	strh	r3, [r4, #12]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	6063      	str	r3, [r4, #4]
 800bd7e:	6923      	ldr	r3, [r4, #16]
 800bd80:	6023      	str	r3, [r4, #0]
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	f043 0308 	orr.w	r3, r3, #8
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	b94b      	cbnz	r3, 800bda2 <__swsetup_r+0x7a>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd98:	d003      	beq.n	800bda2 <__swsetup_r+0x7a>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f000 f883 	bl	800bea8 <__smakebuf_r>
 800bda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda6:	f013 0201 	ands.w	r2, r3, #1
 800bdaa:	d00a      	beq.n	800bdc2 <__swsetup_r+0x9a>
 800bdac:	2200      	movs	r2, #0
 800bdae:	60a2      	str	r2, [r4, #8]
 800bdb0:	6962      	ldr	r2, [r4, #20]
 800bdb2:	4252      	negs	r2, r2
 800bdb4:	61a2      	str	r2, [r4, #24]
 800bdb6:	6922      	ldr	r2, [r4, #16]
 800bdb8:	b942      	cbnz	r2, 800bdcc <__swsetup_r+0xa4>
 800bdba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdbe:	d1c5      	bne.n	800bd4c <__swsetup_r+0x24>
 800bdc0:	bd38      	pop	{r3, r4, r5, pc}
 800bdc2:	0799      	lsls	r1, r3, #30
 800bdc4:	bf58      	it	pl
 800bdc6:	6962      	ldrpl	r2, [r4, #20]
 800bdc8:	60a2      	str	r2, [r4, #8]
 800bdca:	e7f4      	b.n	800bdb6 <__swsetup_r+0x8e>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e7f7      	b.n	800bdc0 <__swsetup_r+0x98>
 800bdd0:	20000020 	.word	0x20000020

0800bdd4 <_raise_r>:
 800bdd4:	291f      	cmp	r1, #31
 800bdd6:	b538      	push	{r3, r4, r5, lr}
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460c      	mov	r4, r1
 800bddc:	d904      	bls.n	800bde8 <_raise_r+0x14>
 800bdde:	2316      	movs	r3, #22
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	f04f 30ff 	mov.w	r0, #4294967295
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdea:	b112      	cbz	r2, 800bdf2 <_raise_r+0x1e>
 800bdec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdf0:	b94b      	cbnz	r3, 800be06 <_raise_r+0x32>
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f000 f830 	bl	800be58 <_getpid_r>
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be02:	f000 b817 	b.w	800be34 <_kill_r>
 800be06:	2b01      	cmp	r3, #1
 800be08:	d00a      	beq.n	800be20 <_raise_r+0x4c>
 800be0a:	1c59      	adds	r1, r3, #1
 800be0c:	d103      	bne.n	800be16 <_raise_r+0x42>
 800be0e:	2316      	movs	r3, #22
 800be10:	6003      	str	r3, [r0, #0]
 800be12:	2001      	movs	r0, #1
 800be14:	e7e7      	b.n	800bde6 <_raise_r+0x12>
 800be16:	2100      	movs	r1, #0
 800be18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be1c:	4620      	mov	r0, r4
 800be1e:	4798      	blx	r3
 800be20:	2000      	movs	r0, #0
 800be22:	e7e0      	b.n	800bde6 <_raise_r+0x12>

0800be24 <raise>:
 800be24:	4b02      	ldr	r3, [pc, #8]	@ (800be30 <raise+0xc>)
 800be26:	4601      	mov	r1, r0
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f7ff bfd3 	b.w	800bdd4 <_raise_r>
 800be2e:	bf00      	nop
 800be30:	20000020 	.word	0x20000020

0800be34 <_kill_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d07      	ldr	r5, [pc, #28]	@ (800be54 <_kill_r+0x20>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	4611      	mov	r1, r2
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	f7f6 f8ed 	bl	8002020 <_kill>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	d102      	bne.n	800be50 <_kill_r+0x1c>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	b103      	cbz	r3, 800be50 <_kill_r+0x1c>
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	bd38      	pop	{r3, r4, r5, pc}
 800be52:	bf00      	nop
 800be54:	20004f58 	.word	0x20004f58

0800be58 <_getpid_r>:
 800be58:	f7f6 b8da 	b.w	8002010 <_getpid>

0800be5c <__swhatbuf_r>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	460c      	mov	r4, r1
 800be60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be64:	2900      	cmp	r1, #0
 800be66:	b096      	sub	sp, #88	@ 0x58
 800be68:	4615      	mov	r5, r2
 800be6a:	461e      	mov	r6, r3
 800be6c:	da0d      	bge.n	800be8a <__swhatbuf_r+0x2e>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be74:	f04f 0100 	mov.w	r1, #0
 800be78:	bf14      	ite	ne
 800be7a:	2340      	movne	r3, #64	@ 0x40
 800be7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be80:	2000      	movs	r0, #0
 800be82:	6031      	str	r1, [r6, #0]
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	b016      	add	sp, #88	@ 0x58
 800be88:	bd70      	pop	{r4, r5, r6, pc}
 800be8a:	466a      	mov	r2, sp
 800be8c:	f000 f848 	bl	800bf20 <_fstat_r>
 800be90:	2800      	cmp	r0, #0
 800be92:	dbec      	blt.n	800be6e <__swhatbuf_r+0x12>
 800be94:	9901      	ldr	r1, [sp, #4]
 800be96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be9e:	4259      	negs	r1, r3
 800bea0:	4159      	adcs	r1, r3
 800bea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bea6:	e7eb      	b.n	800be80 <__swhatbuf_r+0x24>

0800bea8 <__smakebuf_r>:
 800bea8:	898b      	ldrh	r3, [r1, #12]
 800beaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beac:	079d      	lsls	r5, r3, #30
 800beae:	4606      	mov	r6, r0
 800beb0:	460c      	mov	r4, r1
 800beb2:	d507      	bpl.n	800bec4 <__smakebuf_r+0x1c>
 800beb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	6123      	str	r3, [r4, #16]
 800bebc:	2301      	movs	r3, #1
 800bebe:	6163      	str	r3, [r4, #20]
 800bec0:	b003      	add	sp, #12
 800bec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec4:	ab01      	add	r3, sp, #4
 800bec6:	466a      	mov	r2, sp
 800bec8:	f7ff ffc8 	bl	800be5c <__swhatbuf_r>
 800becc:	9f00      	ldr	r7, [sp, #0]
 800bece:	4605      	mov	r5, r0
 800bed0:	4639      	mov	r1, r7
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7fe fecc 	bl	800ac70 <_malloc_r>
 800bed8:	b948      	cbnz	r0, 800beee <__smakebuf_r+0x46>
 800beda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bede:	059a      	lsls	r2, r3, #22
 800bee0:	d4ee      	bmi.n	800bec0 <__smakebuf_r+0x18>
 800bee2:	f023 0303 	bic.w	r3, r3, #3
 800bee6:	f043 0302 	orr.w	r3, r3, #2
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	e7e2      	b.n	800beb4 <__smakebuf_r+0xc>
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	6020      	str	r0, [r4, #0]
 800bef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800befe:	b15b      	cbz	r3, 800bf18 <__smakebuf_r+0x70>
 800bf00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf04:	4630      	mov	r0, r6
 800bf06:	f000 f81d 	bl	800bf44 <_isatty_r>
 800bf0a:	b128      	cbz	r0, 800bf18 <__smakebuf_r+0x70>
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	f023 0303 	bic.w	r3, r3, #3
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	81a3      	strh	r3, [r4, #12]
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	431d      	orrs	r5, r3
 800bf1c:	81a5      	strh	r5, [r4, #12]
 800bf1e:	e7cf      	b.n	800bec0 <__smakebuf_r+0x18>

0800bf20 <_fstat_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d07      	ldr	r5, [pc, #28]	@ (800bf40 <_fstat_r+0x20>)
 800bf24:	2300      	movs	r3, #0
 800bf26:	4604      	mov	r4, r0
 800bf28:	4608      	mov	r0, r1
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	602b      	str	r3, [r5, #0]
 800bf2e:	f7f6 f8d7 	bl	80020e0 <_fstat>
 800bf32:	1c43      	adds	r3, r0, #1
 800bf34:	d102      	bne.n	800bf3c <_fstat_r+0x1c>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	b103      	cbz	r3, 800bf3c <_fstat_r+0x1c>
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	bd38      	pop	{r3, r4, r5, pc}
 800bf3e:	bf00      	nop
 800bf40:	20004f58 	.word	0x20004f58

0800bf44 <_isatty_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d06      	ldr	r5, [pc, #24]	@ (800bf60 <_isatty_r+0x1c>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f6 f8d6 	bl	8002100 <_isatty>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_isatty_r+0x1a>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_isatty_r+0x1a>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	20004f58 	.word	0x20004f58

0800bf64 <_init>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	bf00      	nop
 800bf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6a:	bc08      	pop	{r3}
 800bf6c:	469e      	mov	lr, r3
 800bf6e:	4770      	bx	lr

0800bf70 <_fini>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr
